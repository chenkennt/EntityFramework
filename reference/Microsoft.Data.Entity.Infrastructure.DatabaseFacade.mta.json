
{
  "_lang": "csharp",
  "_tocPath": "reference/toc.html",
  "_navPath": "toc.html",
  "_rel": "../",
  "_navRel": "../toc.html",
  "_tocRel": "toc.html",
  "_appTitle": "Entity Framework",
  "item": {
    "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
    "id": "DatabaseFacade",
    "parent": "Microsoft.Data.Entity.Infrastructure",
    "children": [
      {
        "title": "Constructors",
        "id": "constructors",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.#ctor(Microsoft.Data.Entity.DbContext)",
            "id": "DatabaseFacade_DbContext_",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "DatabaseFacade(DbContext)",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.DatabaseFacade(Microsoft.Data.Entity.DbContext)",
            "type": "constructor",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 27,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<p>Initializes a new instance of the <xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade\"></xref> class. Instances of this class are typically\nobtained from <xref href=\"Microsoft.Data.Entity.DbContext.Database\"></xref> and it is not designed to be directly constructed\nin your application code.</p>\n",
            "syntax": {
              "content": "public DatabaseFacade(DbContext context)",
              "content.vb": "Public Sub New(context As DbContext)",
              "parameters": [
                {
                  "id": "context",
                  "type": {
                    "uid": "Microsoft.Data.Entity.DbContext",
                    "parent": "Microsoft.Data.Entity",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.DbContext.yml",
                    "name": "DbContext",
                    "fullName": "Microsoft.Data.Entity.DbContext",
                    "specName": "<xref href=\"Microsoft.Data.Entity.DbContext\" name=\"Microsoft.Data.Entity.DbContext\"/>",
                    "id": "DbContext",
                    "level": 0
                  },
                  "description": "<p>The context this database API belongs to .</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.#ctor(Microsoft.Data.Entity.DbContext)\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.DatabaseFacade(Microsoft.Data.Entity.DbContext)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L28"
          }
        ]
      },
      {
        "title": "Properties",
        "id": "properties",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.Microsoft#Data#Entity#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance",
            "id": "IInfrastructure_IServiceProvider__Instance",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "IInfrastructure<IServiceProvider>.Instance",
            "name.vb": "Microsoft.Data.Entity.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.Microsoft.Data.Entity.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 127,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<para>\nGets the scoped <xref href=\"System.IServiceProvider\"></xref> being used to resolve services.\n</para>\n<para>\nThis property is intended for use by extension methods that need to make use of services\nnot directly exposed in the public API surface.\n</para>",
            "syntax": {
                "content": "IServiceProvider IInfrastructure<IServiceProvider>.Instance { get; }",
                "content.vb": "ReadOnly WriteOnly Property Microsoft.Data.Entity.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance As IServiceProvider Implements IInfrastructure(Of IServiceProvider).Instance",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.IServiceProvider",
                    "parent": "System",
                    "isExternal": true,
                    "name": "IServiceProvider",
                    "fullName": "System.IServiceProvider",
                    "specName": "<xref href=\"System.IServiceProvider\" name=\"System.IServiceProvider\"/>",
                    "id": "IServiceProvider",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.Microsoft#Data#Entity#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.Microsoft.Data.Entity.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L128"
          }
        ]
      },
      {
        "title": "Methods",
        "id": "methods",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.BeginTransaction",
            "id": "BeginTransaction__",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "BeginTransaction()",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.BeginTransaction()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 92,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<p>Starts a new transaction.</p>\n",
            "syntax": {
              "content": "public virtual IDbContextTransaction BeginTransaction()",
              "content.vb": "Public Overridable Function BeginTransaction As IDbContextTransaction",
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Storage.IDbContextTransaction",
                  "parent": "Microsoft.Data.Entity.Storage",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Storage.IDbContextTransaction.yml",
                  "name": "IDbContextTransaction",
                  "fullName": "Microsoft.Data.Entity.Storage.IDbContextTransaction",
                  "type": "interface",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IDbContextTransaction\" name=\"Microsoft.Data.Entity.Storage.IDbContextTransaction\"/>",
                  "id": "IDbContextTransaction",
                  "level": 0
                },
                "description": "<p>A <xref href=\"Microsoft.Data.Entity.Storage.IDbContextTransaction\"></xref> that represents the started transaction.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.BeginTransaction\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.BeginTransaction()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L93"
          },
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.BeginTransactionAsync(System.Threading.CancellationToken)",
            "id": "BeginTransactionAsync_CancellationToken_",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "BeginTransactionAsync(CancellationToken)",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.BeginTransactionAsync(System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 103,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<p>Asynchronously starts a new transaction.</p>\n",
            "syntax": {
              "content": "public virtual Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = null)",
              "content.vb": "Public Overridable Function BeginTransactionAsync(cancellationToken As CancellationToken = Nothing) As Task(Of IDbContextTransaction)",
              "parameters": [
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{Microsoft.Data.Entity.Storage.IDbContextTransaction}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "href": "Microsoft.Data.Entity.Storage.IDbContextTransaction.yml",
                  "name": "Task<IDbContextTransaction>",
                  "name.vb": "Task(Of IDbContextTransaction)",
                  "fullName": "System.Threading.Tasks.Task<Microsoft.Data.Entity.Storage.IDbContextTransaction>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of Microsoft.Data.Entity.Storage.IDbContextTransaction)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "Microsoft.Data.Entity.Storage.IDbContextTransaction",
                      "name": "IDbContextTransaction",
                      "fullName": "Microsoft.Data.Entity.Storage.IDbContextTransaction",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.Storage.IDbContextTransaction.yml"
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "Microsoft.Data.Entity.Storage.IDbContextTransaction",
                      "name": "IDbContextTransaction",
                      "fullName": "Microsoft.Data.Entity.Storage.IDbContextTransaction",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.Storage.IDbContextTransaction.yml"
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"Microsoft.Data.Entity.Storage.IDbContextTransaction\" name=\"Microsoft.Data.Entity.Storage.IDbContextTransaction\"/>&gt;",
                  "id": "Task_IDbContextTransaction_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronus transaction initialization. The task result contains a <xref href=\"Microsoft.Data.Entity.Storage.IDbContextTransaction\"></xref>\nthat represents the started transaction.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.BeginTransactionAsync(System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.BeginTransactionAsync(System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L104"
          },
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.CommitTransaction",
            "id": "CommitTransaction__",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "CommitTransaction()",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.CommitTransaction()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 109,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<p>Applies the outstanding operations in the current transaction to the database.</p>\n",
            "syntax": {
              "content": "public virtual void CommitTransaction()",
              "content.vb": "Public Overridable Sub CommitTransaction"
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.CommitTransaction\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.CommitTransaction()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L110"
          },
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreated",
            "id": "EnsureCreated__",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "EnsureCreated()",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreated()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 40,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<p>Ensures that the database for the context exists. If it exists, no action is taken. If it does not\nexist then the database and all its schema are created. If the database exists, then no effort is made\nto ensure it is compatible with the model for this context.</p>\n",
            "syntax": {
              "content": "public virtual bool EnsureCreated()",
              "content.vb": "Public Overridable Function EnsureCreated As Boolean",
              "return": {
                "type": {
                  "uid": "System.Boolean",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Boolean",
                  "fullName": "System.Boolean",
                  "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                  "id": "Boolean",
                  "level": 0
                },
                "description": "<p>True if the database is created, false if it already existed.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreated\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreated()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L41"
          },
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)",
            "id": "EnsureCreatedAsync_CancellationToken_",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "EnsureCreatedAsync(CancellationToken)",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 52,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<p>Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not\nexist then the database and all its schema are created. If the database exists, then no effort is made\nto ensure it is compatible with the model for this context.</p>\n",
            "syntax": {
              "content": "public virtual Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = null)",
              "content.vb": "Public Overridable Function EnsureCreatedAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)",
              "parameters": [
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Boolean}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Boolean>",
                  "name.vb": "Task(Of Boolean)",
                  "fullName": "System.Threading.Tasks.Task<System.Boolean>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Boolean)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;",
                  "id": "Task_Boolean_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous save operation. The task result contains true if the database is created,\nfalse if it already existed.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureCreatedAsync(System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L53"
          },
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeleted",
            "id": "EnsureDeleted__",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "EnsureDeleted()",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeleted()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 66,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<para>\nEnsures that the database for the context does not exist. If it does not exist, no action is taken. If it does\nexist then the database is deleted.\n</para>\n<para>\nWarning: The entire database is deleted an no effort is made to remove just the database objects that are used by\nthe model for this context.\n</para>",
            "syntax": {
              "content": "public virtual bool EnsureDeleted()",
              "content.vb": "Public Overridable Function EnsureDeleted As Boolean",
              "return": {
                "type": {
                  "uid": "System.Boolean",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Boolean",
                  "fullName": "System.Boolean",
                  "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                  "id": "Boolean",
                  "level": 0
                },
                "description": "<p>True if the database is deleted, false if it did not exist.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeleted\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeleted()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L67"
          },
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)",
            "id": "EnsureDeletedAsync_CancellationToken_",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "EnsureDeletedAsync(CancellationToken)",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 83,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<para>\nAsynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does\nexist then the database is deleted.\n</para>\n<para>\nWarning: The entire database is deleted an no effort is made to remove just the database objects that are used by\nthe model for this context.\n</para>",
            "syntax": {
              "content": "public virtual Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = null)",
              "content.vb": "Public Overridable Function EnsureDeletedAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)",
              "parameters": [
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Boolean}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Boolean>",
                  "name.vb": "Task(Of Boolean)",
                  "fullName": "System.Threading.Tasks.Task<System.Boolean>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Boolean)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;",
                  "id": "Task_Boolean_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous save operation. The task result contains true if the database is deleted,\nfalse if it did not exist.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.EnsureDeletedAsync(System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L84"
          },
          {
            "uid": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.RollbackTransaction",
            "id": "RollbackTransaction__",
            "parent": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
            "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
            "name": "RollbackTransaction()",
            "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.RollbackTransaction()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
              "startLine": 115,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Infrastructure",
            "summary": "<p>Discards the outstanding operations in the current transaction.</p>\n",
            "syntax": {
              "content": "public virtual void RollbackTransaction()",
              "content.vb": "Public Overridable Sub RollbackTransaction"
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.RollbackTransaction\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade.RollbackTransaction()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L116"
          }
        ]
      }
    ],
    "href": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade.yml",
    "name": "DatabaseFacade",
    "fullName": "Microsoft.Data.Entity.Infrastructure.DatabaseFacade",
    "type": "Class",
    "source": {
      "remote": {
        "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
        "branch": "dev",
        "repo": "https://github.com/chenkennt/EntityFramework.git"
      },
      "path": "src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs",
      "startLine": 17,
      "endLine": 0,
      "isExternal": false
    },
    "assemblies": [
      "EntityFramework.Core"
    ],
    "namespace": "Microsoft.Data.Entity.Infrastructure",
    "summary": "<p>Provides access to database related information and operations for a context.\nInstances of this class are typically obtained from <xref href=\"Microsoft.Data.Entity.DbContext.Database\"></xref> and it is not designed\nto be directly constructed in your application code.</p>\n",
    "syntax": {
      "content": "public class DatabaseFacade : IInfrastructure<IServiceProvider>",
      "content.vb": "Public Class DatabaseFacade Implements IInfrastructure(Of IServiceProvider)"
    },
    "inheritance": [
      {
        "uid": "System.Object",
        "parent": "System",
        "isExternal": true,
        "name": "Object",
        "fullName": "System.Object",
        "specName": "<xref href=\"System.Object\" name=\"System.Object\"/>",
        "id": "Object",
        "level": 0,
        "index": 0
      }
    ],
    "implements": [
      "Microsoft.Data.Entity.Infrastructure.IInfrastructure{System.IServiceProvider}"
    ],
    "inheritedMembers": [
      "System.Object.ToString",
      "System.Object.Equals(System.Object)",
      "System.Object.Equals(System.Object,System.Object)",
      "System.Object.ReferenceEquals(System.Object,System.Object)",
      "System.Object.GetHashCode",
      "System.Object.GetType",
      "System.Object.MemberwiseClone"
    ],
    "specName": "<xref href=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade\" name=\"Microsoft.Data.Entity.Infrastructure.DatabaseFacade\"/>",
    "level": 1,
    "docurl": "",
    "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Infrastructure/DatabaseFacade.cs/#L18"
  },
  "isClass": true,
  "_allowToc": true
}
