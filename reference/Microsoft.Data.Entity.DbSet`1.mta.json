
{
  "_lang": "csharp",
  "_tocPath": "reference/toc.html",
  "_navPath": "toc.html",
  "_rel": "../",
  "_navRel": "../toc.html",
  "_tocRel": "toc.html",
  "_appTitle": "Entity Framework",
  "item": {
    "uid": "Microsoft.Data.Entity.DbSet`1",
    "id": "DbSet_TEntity_",
    "parent": "Microsoft.Data.Entity",
    "children": [
      {
        "title": "Properties",
        "id": "properties",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance",
            "id": "IInfrastructure_IServiceProvider__Instance",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IInfrastructure<IServiceProvider>.Instance",
            "name.vb": "Microsoft.Data.Entity.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.Microsoft.Data.Entity.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).Microsoft.Data.Entity.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 312,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<para>\nGets the scoped <xref href=\"System.IServiceProvider\"></xref> being used to resolve services.\n</para>\n<para>\nThis property is intended for use by extension methods that need to make use of services\nnot directly exposed in the public API surface.\n</para>",
            "syntax": {
                "content": "IServiceProvider IInfrastructure<IServiceProvider>.Instance { get; }",
                "content.vb": "ReadOnly WriteOnly Property Microsoft.Data.Entity.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance As IServiceProvider Implements IInfrastructure(Of IServiceProvider).Instance",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.IServiceProvider",
                    "parent": "System",
                    "isExternal": true,
                    "name": "IServiceProvider",
                    "fullName": "System.IServiceProvider",
                    "specName": "<xref href=\"System.IServiceProvider\" name=\"System.IServiceProvider\"/>",
                    "id": "IServiceProvider",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.Microsoft.Data.Entity.Infrastructure.IInfrastructure&lt;System.IServiceProvider&gt;.Instance\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L313"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Query#Internal#IAsyncEnumerableAccessor{TEntity}#AsyncEnumerable",
            "id": "IAsyncEnumerableAccessor_TEntity__AsyncEnumerable",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IAsyncEnumerableAccessor<TEntity>.AsyncEnumerable",
            "name.vb": "Microsoft.Data.Entity.Query.Internal.IAsyncEnumerableAccessor<TEntity>.AsyncEnumerable",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.Microsoft.Data.Entity.Query.Internal.IAsyncEnumerableAccessor<TEntity>.AsyncEnumerable",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).Microsoft.Data.Entity.Query.Internal.IAsyncEnumerableAccessor<TEntity>.AsyncEnumerable",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 274,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Returns an <xref href=\"System.Collections.Generic.IAsyncEnumerable`1\"></xref> which when enumerated will asynchronously execute the query against\nthe database.</p>\n",
            "syntax": {
                "content": "IAsyncEnumerable<TEntity> IAsyncEnumerableAccessor<TEntity>.AsyncEnumerable { get; }",
                "content.vb": "ReadOnly WriteOnly Property Microsoft.Data.Entity.Query.Internal.IAsyncEnumerableAccessor<TEntity>.AsyncEnumerable As IAsyncEnumerable(Of TEntity) Implements IAsyncEnumerableAccessor(Of TEntity).AsyncEnumerable",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Collections.Generic.IAsyncEnumerable{{TEntity}}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IAsyncEnumerable`1",
                    "name": "IAsyncEnumerable<TEntity>",
                    "name.vb": "IAsyncEnumerable(Of TEntity)",
                    "fullName": "System.Collections.Generic.IAsyncEnumerable<TEntity>",
                    "fullName.vb": "System.Collections.Generic.IAsyncEnumerable(Of TEntity)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IAsyncEnumerable`1",
                        "name": "IAsyncEnumerable",
                        "fullName": "System.Collections.Generic.IAsyncEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IAsyncEnumerable`1",
                        "name": "IAsyncEnumerable",
                        "fullName": "System.Collections.Generic.IAsyncEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IAsyncEnumerable`1\" name=\"System.Collections.Generic.IAsyncEnumerable\"/>&lt;TEntity&gt;",
                    "id": "IAsyncEnumerable_TEntity_",
                    "level": 0
                  },
                  "description": "<p>The query results.</p>\n"
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.Microsoft#Data#Entity#Query#Internal#IAsyncEnumerableAccessor{TEntity}#AsyncEnumerable\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.Microsoft.Data.Entity.Query.Internal.IAsyncEnumerableAccessor&lt;TEntity&gt;.AsyncEnumerable\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L275"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.System#ComponentModel#IListSource#ContainsListCollection",
            "id": "IListSource_ContainsListCollection",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IListSource.ContainsListCollection",
            "name.vb": "System.ComponentModel.IListSource.ContainsListCollection",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.System.ComponentModel.IListSource.ContainsListCollection",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).System.ComponentModel.IListSource.ContainsListCollection",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 345,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Gets a value indicating whether the collection is a collection of System.Collections.IList objects.\nAlways returns false.</p>\n",
            "syntax": {
                "content": "bool IListSource.ContainsListCollection { get; }",
                "content.vb": "ReadOnly WriteOnly Property System.ComponentModel.IListSource.ContainsListCollection As Boolean Implements IListSource.ContainsListCollection",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Boolean",
                    "parent": "System",
                    "isExternal": true,
                    "name": "Boolean",
                    "fullName": "System.Boolean",
                    "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                    "id": "Boolean",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.System#ComponentModel#IListSource#ContainsListCollection\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.System.ComponentModel.IListSource.ContainsListCollection\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L346"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#ElementType",
            "id": "IQueryable_ElementType",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IQueryable.ElementType",
            "name.vb": "System.Linq.IQueryable.ElementType",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.System.Linq.IQueryable.ElementType",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).System.Linq.IQueryable.ElementType",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 282,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Gets the IQueryable element type.</p>\n",
            "syntax": {
                "content": "Type IQueryable.ElementType { get; }",
                "content.vb": "ReadOnly WriteOnly Property System.Linq.IQueryable.ElementType As Type Implements IQueryable.ElementType",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Type",
                    "parent": "System",
                    "isExternal": true,
                    "name": "Type",
                    "fullName": "System.Type",
                    "specName": "<xref href=\"System.Type\" name=\"System.Type\"/>",
                    "id": "Type",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#ElementType\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.System.Linq.IQueryable.ElementType\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L283"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#Expression",
            "id": "IQueryable_Expression",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IQueryable.Expression",
            "name.vb": "System.Linq.IQueryable.Expression",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.System.Linq.IQueryable.Expression",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).System.Linq.IQueryable.Expression",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 290,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Gets the IQueryable LINQ Expression.</p>\n",
            "syntax": {
                "content": "Expression IQueryable.Expression { get; }",
                "content.vb": "ReadOnly WriteOnly Property System.Linq.IQueryable.Expression As Expression Implements IQueryable.Expression",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Linq.Expressions.Expression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "Expression",
                    "fullName": "System.Linq.Expressions.Expression",
                    "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                    "id": "Expression",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#Expression\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.System.Linq.IQueryable.Expression\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L291"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#Provider",
            "id": "IQueryable_Provider",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IQueryable.Provider",
            "name.vb": "System.Linq.IQueryable.Provider",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.System.Linq.IQueryable.Provider",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).System.Linq.IQueryable.Provider",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 298,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Gets the IQueryable provider.</p>\n",
            "syntax": {
                "content": "IQueryProvider IQueryable.Provider { get; }",
                "content.vb": "ReadOnly WriteOnly Property System.Linq.IQueryable.Provider As IQueryProvider Implements IQueryable.Provider",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Linq.IQueryProvider",
                    "parent": "System.Linq",
                    "isExternal": true,
                    "name": "IQueryProvider",
                    "fullName": "System.Linq.IQueryProvider",
                    "specName": "<xref href=\"System.Linq.IQueryProvider\" name=\"System.Linq.IQueryProvider\"/>",
                    "id": "IQueryProvider",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.System#Linq#IQueryable#Provider\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.System.Linq.IQueryable.Provider\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L299"
          }
        ]
      },
      {
        "title": "Methods",
        "id": "methods",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.Add(`0,Microsoft.Data.Entity.GraphBehavior)",
            "id": "Add_TEntity__GraphBehavior_",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "Add(TEntity, GraphBehavior)",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.Add(TEntity, Microsoft.Data.Entity.GraphBehavior)",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).Add(TEntity, Microsoft.Data.Entity.GraphBehavior)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 59,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entity in the <xref href=\"Microsoft.Data.Entity.EntityState.Added\"></xref> state such that it will\nbe inserted into the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "syntax": {
              "content": "public virtual EntityEntry<TEntity> Add(TEntity entity, GraphBehavior behavior = 0)",
              "content.vb": "Public Overridable Function Add(entity As TEntity, behavior As GraphBehavior = 0) As EntityEntry(Of TEntity)",
              "parameters": [
                {
                  "id": "entity",
                  "type": {
                    "uid": "{TEntity}",
                    "isExternal": false,
                    "name": "TEntity",
                    "fullName": "TEntity",
                    "specName": "<xref href=\"{TEntity}\" name=\"TEntity\"/>",
                    "id": "TEntity",
                    "level": 0
                  },
                  "description": "<p>The entity to add.</p>\n"
                },
                {
                  "id": "behavior",
                  "type": {
                    "uid": "Microsoft.Data.Entity.GraphBehavior",
                    "parent": "Microsoft.Data.Entity",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.GraphBehavior.yml",
                    "name": "GraphBehavior",
                    "fullName": "Microsoft.Data.Entity.GraphBehavior",
                    "type": "enum",
                    "summary": "<p>Indicates how the navigation properties of an entity are traversed so that a given operation can be recursively\nperformed on the entities that it is related to.</p>\n",
                    "specName": "<xref href=\"Microsoft.Data.Entity.GraphBehavior\" name=\"Microsoft.Data.Entity.GraphBehavior\"/>",
                    "id": "GraphBehavior",
                    "level": 0
                  },
                  "description": "<p>Determines whether the context will bring in only the given entity or also other related entities.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry{{TEntity}}",
                  "parent": "Microsoft.Data.Entity.ChangeTracking",
                  "definition": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                  "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml",
                  "name": "EntityEntry<TEntity>",
                  "name.vb": "EntityEntry(Of TEntity)",
                  "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry<TEntity>",
                  "fullName.vb": "Microsoft.Data.Entity.ChangeTracking.EntityEntry(Of TEntity)",
                  "spec.csharp": [
                    {
                      "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                      "name": "EntityEntry",
                      "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml"
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                      "name": "EntityEntry",
                      "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml"
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry`1\" name=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"/>&lt;TEntity&gt;",
                  "id": "EntityEntry_TEntity_",
                  "level": 0
                },
                "description": "<p>The <xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry`1\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.Add(`0,Microsoft.Data.Entity.GraphBehavior)\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.Add(TEntity, Microsoft.Data.Entity.GraphBehavior)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L60"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.AddRange(`0[])",
            "id": "AddRange_TEntity___",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "AddRange(TEntity[])",
            "name.vb": "AddRange(TEntity())",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.AddRange(TEntity[])",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).AddRange(TEntity())",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 135,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entities in the <xref href=\"Microsoft.Data.Entity.EntityState.Added\"></xref> state such that they will\nbe inserted into the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "syntax": {
              "content": "public virtual void AddRange(params TEntity[] entities)",
              "content.vb": "Public Overridable Sub AddRange(ParamArray entities As TEntity())",
              "parameters": [
                {
                  "id": "entities",
                  "type": {
                    "uid": "{TEntity}[]",
                    "isExternal": false,
                    "name": "TEntity[]",
                    "name.vb": "TEntity()",
                    "fullName": "TEntity[]",
                    "fullName.vb": "TEntity()",
                    "spec.csharp": [
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": "[]",
                        "fullName": "[]",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": "()",
                        "fullName": "()",
                        "isExternal": false
                      }
                    ],
                    "specName": "TEntity[]",
                    "id": "TEntity__",
                    "level": 0
                  },
                  "description": "<p>The entities to add.</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.AddRange(`0[])\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.AddRange(TEntity[])\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L136"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)",
            "id": "AddRange_IEnumerable_TEntity___GraphBehavior_",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "AddRange(IEnumerable<TEntity>, GraphBehavior)",
            "name.vb": "AddRange(IEnumerable(Of TEntity), GraphBehavior)",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.AddRange(System.Collections.Generic.IEnumerable<TEntity>, Microsoft.Data.Entity.GraphBehavior)",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).AddRange(System.Collections.Generic.IEnumerable(Of TEntity), Microsoft.Data.Entity.GraphBehavior)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 190,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entities in the <xref href=\"Microsoft.Data.Entity.EntityState.Added\"></xref> state such that they will\nbe inserted into the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "syntax": {
              "content": "public virtual void AddRange(IEnumerable<TEntity> entities, GraphBehavior behavior = 0)",
              "content.vb": "Public Overridable Sub AddRange(entities As IEnumerable(Of TEntity), behavior As GraphBehavior = 0)",
              "parameters": [
                {
                  "id": "entities",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{{TEntity}}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<TEntity>",
                    "name.vb": "IEnumerable(Of TEntity)",
                    "fullName": "System.Collections.Generic.IEnumerable<TEntity>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of TEntity)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;TEntity&gt;",
                    "id": "IEnumerable_TEntity_",
                    "level": 0
                  },
                  "description": "<p>The entities to add.</p>\n"
                },
                {
                  "id": "behavior",
                  "type": {
                    "uid": "Microsoft.Data.Entity.GraphBehavior",
                    "parent": "Microsoft.Data.Entity",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.GraphBehavior.yml",
                    "name": "GraphBehavior",
                    "fullName": "Microsoft.Data.Entity.GraphBehavior",
                    "type": "enum",
                    "summary": "<p>Indicates how the navigation properties of an entity are traversed so that a given operation can be recursively\nperformed on the entities that it is related to.</p>\n",
                    "specName": "<xref href=\"Microsoft.Data.Entity.GraphBehavior\" name=\"Microsoft.Data.Entity.GraphBehavior\"/>",
                    "id": "GraphBehavior",
                    "level": 0
                  },
                  "description": "<p>Determines whether the context will bring in only the given entities or also other related entities.</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;TEntity&gt;, Microsoft.Data.Entity.GraphBehavior)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L191"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)",
            "id": "Attach_TEntity__GraphBehavior_",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "Attach(TEntity, GraphBehavior)",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.Attach(TEntity, Microsoft.Data.Entity.GraphBehavior)",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).Attach(TEntity, Microsoft.Data.Entity.GraphBehavior)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 78,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entity in the <xref href=\"Microsoft.Data.Entity.EntityState.Unchanged\"></xref> state such that no\noperation will be performed when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "syntax": {
              "content": "public virtual EntityEntry<TEntity> Attach(TEntity entity, GraphBehavior behavior = 0)",
              "content.vb": "Public Overridable Function Attach(entity As TEntity, behavior As GraphBehavior = 0) As EntityEntry(Of TEntity)",
              "parameters": [
                {
                  "id": "entity",
                  "type": {
                    "uid": "{TEntity}",
                    "isExternal": false,
                    "name": "TEntity",
                    "fullName": "TEntity",
                    "specName": "<xref href=\"{TEntity}\" name=\"TEntity\"/>",
                    "id": "TEntity",
                    "level": 0
                  },
                  "description": "<p>The entity to attach.</p>\n"
                },
                {
                  "id": "behavior",
                  "type": {
                    "uid": "Microsoft.Data.Entity.GraphBehavior",
                    "parent": "Microsoft.Data.Entity",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.GraphBehavior.yml",
                    "name": "GraphBehavior",
                    "fullName": "Microsoft.Data.Entity.GraphBehavior",
                    "type": "enum",
                    "summary": "<p>Indicates how the navigation properties of an entity are traversed so that a given operation can be recursively\nperformed on the entities that it is related to.</p>\n",
                    "specName": "<xref href=\"Microsoft.Data.Entity.GraphBehavior\" name=\"Microsoft.Data.Entity.GraphBehavior\"/>",
                    "id": "GraphBehavior",
                    "level": 0
                  },
                  "description": "<p>Determines whether the context will bring in only the given entity or also other related entities.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry{{TEntity}}",
                  "parent": "Microsoft.Data.Entity.ChangeTracking",
                  "definition": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                  "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml",
                  "name": "EntityEntry<TEntity>",
                  "name.vb": "EntityEntry(Of TEntity)",
                  "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry<TEntity>",
                  "fullName.vb": "Microsoft.Data.Entity.ChangeTracking.EntityEntry(Of TEntity)",
                  "spec.csharp": [
                    {
                      "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                      "name": "EntityEntry",
                      "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml"
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                      "name": "EntityEntry",
                      "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml"
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry`1\" name=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"/>&lt;TEntity&gt;",
                  "id": "EntityEntry_TEntity_",
                  "level": 0
                },
                "description": "<p>The <xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.Attach(TEntity, Microsoft.Data.Entity.GraphBehavior)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L79"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.AttachRange(`0[])",
            "id": "AttachRange_TEntity___",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "AttachRange(TEntity[])",
            "name.vb": "AttachRange(TEntity())",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.AttachRange(TEntity[])",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).AttachRange(TEntity())",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 145,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entities in the <xref href=\"Microsoft.Data.Entity.EntityState.Unchanged\"></xref> state such that no\noperation will be performed when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "syntax": {
              "content": "public virtual void AttachRange(params TEntity[] entities)",
              "content.vb": "Public Overridable Sub AttachRange(ParamArray entities As TEntity())",
              "parameters": [
                {
                  "id": "entities",
                  "type": {
                    "uid": "{TEntity}[]",
                    "isExternal": false,
                    "name": "TEntity[]",
                    "name.vb": "TEntity()",
                    "fullName": "TEntity[]",
                    "fullName.vb": "TEntity()",
                    "spec.csharp": [
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": "[]",
                        "fullName": "[]",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": "()",
                        "fullName": "()",
                        "isExternal": false
                      }
                    ],
                    "specName": "TEntity[]",
                    "id": "TEntity__",
                    "level": 0
                  },
                  "description": "<p>The entities to attach.</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.AttachRange(`0[])\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.AttachRange(TEntity[])\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L146"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)",
            "id": "AttachRange_IEnumerable_TEntity___GraphBehavior_",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "AttachRange(IEnumerable<TEntity>, GraphBehavior)",
            "name.vb": "AttachRange(IEnumerable(Of TEntity), GraphBehavior)",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.AttachRange(System.Collections.Generic.IEnumerable<TEntity>, Microsoft.Data.Entity.GraphBehavior)",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).AttachRange(System.Collections.Generic.IEnumerable(Of TEntity), Microsoft.Data.Entity.GraphBehavior)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 205,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entities in the <xref href=\"Microsoft.Data.Entity.EntityState.Unchanged\"></xref> state such that no\noperation will be performed when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "syntax": {
              "content": "public virtual void AttachRange(IEnumerable<TEntity> entities, GraphBehavior behavior = 0)",
              "content.vb": "Public Overridable Sub AttachRange(entities As IEnumerable(Of TEntity), behavior As GraphBehavior = 0)",
              "parameters": [
                {
                  "id": "entities",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{{TEntity}}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<TEntity>",
                    "name.vb": "IEnumerable(Of TEntity)",
                    "fullName": "System.Collections.Generic.IEnumerable<TEntity>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of TEntity)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;TEntity&gt;",
                    "id": "IEnumerable_TEntity_",
                    "level": 0
                  },
                  "description": "<p>The entities to attach.</p>\n"
                },
                {
                  "id": "behavior",
                  "type": {
                    "uid": "Microsoft.Data.Entity.GraphBehavior",
                    "parent": "Microsoft.Data.Entity",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.GraphBehavior.yml",
                    "name": "GraphBehavior",
                    "fullName": "Microsoft.Data.Entity.GraphBehavior",
                    "type": "enum",
                    "summary": "<p>Indicates how the navigation properties of an entity are traversed so that a given operation can be recursively\nperformed on the entities that it is related to.</p>\n",
                    "specName": "<xref href=\"Microsoft.Data.Entity.GraphBehavior\" name=\"Microsoft.Data.Entity.GraphBehavior\"/>",
                    "id": "GraphBehavior",
                    "level": 0
                  },
                  "description": "<p>Determines whether the context will bring in only the given entities or also other related entities.</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.AttachRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.AttachRange(System.Collections.Generic.IEnumerable&lt;TEntity&gt;, Microsoft.Data.Entity.GraphBehavior)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L206"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.Remove(`0)",
            "id": "Remove_TEntity_",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "Remove(TEntity)",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.Remove(TEntity)",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).Remove(TEntity)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 99,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entity in the <xref href=\"Microsoft.Data.Entity.EntityState.Deleted\"></xref> state such that it will\nbe removed from the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "remarks": "<p>If the entity is already tracked in the <xref href=\"Microsoft.Data.Entity.EntityState.Added\"></xref> state then the context will\nstop tracking the entity (rather than marking it as <xref href=\"Microsoft.Data.Entity.EntityState.Deleted\"></xref>) since the\nentity was previously added to the context and does not exist in the database.</p>\n",
            "syntax": {
              "content": "public virtual EntityEntry<TEntity> Remove(TEntity entity)",
              "content.vb": "Public Overridable Function Remove(entity As TEntity) As EntityEntry(Of TEntity)",
              "parameters": [
                {
                  "id": "entity",
                  "type": {
                    "uid": "{TEntity}",
                    "isExternal": false,
                    "name": "TEntity",
                    "fullName": "TEntity",
                    "specName": "<xref href=\"{TEntity}\" name=\"TEntity\"/>",
                    "id": "TEntity",
                    "level": 0
                  },
                  "description": "<p>The entity to remove.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry{{TEntity}}",
                  "parent": "Microsoft.Data.Entity.ChangeTracking",
                  "definition": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                  "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml",
                  "name": "EntityEntry<TEntity>",
                  "name.vb": "EntityEntry(Of TEntity)",
                  "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry<TEntity>",
                  "fullName.vb": "Microsoft.Data.Entity.ChangeTracking.EntityEntry(Of TEntity)",
                  "spec.csharp": [
                    {
                      "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                      "name": "EntityEntry",
                      "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml"
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                      "name": "EntityEntry",
                      "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml"
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry`1\" name=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"/>&lt;TEntity&gt;",
                  "id": "EntityEntry_TEntity_",
                  "level": 0
                },
                "description": "<p>The <xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.Remove(`0)\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.Remove(TEntity)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L100"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.RemoveRange(`0[])",
            "id": "RemoveRange_TEntity___",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "RemoveRange(TEntity[])",
            "name.vb": "RemoveRange(TEntity())",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.RemoveRange(TEntity[])",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).RemoveRange(TEntity())",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 160,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entities in the <xref href=\"Microsoft.Data.Entity.EntityState.Deleted\"></xref> state such that they will\nbe removed from the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "remarks": "<p>If any of the entities are already tracked in the <xref href=\"Microsoft.Data.Entity.EntityState.Added\"></xref> state then the context will\nstop tracking those entities (rather than marking them as <xref href=\"Microsoft.Data.Entity.EntityState.Deleted\"></xref>) since those\nentities were previously added to the context and do not exist in the database.</p>\n",
            "syntax": {
              "content": "public virtual void RemoveRange(params TEntity[] entities)",
              "content.vb": "Public Overridable Sub RemoveRange(ParamArray entities As TEntity())",
              "parameters": [
                {
                  "id": "entities",
                  "type": {
                    "uid": "{TEntity}[]",
                    "isExternal": false,
                    "name": "TEntity[]",
                    "name.vb": "TEntity()",
                    "fullName": "TEntity[]",
                    "fullName.vb": "TEntity()",
                    "spec.csharp": [
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": "[]",
                        "fullName": "[]",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": "()",
                        "fullName": "()",
                        "isExternal": false
                      }
                    ],
                    "specName": "TEntity[]",
                    "id": "TEntity__",
                    "level": 0
                  },
                  "description": "<p>The entities to remove.</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.RemoveRange(`0[])\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.RemoveRange(TEntity[])\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L161"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})",
            "id": "RemoveRange_IEnumerable_TEntity__",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "RemoveRange(IEnumerable<TEntity>)",
            "name.vb": "RemoveRange(IEnumerable(Of TEntity))",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.RemoveRange(System.Collections.Generic.IEnumerable<TEntity>)",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).RemoveRange(System.Collections.Generic.IEnumerable(Of TEntity))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 222,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Begins tracking the given entities in the <xref href=\"Microsoft.Data.Entity.EntityState.Deleted\"></xref> state such that they will\nbe removed from the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.</p>\n",
            "remarks": "<p>If any of the entities are already tracked in the <xref href=\"Microsoft.Data.Entity.EntityState.Added\"></xref> state then the context will\nstop tracking those entities (rather than marking them as <xref href=\"Microsoft.Data.Entity.EntityState.Deleted\"></xref>) since those\nentities were previously added to the context and do not exist in the database.</p>\n",
            "syntax": {
              "content": "public virtual void RemoveRange(IEnumerable<TEntity> entities)",
              "content.vb": "Public Overridable Sub RemoveRange(entities As IEnumerable(Of TEntity))",
              "parameters": [
                {
                  "id": "entities",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{{TEntity}}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<TEntity>",
                    "name.vb": "IEnumerable(Of TEntity)",
                    "fullName": "System.Collections.Generic.IEnumerable<TEntity>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of TEntity)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;TEntity&gt;",
                    "id": "IEnumerable_TEntity_",
                    "level": 0
                  },
                  "description": "<p>The entities to remove.</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.RemoveRange(System.Collections.Generic.IEnumerable&lt;TEntity&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L223"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator",
            "id": "IEnumerable_TEntity__GetEnumerator__",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IEnumerable<TEntity>.GetEnumerator()",
            "name.vb": "System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 254,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Returns an <xref href=\"System.Collections.Generic.IEnumerator`1\"></xref> which when enumerated will execute a query against the database\nto load all entities from the database.</p>\n",
            "syntax": {
              "content": "IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()",
              "content.vb": "Function System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator",
              "return": {
                "type": {
                  "uid": "System.Collections.Generic.IEnumerator{{TEntity}}",
                  "parent": "System.Collections.Generic",
                  "definition": "System.Collections.Generic.IEnumerator`1",
                  "name": "IEnumerator<TEntity>",
                  "name.vb": "IEnumerator(Of TEntity)",
                  "fullName": "System.Collections.Generic.IEnumerator<TEntity>",
                  "fullName.vb": "System.Collections.Generic.IEnumerator(Of TEntity)",
                  "spec.csharp": [
                    {
                      "uid": "System.Collections.Generic.IEnumerator`1",
                      "name": "IEnumerator",
                      "fullName": "System.Collections.Generic.IEnumerator",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Collections.Generic.IEnumerator`1",
                      "name": "IEnumerator",
                      "fullName": "System.Collections.Generic.IEnumerator",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Collections.Generic.IEnumerator`1\" name=\"System.Collections.Generic.IEnumerator\"/>&lt;TEntity&gt;",
                  "id": "IEnumerator_TEntity_",
                  "level": 0
                },
                "description": "<p>The query results.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L255"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.System#Collections#IEnumerable#GetEnumerator",
            "id": "IEnumerable_GetEnumerator__",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IEnumerable.GetEnumerator()",
            "name.vb": "System.Collections.IEnumerable.GetEnumerator()",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.System.Collections.IEnumerable.GetEnumerator()",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).System.Collections.IEnumerable.GetEnumerator()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 264,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Returns an <xref href=\"System.Collections.IEnumerator\"></xref> which when enumerated will execute a query against the database\nto load all entities from the database.</p>\n",
            "syntax": {
              "content": "IEnumerator IEnumerable.GetEnumerator()",
              "content.vb": "Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator",
              "return": {
                "type": {
                  "uid": "System.Collections.IEnumerator",
                  "parent": "System.Collections",
                  "isExternal": true,
                  "name": "IEnumerator",
                  "fullName": "System.Collections.IEnumerator",
                  "specName": "<xref href=\"System.Collections.IEnumerator\" name=\"System.Collections.IEnumerator\"/>",
                  "id": "IEnumerator",
                  "level": 0
                },
                "description": "<p>The query results.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.System#Collections#IEnumerable#GetEnumerator\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.System.Collections.IEnumerable.GetEnumerator()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L265"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.System#ComponentModel#IListSource#GetList",
            "id": "IListSource_GetList__",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "IListSource.GetList()",
            "name.vb": "System.ComponentModel.IListSource.GetList()",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.System.ComponentModel.IListSource.GetList()",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).System.ComponentModel.IListSource.GetList()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 336,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<para>\nThis method is called by data binding frameworks when attempting to data bind directly to a <xref href=\"Microsoft.Data.Entity.DbSet`1\"></xref>.\n</para>\n<para>\nThis implementation always throws an exception as binding directly to a <xref href=\"Microsoft.Data.Entity.DbSet`1\"></xref> will result in a query being\nsent to the database every time the data binding framework requests the contents of the collection. Instead materialize the results\ninto a collection, by calling a method such as <xref href=\"System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\"></xref> or\n<xref href=\"System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\"></xref>, and bind to the collection.\n</para>",
            "syntax": {
              "content": "IList IListSource.GetList()",
              "content.vb": "Function System.ComponentModel.IListSource.GetList As IList Implements IListSource.GetList",
              "return": {
                "type": {
                  "uid": "System.Collections.IList",
                  "parent": "System.Collections",
                  "isExternal": true,
                  "name": "IList",
                  "fullName": "System.Collections.IList",
                  "specName": "<xref href=\"System.Collections.IList\" name=\"System.Collections.IList\"/>",
                  "id": "IList",
                  "level": 0
                },
                "description": "<p>Never returns, always throws an exception.</p>\n"
              }
            },
            "exceptions": [
              {
                "type": "System.NotSupportedException",
                "description": "Always thrown."
              }
            ],
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.System#ComponentModel#IListSource#GetList\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.System.ComponentModel.IListSource.GetList()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L337"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.Update(`0,Microsoft.Data.Entity.GraphBehavior)",
            "id": "Update_TEntity__GraphBehavior_",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "Update(TEntity, GraphBehavior)",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.Update(TEntity, Microsoft.Data.Entity.GraphBehavior)",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).Update(TEntity, Microsoft.Data.Entity.GraphBehavior)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 123,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<para>\nBegins tracking the given entity in the <xref href=\"Microsoft.Data.Entity.EntityState.Modified\"></xref> state such that it will\nbe updated in the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.\n</para>\n<para>\nAll properties of the entity will be marked as modified. To mark only some properties as modified, use\n<xref href=\"Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)\"></xref> to begin tracking the entity in the <xref href=\"Microsoft.Data.Entity.EntityState.Unchanged\"></xref>\nstate and then use the returned <xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"></xref> to mark the desired properties as modified.\n</para>",
            "syntax": {
              "content": "public virtual EntityEntry<TEntity> Update(TEntity entity, GraphBehavior behavior = 0)",
              "content.vb": "Public Overridable Function Update(entity As TEntity, behavior As GraphBehavior = 0) As EntityEntry(Of TEntity)",
              "parameters": [
                {
                  "id": "entity",
                  "type": {
                    "uid": "{TEntity}",
                    "isExternal": false,
                    "name": "TEntity",
                    "fullName": "TEntity",
                    "specName": "<xref href=\"{TEntity}\" name=\"TEntity\"/>",
                    "id": "TEntity",
                    "level": 0
                  },
                  "description": "<p>The entity to update.</p>\n"
                },
                {
                  "id": "behavior",
                  "type": {
                    "uid": "Microsoft.Data.Entity.GraphBehavior",
                    "parent": "Microsoft.Data.Entity",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.GraphBehavior.yml",
                    "name": "GraphBehavior",
                    "fullName": "Microsoft.Data.Entity.GraphBehavior",
                    "type": "enum",
                    "summary": "<p>Indicates how the navigation properties of an entity are traversed so that a given operation can be recursively\nperformed on the entities that it is related to.</p>\n",
                    "specName": "<xref href=\"Microsoft.Data.Entity.GraphBehavior\" name=\"Microsoft.Data.Entity.GraphBehavior\"/>",
                    "id": "GraphBehavior",
                    "level": 0
                  },
                  "description": "<p>Determines whether the context will bring in only the given entity or also other related entities.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry{{TEntity}}",
                  "parent": "Microsoft.Data.Entity.ChangeTracking",
                  "definition": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                  "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml",
                  "name": "EntityEntry<TEntity>",
                  "name.vb": "EntityEntry(Of TEntity)",
                  "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry<TEntity>",
                  "fullName.vb": "Microsoft.Data.Entity.ChangeTracking.EntityEntry(Of TEntity)",
                  "spec.csharp": [
                    {
                      "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                      "name": "EntityEntry",
                      "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml"
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1",
                      "name": "EntityEntry",
                      "fullName": "Microsoft.Data.Entity.ChangeTracking.EntityEntry",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.ChangeTracking.EntityEntry`1.yml"
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry`1\" name=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"/>&lt;TEntity&gt;",
                  "id": "EntityEntry_TEntity_",
                  "level": 0
                },
                "description": "<p>The <xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.Update(`0,Microsoft.Data.Entity.GraphBehavior)\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.Update(TEntity, Microsoft.Data.Entity.GraphBehavior)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L124"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.UpdateRange(`0[])",
            "id": "UpdateRange_TEntity___",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "UpdateRange(TEntity[])",
            "name.vb": "UpdateRange(TEntity())",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.UpdateRange(TEntity[])",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).UpdateRange(TEntity())",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 177,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<para>\nBegins tracking the given entities in the <xref href=\"Microsoft.Data.Entity.EntityState.Modified\"></xref> state such that they will\nbe updated in the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.\n</para>\n<para>\nAll properties of the entities will be marked as modified. To mark only some properties as modified, use\n<xref href=\"Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)\"></xref> to begin tracking each entity in the <xref href=\"Microsoft.Data.Entity.EntityState.Unchanged\"></xref>\nstate and then use the returned <xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"></xref> to mark the desired properties as modified.\n</para>",
            "syntax": {
              "content": "public virtual void UpdateRange(params TEntity[] entities)",
              "content.vb": "Public Overridable Sub UpdateRange(ParamArray entities As TEntity())",
              "parameters": [
                {
                  "id": "entities",
                  "type": {
                    "uid": "{TEntity}[]",
                    "isExternal": false,
                    "name": "TEntity[]",
                    "name.vb": "TEntity()",
                    "fullName": "TEntity[]",
                    "fullName.vb": "TEntity()",
                    "spec.csharp": [
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": "[]",
                        "fullName": "[]",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": "()",
                        "fullName": "()",
                        "isExternal": false
                      }
                    ],
                    "specName": "TEntity[]",
                    "id": "TEntity__",
                    "level": 0
                  },
                  "description": "<p>The entities to update.</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.UpdateRange(`0[])\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.UpdateRange(TEntity[])\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L178"
          },
          {
            "uid": "Microsoft.Data.Entity.DbSet`1.UpdateRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)",
            "id": "UpdateRange_IEnumerable_TEntity___GraphBehavior_",
            "parent": "Microsoft.Data.Entity.DbSet`1",
            "href": "Microsoft.Data.Entity.DbSet`1.yml",
            "name": "UpdateRange(IEnumerable<TEntity>, GraphBehavior)",
            "name.vb": "UpdateRange(IEnumerable(Of TEntity), GraphBehavior)",
            "fullName": "Microsoft.Data.Entity.DbSet<TEntity>.UpdateRange(System.Collections.Generic.IEnumerable<TEntity>, Microsoft.Data.Entity.GraphBehavior)",
            "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity).UpdateRange(System.Collections.Generic.IEnumerable(Of TEntity), Microsoft.Data.Entity.GraphBehavior)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/DbSet`.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/DbSet`.cs",
              "startLine": 242,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<para>\nBegins tracking the given entities in the <xref href=\"Microsoft.Data.Entity.EntityState.Modified\"></xref> state such that they will\nbe updated in the database when <xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> is called.\n</para>\n<para>\nAll properties of the entities will be marked as modified. To mark only some properties as modified, use\n<xref href=\"Microsoft.Data.Entity.DbSet`1.Attach(`0,Microsoft.Data.Entity.GraphBehavior)\"></xref> to begin tracking each entity in the <xref href=\"Microsoft.Data.Entity.EntityState.Unchanged\"></xref>\nstate and then use the returned <xref href=\"Microsoft.Data.Entity.ChangeTracking.EntityEntry\"></xref> to mark the desired properties as modified.\n</para>",
            "syntax": {
              "content": "public virtual void UpdateRange(IEnumerable<TEntity> entities, GraphBehavior behavior = 0)",
              "content.vb": "Public Overridable Sub UpdateRange(entities As IEnumerable(Of TEntity), behavior As GraphBehavior = 0)",
              "parameters": [
                {
                  "id": "entities",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{{TEntity}}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<TEntity>",
                    "name.vb": "IEnumerable(Of TEntity)",
                    "fullName": "System.Collections.Generic.IEnumerable<TEntity>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of TEntity)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;TEntity&gt;",
                    "id": "IEnumerable_TEntity_",
                    "level": 0
                  },
                  "description": "<p>The entities to update.</p>\n"
                },
                {
                  "id": "behavior",
                  "type": {
                    "uid": "Microsoft.Data.Entity.GraphBehavior",
                    "parent": "Microsoft.Data.Entity",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.GraphBehavior.yml",
                    "name": "GraphBehavior",
                    "fullName": "Microsoft.Data.Entity.GraphBehavior",
                    "type": "enum",
                    "summary": "<p>Indicates how the navigation properties of an entity are traversed so that a given operation can be recursively\nperformed on the entities that it is related to.</p>\n",
                    "specName": "<xref href=\"Microsoft.Data.Entity.GraphBehavior\" name=\"Microsoft.Data.Entity.GraphBehavior\"/>",
                    "id": "GraphBehavior",
                    "level": 0
                  },
                  "description": "<p>Determines whether the context will bring in only the given entities or also other related entities.</p>\n"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1.UpdateRange(System.Collections.Generic.IEnumerable{`0},Microsoft.Data.Entity.GraphBehavior)\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;.UpdateRange(System.Collections.Generic.IEnumerable&lt;TEntity&gt;, Microsoft.Data.Entity.GraphBehavior)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L243"
          }
        ]
      }
    ],
    "href": "Microsoft.Data.Entity.DbSet`1.yml",
    "name": "DbSet<TEntity>",
    "name.vb": "DbSet(Of TEntity)",
    "fullName": "Microsoft.Data.Entity.DbSet<TEntity>",
    "fullName.vb": "Microsoft.Data.Entity.DbSet(Of TEntity)",
    "type": "Class",
    "source": {
      "remote": {
        "path": "src/EntityFramework.Core/DbSet`.cs",
        "branch": "dev",
        "repo": "https://github.com/chenkennt/EntityFramework.git"
      },
      "path": "src/EntityFramework.Core/DbSet`.cs",
      "startLine": 320,
      "endLine": 0,
      "isExternal": false
    },
    "assemblies": [
      "EntityFramework.Core"
    ],
    "namespace": "Microsoft.Data.Entity",
    "summary": "<para>\nA <xref href=\"Microsoft.Data.Entity.DbSet`1\"></xref> can be used to query and save instances of <typeparamref name=\"TEntity\"></typeparamref>.\nLINQ queries against a <xref href=\"Microsoft.Data.Entity.DbSet`1\"></xref> will be translated into queries against the database.\n</para>\n<para>\nThe results of a LINQ query against a <xref href=\"Microsoft.Data.Entity.DbSet`1\"></xref> will contain the results\nreturned from the database and may not reflect changes made in the context that have not\nbeen persisted to the database. For example, the results will not contain newly added entities\nand may still contain entities that are marked for deletion.\n</para>\n<para>\nDepending on the database being used, some parts of a LINQ query against a <xref href=\"Microsoft.Data.Entity.DbSet`1\"></xref>\nmay be evaluated in memory rather than being translated into a database query.\n</para>\n<para><xref href=\"Microsoft.Data.Entity.DbSet`1\"></xref> objects are usually obtained from a <xref href=\"Microsoft.Data.Entity.DbSet`1\"></xref>\nproperty on a derived <xref href=\"Microsoft.Data.Entity.DbContext\"></xref> or from the <xref href=\"Microsoft.Data.Entity.DbContext.Set``1\"></xref>\nmethod.\n</para>",
    "syntax": {
      "content": "public abstract class DbSet<TEntity> : IOrderedQueryable<TEntity>, IQueryable<TEntity>, IEnumerable<TEntity>, IOrderedQueryable, IQueryable, IEnumerable, IAsyncEnumerableAccessor<TEntity>, IInfrastructure<IServiceProvider>, IListSource where TEntity : class",
      "content.vb": "Public MustInherit Class DbSet(Of TEntity As Class) Implements IOrderedQueryable(Of TEntity), IQueryable(Of TEntity), IEnumerable(Of TEntity), IOrderedQueryable, IQueryable, IEnumerable, IAsyncEnumerableAccessor(Of TEntity), IInfrastructure(Of IServiceProvider), IListSource",
      "typeParameters": [
        {
          "id": "TEntity",
          "description": "The type of entity being operated on by this set."
        }
      ]
    },
    "inheritance": [
      {
        "uid": "System.Object",
        "parent": "System",
        "isExternal": true,
        "name": "Object",
        "fullName": "System.Object",
        "specName": "<xref href=\"System.Object\" name=\"System.Object\"/>",
        "id": "Object",
        "level": 0,
        "index": 0
      }
    ],
    "implements": [
      "System.Linq.IOrderedQueryable{{TEntity}}",
      "System.Linq.IQueryable{{TEntity}}",
      "System.Collections.Generic.IEnumerable{{TEntity}}",
      "System.Linq.IOrderedQueryable",
      "System.Linq.IQueryable",
      "System.Collections.IEnumerable",
      "Microsoft.Data.Entity.Query.Internal.IAsyncEnumerableAccessor{{TEntity}}",
      "Microsoft.Data.Entity.Infrastructure.IInfrastructure{System.IServiceProvider}",
      "System.ComponentModel.IListSource"
    ],
    "inheritedMembers": [
      "System.Object.ToString",
      "System.Object.Equals(System.Object)",
      "System.Object.Equals(System.Object,System.Object)",
      "System.Object.ReferenceEquals(System.Object,System.Object)",
      "System.Object.GetHashCode",
      "System.Object.GetType",
      "System.Object.MemberwiseClone"
    ],
    "specName": "<xref href=\"Microsoft.Data.Entity.DbSet`1\" name=\"Microsoft.Data.Entity.DbSet&lt;TEntity&gt;\"/>",
    "level": 1,
    "docurl": "",
    "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/DbSet`.cs/#L321"
  },
  "isClass": true,
  "_allowToc": true
}
