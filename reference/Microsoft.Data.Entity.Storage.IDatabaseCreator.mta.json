
{
  "_lang": "csharp",
  "_tocPath": "reference/toc.html",
  "_navPath": "toc.html",
  "_rel": "../",
  "_navRel": "../toc.html",
  "_tocRel": "toc.html",
  "_appTitle": "Entity Framework",
  "item": {
    "uid": "Microsoft.Data.Entity.Storage.IDatabaseCreator",
    "id": "IDatabaseCreator",
    "parent": "Microsoft.Data.Entity.Storage",
    "children": [
      {
        "title": "Methods",
        "id": "methods",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreated",
            "id": "EnsureCreated__",
            "parent": "Microsoft.Data.Entity.Storage.IDatabaseCreator",
            "href": "Microsoft.Data.Entity.Storage.IDatabaseCreator.yml",
            "name": "EnsureCreated()",
            "fullName": "Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreated()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
              "startLine": 55,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Storage",
            "summary": "<p>Ensures that the database for the context exists. If it exists, no action is taken. If it does not\nexist then the database and all its schema are created. If the database exists, then no effort is made\nto ensure it is compatible with the model for this context.</p>\n",
            "syntax": {
              "content": "bool EnsureCreated()",
              "content.vb": "Function EnsureCreated As Boolean",
              "return": {
                "type": {
                  "uid": "System.Boolean",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Boolean",
                  "fullName": "System.Boolean",
                  "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                  "id": "Boolean",
                  "level": 0
                },
                "description": "<p>True if the database is created, false if it already existed.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreated\" name=\"Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreated()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Storage/IDatabaseCreator.cs/#L56"
          },
          {
            "uid": "Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)",
            "id": "EnsureCreatedAsync_CancellationToken_",
            "parent": "Microsoft.Data.Entity.Storage.IDatabaseCreator",
            "href": "Microsoft.Data.Entity.Storage.IDatabaseCreator.yml",
            "name": "EnsureCreatedAsync(CancellationToken)",
            "fullName": "Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
              "startLine": 67,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Storage",
            "summary": "<p>Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not\nexist then the database and all its schema are created. If the database exists, then no effort is made\nto ensure it is compatible with the model for this context.</p>\n",
            "syntax": {
              "content": "Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = null)",
              "content.vb": "Function EnsureCreatedAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)",
              "parameters": [
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Boolean}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Boolean>",
                  "name.vb": "Task(Of Boolean)",
                  "fullName": "System.Threading.Tasks.Task<System.Boolean>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Boolean)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;",
                  "id": "Task_Boolean_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous save operation. The task result contains true if the database is created,\nfalse if it already existed.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Storage/IDatabaseCreator.cs/#L68"
          },
          {
            "uid": "Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeleted",
            "id": "EnsureDeleted__",
            "parent": "Microsoft.Data.Entity.Storage.IDatabaseCreator",
            "href": "Microsoft.Data.Entity.Storage.IDatabaseCreator.yml",
            "name": "EnsureDeleted()",
            "fullName": "Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeleted()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
              "startLine": 30,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Storage",
            "summary": "<para>\nEnsures that the database for the context does not exist. If it does not exist, no action is taken. If it does\nexist then the database is deleted.\n</para>\n<para>\nWarning: The entire database is deleted an no effort is made to remove just the database objects that are used by\nthe model for this context.\n</para>",
            "syntax": {
              "content": "bool EnsureDeleted()",
              "content.vb": "Function EnsureDeleted As Boolean",
              "return": {
                "type": {
                  "uid": "System.Boolean",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Boolean",
                  "fullName": "System.Boolean",
                  "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                  "id": "Boolean",
                  "level": 0
                },
                "description": "<p>True if the database is deleted, false if it did not exist.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeleted\" name=\"Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeleted()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Storage/IDatabaseCreator.cs/#L31"
          },
          {
            "uid": "Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)",
            "id": "EnsureDeletedAsync_CancellationToken_",
            "parent": "Microsoft.Data.Entity.Storage.IDatabaseCreator",
            "href": "Microsoft.Data.Entity.Storage.IDatabaseCreator.yml",
            "name": "EnsureDeletedAsync(CancellationToken)",
            "fullName": "Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
              "startLine": 47,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Storage",
            "summary": "<para>\nAsynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does\nexist then the database is deleted.\n</para>\n<para>\nWarning: The entire database is deleted an no effort is made to remove just the database objects that are used by\nthe model for this context.\n</para>",
            "syntax": {
              "content": "Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = null)",
              "content.vb": "Function EnsureDeletedAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)",
              "parameters": [
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Boolean}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Boolean>",
                  "name.vb": "Task(Of Boolean)",
                  "fullName": "System.Threading.Tasks.Task<System.Boolean>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Boolean)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;",
                  "id": "Task_Boolean_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous save operation. The task result contains true if the database is deleted,\nfalse if it did not exist.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Storage/IDatabaseCreator.cs/#L48"
          }
        ]
      }
    ],
    "href": "Microsoft.Data.Entity.Storage.IDatabaseCreator.yml",
    "name": "IDatabaseCreator",
    "fullName": "Microsoft.Data.Entity.Storage.IDatabaseCreator",
    "type": "Interface",
    "source": {
      "remote": {
        "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
        "branch": "dev",
        "repo": "https://github.com/chenkennt/EntityFramework.git"
      },
      "path": "src/EntityFramework.Core/Storage/IDatabaseCreator.cs",
      "startLine": 17,
      "endLine": 0,
      "isExternal": false
    },
    "assemblies": [
      "EntityFramework.Core"
    ],
    "namespace": "Microsoft.Data.Entity.Storage",
    "summary": "<para>\nCreates and deletes databases for a given database provider.\n</para>\n<para>\nThis interface is typically used by database providers (and other extensions). It is generally\nnot used in application code.\n</para>",
    "syntax": {
      "content": "public interface IDatabaseCreator",
      "content.vb": "Public Interface IDatabaseCreator"
    },
    "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IDatabaseCreator\" name=\"Microsoft.Data.Entity.Storage.IDatabaseCreator\"/>",
    "level": 0,
    "docurl": "",
    "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Storage/IDatabaseCreator.cs/#L18"
  },
  "isClass": true,
  "_allowToc": true
}
