
{
  "_lang": "csharp",
  "_tocPath": "reference/toc.html",
  "_navPath": "toc.html",
  "_rel": "../",
  "_navRel": "../toc.html",
  "_tocRel": "toc.html",
  "_appTitle": "Entity Framework",
  "item": {
    "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
    "id": "SelectExpression",
    "parent": "Microsoft.Data.Entity.Query.Expressions",
    "children": [
      {
        "title": "Constructors",
        "id": "constructors",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.#ctor(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory)",
            "id": "SelectExpression_IQuerySqlGeneratorFactory_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "SelectExpression(IQuerySqlGeneratorFactory)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SelectExpression(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory)",
            "type": "constructor",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 37,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public SelectExpression(IQuerySqlGeneratorFactory querySqlGeneratorFactory)",
              "content.vb": "Public Sub New(querySqlGeneratorFactory As IQuerySqlGeneratorFactory)",
              "parameters": [
                {
                  "id": "querySqlGeneratorFactory",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory",
                    "parent": "Microsoft.Data.Entity.Query.Sql",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory.yml",
                    "name": "IQuerySqlGeneratorFactory",
                    "fullName": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory",
                    "type": "interface",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory\" name=\"Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory\"/>",
                    "id": "IQuerySqlGeneratorFactory",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.#ctor(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.SelectExpression(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L38"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.#ctor(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory,System.String)",
            "id": "SelectExpression_IQuerySqlGeneratorFactory__String_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "SelectExpression(IQuerySqlGeneratorFactory, String)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SelectExpression(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory, System.String)",
            "type": "constructor",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 45,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public SelectExpression(IQuerySqlGeneratorFactory querySqlGeneratorFactory, string alias)",
              "content.vb": "Public Sub New(querySqlGeneratorFactory As IQuerySqlGeneratorFactory, alias As String)",
              "parameters": [
                {
                  "id": "querySqlGeneratorFactory",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory",
                    "parent": "Microsoft.Data.Entity.Query.Sql",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory.yml",
                    "name": "IQuerySqlGeneratorFactory",
                    "fullName": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory",
                    "type": "interface",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory\" name=\"Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory\"/>",
                    "id": "IQuerySqlGeneratorFactory",
                    "level": 0
                  }
                },
                {
                  "id": "alias",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.#ctor(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory,System.String)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.SelectExpression(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory, System.String)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L46"
          }
        ]
      },
      {
        "title": "Properties",
        "id": "properties",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsDistinct",
            "id": "IsDistinct",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "IsDistinct",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsDistinct",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 150,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public virtual bool IsDistinct { get; set; }",
                "content.vb": "Public Overridable Property IsDistinct As Boolean",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Boolean",
                    "parent": "System",
                    "isExternal": true,
                    "name": "Boolean",
                    "fullName": "System.Boolean",
                    "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                    "id": "Boolean",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsDistinct\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsDistinct\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L151"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsProjectStar",
            "id": "IsProjectStar",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "IsProjectStar",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsProjectStar",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 84,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public virtual bool IsProjectStar { get; set; }",
                "content.vb": "Public Overridable Property IsProjectStar As Boolean",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Boolean",
                    "parent": "System",
                    "isExternal": true,
                    "name": "Boolean",
                    "fullName": "System.Boolean",
                    "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                    "id": "Boolean",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsProjectStar\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsProjectStar\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L85"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Limit",
            "id": "Limit",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "Limit",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Limit",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 164,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public virtual int ? Limit { get; set; }",
                "content.vb": "Public Overridable Property Limit As Integer?",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Nullable{System.Int32}",
                    "parent": "System",
                    "definition": "System.Nullable`1",
                    "name": "Nullable<Int32>",
                    "name.vb": "Nullable(Of Int32)",
                    "fullName": "System.Nullable<System.Int32>",
                    "fullName.vb": "System.Nullable(Of System.Int32)",
                    "spec.csharp": [
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;",
                    "id": "Nullable_Int32_",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Limit\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Limit\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L165"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Offset",
            "id": "Offset",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "Offset",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Offset",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 177,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public virtual int ? Offset { get; set; }",
                "content.vb": "Public Overridable Property Offset As Integer?",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Nullable{System.Int32}",
                    "parent": "System",
                    "definition": "System.Nullable`1",
                    "name": "Nullable<Int32>",
                    "name.vb": "Nullable(Of Int32)",
                    "fullName": "System.Nullable<System.Int32>",
                    "fullName.vb": "System.Nullable(Of System.Int32)",
                    "spec.csharp": [
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;",
                    "id": "Nullable_Int32_",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Offset\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Offset\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L178"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.OrderBy",
            "id": "OrderBy",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "OrderBy",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.OrderBy",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 569,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public virtual IReadOnlyList<Ordering> OrderBy { get; }",
                "content.vb": "Public Overridable ReadOnly Property OrderBy As IReadOnlyList(Of Ordering)",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyList`1",
                    "name": "IReadOnlyList<Ordering>",
                    "name.vb": "IReadOnlyList(Of Ordering)",
                    "fullName": "System.Collections.Generic.IReadOnlyList<Remotion.Linq.Clauses.Ordering>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyList(Of Remotion.Linq.Clauses.Ordering)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyList`1\" name=\"System.Collections.Generic.IReadOnlyList\"/>&lt;<xref href=\"Remotion.Linq.Clauses.Ordering\" name=\"Remotion.Linq.Clauses.Ordering\"/>&gt;",
                    "id": "IReadOnlyList_Ordering_",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.OrderBy\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.OrderBy\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L570"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Predicate",
            "id": "Predicate",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "Predicate",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Predicate",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 35,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public virtual Expression Predicate { get; set; }",
                "content.vb": "Public Overridable Property Predicate As Expression",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Linq.Expressions.Expression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "Expression",
                    "fullName": "System.Linq.Expressions.Expression",
                    "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                    "id": "Expression",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Predicate\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Predicate\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L36"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Projection",
            "id": "Projection",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "Projection",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Projection",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 280,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public virtual IReadOnlyList<Expression> Projection { get; }",
                "content.vb": "Public Overridable ReadOnly Property Projection As IReadOnlyList(Of Expression)",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyList`1",
                    "name": "IReadOnlyList<Expression>",
                    "name.vb": "IReadOnlyList(Of Expression)",
                    "fullName": "System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyList`1\" name=\"System.Collections.Generic.IReadOnlyList\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                    "id": "IReadOnlyList_Expression_",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Projection\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Projection\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L281"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Tables",
            "id": "Tables",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "Tables",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Tables",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 82,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public virtual IReadOnlyList<TableExpressionBase> Tables { get; }",
                "content.vb": "Public Overridable ReadOnly Property Tables As IReadOnlyList(Of TableExpressionBase)",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyList{Microsoft.Data.Entity.Query.Expressions.TableExpressionBase}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyList`1",
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "IReadOnlyList<TableExpressionBase>",
                    "name.vb": "IReadOnlyList(Of TableExpressionBase)",
                    "fullName": "System.Collections.Generic.IReadOnlyList<Microsoft.Data.Entity.Query.Expressions.TableExpressionBase>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyList(Of Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                        "name": "TableExpressionBase",
                        "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                        "isExternal": false,
                        "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml"
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                        "name": "TableExpressionBase",
                        "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                        "isExternal": false,
                        "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml"
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyList`1\" name=\"System.Collections.Generic.IReadOnlyList\"/>&lt;<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>&gt;",
                    "id": "IReadOnlyList_TableExpressionBase_",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Tables\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Tables\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L83"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Type",
            "id": "Type",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "Type",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Type",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 55,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
                "content": "public override Type Type { get; }",
                "content.vb": "Public Overrides ReadOnly Property Type As Type",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Type",
                    "parent": "System",
                    "isExternal": true,
                    "name": "Type",
                    "fullName": "System.Type",
                    "specName": "<xref href=\"System.Type\" name=\"System.Type\"/>",
                    "id": "Type",
                    "level": 0
                  }
                }
            },
            "overridden": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.Type",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Type\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Type\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L56"
          }
        ]
      },
      {
        "title": "Methods",
        "id": "methods",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Accept(System.Linq.Expressions.ExpressionVisitor)",
            "id": "Accept_ExpressionVisitor_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "Accept(ExpressionVisitor)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Accept(System.Linq.Expressions.ExpressionVisitor)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 712,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "protected override Expression Accept(ExpressionVisitor visitor)",
              "content.vb": "Protected Overrides Function Accept(visitor As ExpressionVisitor) As Expression",
              "parameters": [
                {
                  "id": "visitor",
                  "type": {
                    "uid": "System.Linq.Expressions.ExpressionVisitor",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ExpressionVisitor",
                    "fullName": "System.Linq.Expressions.ExpressionVisitor",
                    "specName": "<xref href=\"System.Linq.Expressions.ExpressionVisitor\" name=\"System.Linq.Expressions.ExpressionVisitor\"/>",
                    "id": "ExpressionVisitor",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "overridden": "System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L713"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddAliasToProjection(System.String,System.Linq.Expressions.Expression)",
            "id": "AddAliasToProjection_String__Expression_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddAliasToProjection(String, Expression)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddAliasToProjection(System.String, System.Linq.Expressions.Expression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 343,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual int AddAliasToProjection(string alias, Expression expression)",
              "content.vb": "Public Overridable Function AddAliasToProjection(alias As String, expression As Expression) As Integer",
              "parameters": [
                {
                  "id": "alias",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                },
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "Expression",
                    "fullName": "System.Linq.Expressions.Expression",
                    "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                    "id": "Expression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Int32",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Int32",
                  "fullName": "System.Int32",
                  "specName": "<xref href=\"System.Int32\" name=\"System.Int32\"/>",
                  "id": "Int32",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddAliasToProjection(System.String,System.Linq.Expressions.Expression)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddAliasToProjection(System.String, System.Linq.Expressions.Expression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L344"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddCrossJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
            "id": "AddCrossJoin_TableExpressionBase__IEnumerable_Expression__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddCrossJoin(TableExpressionBase, IEnumerable<Expression>)",
            "name.vb": "AddCrossJoin(TableExpressionBase, IEnumerable(Of Expression))",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddCrossJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddCrossJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 594,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void AddCrossJoin(TableExpressionBase tableExpression, IEnumerable<Expression> projection)",
              "content.vb": "Public Overridable Sub AddCrossJoin(tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression))",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                },
                {
                  "id": "projection",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<Expression>",
                    "name.vb": "IEnumerable(Of Expression)",
                    "fullName": "System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                    "id": "IEnumerable_Expression_",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddCrossJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddCrossJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L595"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "id": "AddInnerJoin_TableExpressionBase_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddInnerJoin(TableExpressionBase)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 620,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual JoinExpressionBase AddInnerJoin(TableExpressionBase tableExpression)",
              "content.vb": "Public Overridable Function AddInnerJoin(tableExpression As TableExpressionBase) As JoinExpressionBase",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase.yml",
                  "name": "JoinExpressionBase",
                  "fullName": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase",
                  "type": "class",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase\"/>",
                  "id": "JoinExpressionBase",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L621"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
            "id": "AddInnerJoin_TableExpressionBase__IEnumerable_Expression__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddInnerJoin(TableExpressionBase, IEnumerable<Expression>)",
            "name.vb": "AddInnerJoin(TableExpressionBase, IEnumerable(Of Expression))",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 627,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual JoinExpressionBase AddInnerJoin(TableExpressionBase tableExpression, IEnumerable<Expression> projection)",
              "content.vb": "Public Overridable Function AddInnerJoin(tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression)) As JoinExpressionBase",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                },
                {
                  "id": "projection",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<Expression>",
                    "name.vb": "IEnumerable(Of Expression)",
                    "fullName": "System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                    "id": "IEnumerable_Expression_",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase.yml",
                  "name": "JoinExpressionBase",
                  "fullName": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase",
                  "type": "class",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase\"/>",
                  "id": "JoinExpressionBase",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L628"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddLateralJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
            "id": "AddLateralJoin_TableExpressionBase__IEnumerable_Expression__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddLateralJoin(TableExpressionBase, IEnumerable<Expression>)",
            "name.vb": "AddLateralJoin(TableExpressionBase, IEnumerable(Of Expression))",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddLateralJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddLateralJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 607,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void AddLateralJoin(TableExpressionBase tableExpression, IEnumerable<Expression> projection)",
              "content.vb": "Public Overridable Sub AddLateralJoin(tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression))",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                },
                {
                  "id": "projection",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<Expression>",
                    "name.vb": "IEnumerable(Of Expression)",
                    "fullName": "System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                    "id": "IEnumerable_Expression_",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddLateralJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddLateralJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L608"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "id": "AddOuterJoin_TableExpressionBase_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddOuterJoin(TableExpressionBase)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 644,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual JoinExpressionBase AddOuterJoin(TableExpressionBase tableExpression)",
              "content.vb": "Public Overridable Function AddOuterJoin(tableExpression As TableExpressionBase) As JoinExpressionBase",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase.yml",
                  "name": "JoinExpressionBase",
                  "fullName": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase",
                  "type": "class",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase\"/>",
                  "id": "JoinExpressionBase",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L645"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
            "id": "AddOuterJoin_TableExpressionBase__IEnumerable_Expression__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddOuterJoin(TableExpressionBase, IEnumerable<Expression>)",
            "name.vb": "AddOuterJoin(TableExpressionBase, IEnumerable(Of Expression))",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 651,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual JoinExpressionBase AddOuterJoin(TableExpressionBase tableExpression, IEnumerable<Expression> projection)",
              "content.vb": "Public Overridable Function AddOuterJoin(tableExpression As TableExpressionBase, projection As IEnumerable(Of Expression)) As JoinExpressionBase",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                },
                {
                  "id": "projection",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<Expression>",
                    "name.vb": "IEnumerable(Of Expression)",
                    "fullName": "System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                    "id": "IEnumerable_Expression_",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase.yml",
                  "name": "JoinExpressionBase",
                  "fullName": "Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase",
                  "type": "class",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.JoinExpressionBase\"/>",
                  "id": "JoinExpressionBase",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L652"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "id": "AddTable_TableExpressionBase_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddTable(TableExpressionBase)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 86,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void AddTable(TableExpressionBase tableExpression)",
              "content.vb": "Public Overridable Sub AddTable(tableExpression As TableExpressionBase)",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L87"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTables(System.Collections.Generic.IEnumerable{Microsoft.Data.Entity.Query.Expressions.TableExpressionBase})",
            "id": "AddTables_IEnumerable_TableExpressionBase__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddTables(IEnumerable<TableExpressionBase>)",
            "name.vb": "AddTables(IEnumerable(Of TableExpressionBase))",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTables(System.Collections.Generic.IEnumerable<Microsoft.Data.Entity.Query.Expressions.TableExpressionBase>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTables(System.Collections.Generic.IEnumerable(Of Microsoft.Data.Entity.Query.Expressions.TableExpressionBase))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 89,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void AddTables(IEnumerable<TableExpressionBase> tableExpressions)",
              "content.vb": "Public Overridable Sub AddTables(tableExpressions As IEnumerable(Of TableExpressionBase))",
              "parameters": [
                {
                  "id": "tableExpressions",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{Microsoft.Data.Entity.Query.Expressions.TableExpressionBase}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "IEnumerable<TableExpressionBase>",
                    "name.vb": "IEnumerable(Of TableExpressionBase)",
                    "fullName": "System.Collections.Generic.IEnumerable<Microsoft.Data.Entity.Query.Expressions.TableExpressionBase>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                        "name": "TableExpressionBase",
                        "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                        "isExternal": false,
                        "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml"
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                        "name": "TableExpressionBase",
                        "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                        "isExternal": false,
                        "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml"
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>&gt;",
                    "id": "IEnumerable_TableExpressionBase_",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTables(System.Collections.Generic.IEnumerable{Microsoft.Data.Entity.Query.Expressions.TableExpressionBase})\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTables(System.Collections.Generic.IEnumerable&lt;Microsoft.Data.Entity.Query.Expressions.TableExpressionBase&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L90"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(Remotion.Linq.Clauses.Ordering)",
            "id": "AddToOrderBy_Ordering_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddToOrderBy(Ordering)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(Remotion.Linq.Clauses.Ordering)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 552,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void AddToOrderBy(Ordering ordering)",
              "content.vb": "Public Overridable Sub AddToOrderBy(ordering As Ordering)",
              "parameters": [
                {
                  "id": "ordering",
                  "type": {
                    "uid": "Remotion.Linq.Clauses.Ordering",
                    "parent": "Remotion.Linq.Clauses",
                    "isExternal": true,
                    "name": "Ordering",
                    "fullName": "Remotion.Linq.Clauses.Ordering",
                    "specName": "<xref href=\"Remotion.Linq.Clauses.Ordering\" name=\"Remotion.Linq.Clauses.Ordering\"/>",
                    "id": "Ordering",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(Remotion.Linq.Clauses.Ordering)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(Remotion.Linq.Clauses.Ordering)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L553"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
            "id": "AddToOrderBy_IEnumerable_Ordering__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddToOrderBy(IEnumerable<Ordering>)",
            "name.vb": "AddToOrderBy(IEnumerable(Of Ordering))",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.Collections.Generic.IEnumerable<Remotion.Linq.Clauses.Ordering>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.Collections.Generic.IEnumerable(Of Remotion.Linq.Clauses.Ordering))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 527,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void AddToOrderBy(IEnumerable<Ordering> orderings)",
              "content.vb": "Public Overridable Sub AddToOrderBy(orderings As IEnumerable(Of Ordering))",
              "parameters": [
                {
                  "id": "orderings",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<Ordering>",
                    "name.vb": "IEnumerable(Of Ordering)",
                    "fullName": "System.Collections.Generic.IEnumerable<Remotion.Linq.Clauses.Ordering>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of Remotion.Linq.Clauses.Ordering)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"Remotion.Linq.Clauses.Ordering\" name=\"Remotion.Linq.Clauses.Ordering\"/>&gt;",
                    "id": "IEnumerable_Ordering_",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L528"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.String,Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,Remotion.Linq.Clauses.OrderingDirection)",
            "id": "AddToOrderBy_String__IProperty__TableExpressionBase__OrderingDirection_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddToOrderBy(String, IProperty, TableExpressionBase, OrderingDirection)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.String, Microsoft.Data.Entity.Metadata.IProperty, Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, Remotion.Linq.Clauses.OrderingDirection)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 506,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual AliasExpression AddToOrderBy(string column, IProperty property, TableExpressionBase table, OrderingDirection orderingDirection)",
              "content.vb": "Public Overridable Function AddToOrderBy(column As String, property As IProperty, table As TableExpressionBase, orderingDirection As OrderingDirection) As AliasExpression",
              "parameters": [
                {
                  "id": "column",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                },
                {
                  "id": "property",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Metadata.IProperty",
                    "parent": "Microsoft.Data.Entity.Metadata",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Metadata.IProperty.yml",
                    "name": "IProperty",
                    "fullName": "Microsoft.Data.Entity.Metadata.IProperty",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Metadata.IProperty\" name=\"Microsoft.Data.Entity.Metadata.IProperty\"/>",
                    "id": "IProperty",
                    "level": 0
                  }
                },
                {
                  "id": "table",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                },
                {
                  "id": "orderingDirection",
                  "type": {
                    "uid": "Remotion.Linq.Clauses.OrderingDirection",
                    "parent": "Remotion.Linq.Clauses",
                    "isExternal": true,
                    "name": "OrderingDirection",
                    "fullName": "Remotion.Linq.Clauses.OrderingDirection",
                    "specName": "<xref href=\"Remotion.Linq.Clauses.OrderingDirection\" name=\"Remotion.Linq.Clauses.OrderingDirection\"/>",
                    "id": "OrderingDirection",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Expressions.AliasExpression",
                  "parent": "Microsoft.Data.Entity.Query.Expressions",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Query.Expressions.AliasExpression.yml",
                  "name": "AliasExpression",
                  "fullName": "Microsoft.Data.Entity.Query.Expressions.AliasExpression",
                  "type": "class",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.AliasExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.AliasExpression\"/>",
                  "id": "AliasExpression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.String,Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,Remotion.Linq.Clauses.OrderingDirection)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.String, Microsoft.Data.Entity.Metadata.IProperty, Microsoft.Data.Entity.Query.Expressions.TableExpressionBase, Remotion.Linq.Clauses.OrderingDirection)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L507"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.AliasExpression)",
            "id": "AddToProjection_AliasExpression_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddToProjection(AliasExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.AliasExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 340,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual int AddToProjection(AliasExpression aliasExpression)",
              "content.vb": "Public Overridable Function AddToProjection(aliasExpression As AliasExpression) As Integer",
              "parameters": [
                {
                  "id": "aliasExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.AliasExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.AliasExpression.yml",
                    "name": "AliasExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.AliasExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.AliasExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.AliasExpression\"/>",
                    "id": "AliasExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Int32",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Int32",
                  "fullName": "System.Int32",
                  "specName": "<xref href=\"System.Int32\" name=\"System.Int32\"/>",
                  "id": "Int32",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.AliasExpression)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.AliasExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L341"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)",
            "id": "AddToProjection_ColumnExpression_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddToProjection(ColumnExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 398,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual int AddToProjection(ColumnExpression columnExpression)",
              "content.vb": "Public Overridable Function AddToProjection(columnExpression As ColumnExpression) As Integer",
              "parameters": [
                {
                  "id": "columnExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.ColumnExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.ColumnExpression.yml",
                    "name": "ColumnExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.ColumnExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.ColumnExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.ColumnExpression\"/>",
                    "id": "ColumnExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Int32",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Int32",
                  "fullName": "System.Int32",
                  "specName": "<xref href=\"System.Int32\" name=\"System.Int32\"/>",
                  "id": "Int32",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L399"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression)",
            "id": "AddToProjection_Expression_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddToProjection(Expression)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 305,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual int AddToProjection(Expression expression)",
              "content.vb": "Public Overridable Function AddToProjection(expression As Expression) As Integer",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "Expression",
                    "fullName": "System.Linq.Expressions.Expression",
                    "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                    "id": "Expression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Int32",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Int32",
                  "fullName": "System.Int32",
                  "specName": "<xref href=\"System.Int32\" name=\"System.Int32\"/>",
                  "id": "Int32",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L306"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression,System.Boolean)",
            "id": "AddToProjection_Expression__Boolean_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddToProjection(Expression, Boolean)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression, System.Boolean)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 308,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual int AddToProjection(Expression expression, bool resetProjectStar)",
              "content.vb": "Public Overridable Function AddToProjection(expression As Expression, resetProjectStar As Boolean) As Integer",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "Expression",
                    "fullName": "System.Linq.Expressions.Expression",
                    "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                    "id": "Expression",
                    "level": 0
                  }
                },
                {
                  "id": "resetProjectStar",
                  "type": {
                    "uid": "System.Boolean",
                    "parent": "System",
                    "isExternal": true,
                    "name": "Boolean",
                    "fullName": "System.Boolean",
                    "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                    "id": "Boolean",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Int32",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Int32",
                  "fullName": "System.Int32",
                  "specName": "<xref href=\"System.Int32\" name=\"System.Int32\"/>",
                  "id": "Int32",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression,System.Boolean)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression, System.Boolean)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L309"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.String,Microsoft.Data.Entity.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)",
            "id": "AddToProjection_String__IProperty__IQuerySource_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "AddToProjection(String, IProperty, IQuerySource)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.String, Microsoft.Data.Entity.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 282,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual int AddToProjection(string column, IProperty property, IQuerySource querySource)",
              "content.vb": "Public Overridable Function AddToProjection(column As String, property As IProperty, querySource As IQuerySource) As Integer",
              "parameters": [
                {
                  "id": "column",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                },
                {
                  "id": "property",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Metadata.IProperty",
                    "parent": "Microsoft.Data.Entity.Metadata",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Metadata.IProperty.yml",
                    "name": "IProperty",
                    "fullName": "Microsoft.Data.Entity.Metadata.IProperty",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Metadata.IProperty\" name=\"Microsoft.Data.Entity.Metadata.IProperty\"/>",
                    "id": "IProperty",
                    "level": 0
                  }
                },
                {
                  "id": "querySource",
                  "type": {
                    "uid": "Remotion.Linq.Clauses.IQuerySource",
                    "parent": "Remotion.Linq.Clauses",
                    "isExternal": true,
                    "name": "IQuerySource",
                    "fullName": "Remotion.Linq.Clauses.IQuerySource",
                    "specName": "<xref href=\"Remotion.Linq.Clauses.IQuerySource\" name=\"Remotion.Linq.Clauses.IQuerySource\"/>",
                    "id": "IQuerySource",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Int32",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Int32",
                  "fullName": "System.Int32",
                  "specName": "<xref href=\"System.Int32\" name=\"System.Int32\"/>",
                  "id": "Int32",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.String,Microsoft.Data.Entity.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.String, Microsoft.Data.Entity.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L283"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearOrderBy",
            "id": "ClearOrderBy__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "ClearOrderBy()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearOrderBy()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 571,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void ClearOrderBy()",
              "content.vb": "Public Overridable Sub ClearOrderBy"
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearOrderBy\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearOrderBy()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L572"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearProjection",
            "id": "ClearProjection__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "ClearProjection()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearProjection()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 468,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void ClearProjection()",
              "content.vb": "Public Overridable Sub ClearProjection"
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearProjection\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearProjection()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L469"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearTables",
            "id": "ClearTables__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "ClearTables()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearTables()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 92,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void ClearTables()",
              "content.vb": "Public Overridable Sub ClearTables"
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearTables\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearTables()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L93"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Clone(System.String)",
            "id": "Clone_String_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "Clone(String)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Clone(System.String)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 59,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual SelectExpression Clone(string alias)",
              "content.vb": "Public Overridable Function Clone(alias As String) As SelectExpression",
              "parameters": [
                {
                  "id": "alias",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                  "id": "SelectExpression",
                  "parent": "Microsoft.Data.Entity.Query.Expressions",
                  "children": [
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.#ctor(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.#ctor(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory,System.String)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Accept(System.Linq.Expressions.ExpressionVisitor)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddAliasToProjection(System.String,System.Linq.Expressions.Expression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddCrossJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddLateralJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTables(System.Collections.Generic.IEnumerable{Microsoft.Data.Entity.Query.Expressions.TableExpressionBase})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(Remotion.Linq.Clauses.Ordering)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.String,Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,Remotion.Linq.Clauses.OrderingDirection)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.AliasExpression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression,System.Boolean)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.String,Microsoft.Data.Entity.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearOrderBy",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearProjection",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearTables",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Clone(System.String)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateDefaultQuerySqlGenerator",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateFromSqlQuerySqlGenerator(System.String,System.String)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ExplodeStarProjection",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionIndex(Microsoft.Data.Entity.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionTypes",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetTableForQuerySource(Remotion.Linq.Clauses.IQuerySource)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.HandlesQuerySource(Remotion.Linq.Clauses.IQuerySource)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsCorrelated",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsDistinct",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsProjectStar",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Limit",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Offset",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.OrderBy",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Predicate",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PrependToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Projection",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PushDownSubquery",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveFromProjection(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveRangeFromProjection(System.Int32)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionConditionalExpression(System.Linq.Expressions.ConditionalExpression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionExpression(System.Linq.Expressions.Expression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Tables",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ToString",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Type",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.UpdateColumnExpression(System.Linq.Expressions.Expression,Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)"
                  ],
                  "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
                  "name": "SelectExpression",
                  "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                  "type": "class",
                  "source": {
                    "remote": {
                      "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                      "branch": "dev",
                      "repo": "https://github.com/chenkennt/EntityFramework.git"
                    },
                    "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                    "startLine": 16,
                    "endLine": 0,
                    "isExternal": false
                  },
                  "assemblies": [
                    "EntityFramework.Relational"
                  ],
                  "namespace": "Microsoft.Data.Entity.Query.Expressions",
                  "syntax": {
                    "content": "public class SelectExpression : TableExpressionBase",
                    "content.vb": "Public Class SelectExpression Inherits TableExpressionBase"
                  },
                  "inheritance": [
                    "System.Object",
                    "System.Linq.Expressions.Expression",
                    "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase"
                  ],
                  "inheritedMembers": [
                    "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.NodeType",
                    "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.QuerySource",
                    "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.Alias",
                    "System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Constant(System.Object)",
                    "System.Linq.Expressions.Expression.Constant(System.Object,System.Type)",
                    "System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)",
                    "System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)",
                    "System.Linq.Expressions.Expression.Empty",
                    "System.Linq.Expressions.Expression.Default(System.Type)",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Reduce",
                    "System.Linq.Expressions.Expression.ReduceAndCheck",
                    "System.Linq.Expressions.Expression.ReduceExtensions",
                    "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)",
                    "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)",
                    "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)",
                    "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)",
                    "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Label",
                    "System.Linq.Expressions.Expression.Label(System.String)",
                    "System.Linq.Expressions.Expression.Label(System.Type)",
                    "System.Linq.Expressions.Expression.Label(System.Type,System.String)",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.GetFuncType(System.Type[])",
                    "System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)",
                    "System.Linq.Expressions.Expression.GetActionType(System.Type[])",
                    "System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)",
                    "System.Linq.Expressions.Expression.GetDelegateType(System.Type[])",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
                    "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)",
                    "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)",
                    "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)",
                    "System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)",
                    "System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])",
                    "System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
                    "System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])",
                    "System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
                    "System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])",
                    "System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
                    "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])",
                    "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
                    "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])",
                    "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])",
                    "System.Linq.Expressions.Expression.New(System.Type)",
                    "System.Linq.Expressions.Expression.Parameter(System.Type)",
                    "System.Linq.Expressions.Expression.Variable(System.Type)",
                    "System.Linq.Expressions.Expression.Parameter(System.Type,System.String)",
                    "System.Linq.Expressions.Expression.Variable(System.Type,System.String)",
                    "System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])",
                    "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])",
                    "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])",
                    "System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])",
                    "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})",
                    "System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})",
                    "System.Linq.Expressions.Expression.SymbolDocument(System.String)",
                    "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)",
                    "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)",
                    "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)",
                    "System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])",
                    "System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])",
                    "System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})",
                    "System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Rethrow",
                    "System.Linq.Expressions.Expression.Rethrow(System.Type)",
                    "System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.CanReduce",
                    "System.Object.Equals(System.Object)",
                    "System.Object.Equals(System.Object,System.Object)",
                    "System.Object.ReferenceEquals(System.Object,System.Object)",
                    "System.Object.GetHashCode",
                    "System.Object.GetType",
                    "System.Object.MemberwiseClone"
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\"/>",
                  "level": 3
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Clone(System.String)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.Clone(System.String)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L60"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateDefaultQuerySqlGenerator",
            "id": "CreateDefaultQuerySqlGenerator__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "CreateDefaultQuerySqlGenerator()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateDefaultQuerySqlGenerator()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 745,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual IQuerySqlGenerator CreateDefaultQuerySqlGenerator()",
              "content.vb": "Public Overridable Function CreateDefaultQuerySqlGenerator As IQuerySqlGenerator",
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator",
                  "parent": "Microsoft.Data.Entity.Query.Sql",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator.yml",
                  "name": "IQuerySqlGenerator",
                  "fullName": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator",
                  "type": "interface",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator\" name=\"Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator\"/>",
                  "id": "IQuerySqlGenerator",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateDefaultQuerySqlGenerator\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateDefaultQuerySqlGenerator()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L746"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateFromSqlQuerySqlGenerator(System.String,System.String)",
            "id": "CreateFromSqlQuerySqlGenerator_String__String_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "CreateFromSqlQuerySqlGenerator(String, String)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateFromSqlQuerySqlGenerator(System.String, System.String)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 748,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual IQuerySqlGenerator CreateFromSqlQuerySqlGenerator(string sql, string argumentsParameterName)",
              "content.vb": "Public Overridable Function CreateFromSqlQuerySqlGenerator(sql As String, argumentsParameterName As String) As IQuerySqlGenerator",
              "parameters": [
                {
                  "id": "sql",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                },
                {
                  "id": "argumentsParameterName",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator",
                  "parent": "Microsoft.Data.Entity.Query.Sql",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator.yml",
                  "name": "IQuerySqlGenerator",
                  "fullName": "Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator",
                  "type": "interface",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator\" name=\"Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator\"/>",
                  "id": "IQuerySqlGenerator",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateFromSqlQuerySqlGenerator(System.String,System.String)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateFromSqlQuerySqlGenerator(System.String, System.String)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L749"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ExplodeStarProjection",
            "id": "ExplodeStarProjection__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "ExplodeStarProjection()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ExplodeStarProjection()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 573,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void ExplodeStarProjection()",
              "content.vb": "Public Overridable Sub ExplodeStarProjection"
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ExplodeStarProjection\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ExplodeStarProjection()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L574"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionIndex(Microsoft.Data.Entity.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)",
            "id": "GetProjectionIndex_IProperty__IQuerySource_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "GetProjectionIndex(IProperty, IQuerySource)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionIndex(Microsoft.Data.Entity.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 489,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual int GetProjectionIndex(IProperty property, IQuerySource querySource)",
              "content.vb": "Public Overridable Function GetProjectionIndex(property As IProperty, querySource As IQuerySource) As Integer",
              "parameters": [
                {
                  "id": "property",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Metadata.IProperty",
                    "parent": "Microsoft.Data.Entity.Metadata",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Metadata.IProperty.yml",
                    "name": "IProperty",
                    "fullName": "Microsoft.Data.Entity.Metadata.IProperty",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Metadata.IProperty\" name=\"Microsoft.Data.Entity.Metadata.IProperty\"/>",
                    "id": "IProperty",
                    "level": 0
                  }
                },
                {
                  "id": "querySource",
                  "type": {
                    "uid": "Remotion.Linq.Clauses.IQuerySource",
                    "parent": "Remotion.Linq.Clauses",
                    "isExternal": true,
                    "name": "IQuerySource",
                    "fullName": "Remotion.Linq.Clauses.IQuerySource",
                    "specName": "<xref href=\"Remotion.Linq.Clauses.IQuerySource\" name=\"Remotion.Linq.Clauses.IQuerySource\"/>",
                    "id": "IQuerySource",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Int32",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Int32",
                  "fullName": "System.Int32",
                  "specName": "<xref href=\"System.Int32\" name=\"System.Int32\"/>",
                  "id": "Int32",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionIndex(Microsoft.Data.Entity.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionIndex(Microsoft.Data.Entity.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L490"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionTypes",
            "id": "GetProjectionTypes__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "GetProjectionTypes()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionTypes()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 438,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual IEnumerable<Type> GetProjectionTypes()",
              "content.vb": "Public Overridable Function GetProjectionTypes As IEnumerable(Of Type)",
              "return": {
                "type": {
                  "uid": "System.Collections.Generic.IEnumerable{System.Type}",
                  "parent": "System.Collections.Generic",
                  "definition": "System.Collections.Generic.IEnumerable`1",
                  "name": "IEnumerable<Type>",
                  "name.vb": "IEnumerable(Of Type)",
                  "fullName": "System.Collections.Generic.IEnumerable<System.Type>",
                  "fullName.vb": "System.Collections.Generic.IEnumerable(Of System.Type)",
                  "spec.csharp": [
                    {
                      "uid": "System.Collections.Generic.IEnumerable`1",
                      "name": "IEnumerable",
                      "fullName": "System.Collections.Generic.IEnumerable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Type",
                      "name": "Type",
                      "fullName": "System.Type",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Collections.Generic.IEnumerable`1",
                      "name": "IEnumerable",
                      "fullName": "System.Collections.Generic.IEnumerable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Type",
                      "name": "Type",
                      "fullName": "System.Type",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"System.Type\" name=\"System.Type\"/>&gt;",
                  "id": "IEnumerable_Type_",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionTypes\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionTypes()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L439"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetTableForQuerySource(Remotion.Linq.Clauses.IQuerySource)",
            "id": "GetTableForQuerySource_IQuerySource_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "GetTableForQuerySource(IQuerySource)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetTableForQuerySource(Remotion.Linq.Clauses.IQuerySource)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 140,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual TableExpressionBase GetTableForQuerySource(IQuerySource querySource)",
              "content.vb": "Public Overridable Function GetTableForQuerySource(querySource As IQuerySource) As TableExpressionBase",
              "parameters": [
                {
                  "id": "querySource",
                  "type": {
                    "uid": "Remotion.Linq.Clauses.IQuerySource",
                    "parent": "Remotion.Linq.Clauses",
                    "isExternal": true,
                    "name": "IQuerySource",
                    "fullName": "Remotion.Linq.Clauses.IQuerySource",
                    "specName": "<xref href=\"Remotion.Linq.Clauses.IQuerySource\" name=\"Remotion.Linq.Clauses.IQuerySource\"/>",
                    "id": "IQuerySource",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                  "parent": "Microsoft.Data.Entity.Query.Expressions",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                  "name": "TableExpressionBase",
                  "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                  "type": "class",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                  "id": "TableExpressionBase",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetTableForQuerySource(Remotion.Linq.Clauses.IQuerySource)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetTableForQuerySource(Remotion.Linq.Clauses.IQuerySource)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L141"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.HandlesQuerySource(Remotion.Linq.Clauses.IQuerySource)",
            "id": "HandlesQuerySource_IQuerySource_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "HandlesQuerySource(IQuerySource)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.HandlesQuerySource(Remotion.Linq.Clauses.IQuerySource)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 131,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual bool HandlesQuerySource(IQuerySource querySource)",
              "content.vb": "Public Overridable Function HandlesQuerySource(querySource As IQuerySource) As Boolean",
              "parameters": [
                {
                  "id": "querySource",
                  "type": {
                    "uid": "Remotion.Linq.Clauses.IQuerySource",
                    "parent": "Remotion.Linq.Clauses",
                    "isExternal": true,
                    "name": "IQuerySource",
                    "fullName": "Remotion.Linq.Clauses.IQuerySource",
                    "specName": "<xref href=\"Remotion.Linq.Clauses.IQuerySource\" name=\"Remotion.Linq.Clauses.IQuerySource\"/>",
                    "id": "IQuerySource",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Boolean",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Boolean",
                  "fullName": "System.Boolean",
                  "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                  "id": "Boolean",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.HandlesQuerySource(Remotion.Linq.Clauses.IQuerySource)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.HandlesQuerySource(Remotion.Linq.Clauses.IQuerySource)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L132"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsCorrelated",
            "id": "IsCorrelated__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "IsCorrelated()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsCorrelated()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 94,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual bool IsCorrelated()",
              "content.vb": "Public Overridable Function IsCorrelated As Boolean",
              "return": {
                "type": {
                  "uid": "System.Boolean",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Boolean",
                  "fullName": "System.Boolean",
                  "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                  "id": "Boolean",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsCorrelated\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsCorrelated()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L95"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PrependToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
            "id": "PrependToOrderBy_IEnumerable_Ordering__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "PrependToOrderBy(IEnumerable<Ordering>)",
            "name.vb": "PrependToOrderBy(IEnumerable(Of Ordering))",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PrependToOrderBy(System.Collections.Generic.IEnumerable<Remotion.Linq.Clauses.Ordering>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PrependToOrderBy(System.Collections.Generic.IEnumerable(Of Remotion.Linq.Clauses.Ordering))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 562,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void PrependToOrderBy(IEnumerable<Ordering> orderings)",
              "content.vb": "Public Overridable Sub PrependToOrderBy(orderings As IEnumerable(Of Ordering))",
              "parameters": [
                {
                  "id": "orderings",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<Ordering>",
                    "name.vb": "IEnumerable(Of Ordering)",
                    "fullName": "System.Collections.Generic.IEnumerable<Remotion.Linq.Clauses.Ordering>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of Remotion.Linq.Clauses.Ordering)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"Remotion.Linq.Clauses.Ordering\" name=\"Remotion.Linq.Clauses.Ordering\"/>&gt;",
                    "id": "IEnumerable_Ordering_",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.PrependToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.PrependToOrderBy(System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L563"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PushDownSubquery",
            "id": "PushDownSubquery__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "PushDownSubquery()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PushDownSubquery()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 225,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual SelectExpression PushDownSubquery()",
              "content.vb": "Public Overridable Function PushDownSubquery As SelectExpression",
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                  "id": "SelectExpression",
                  "parent": "Microsoft.Data.Entity.Query.Expressions",
                  "children": [
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.#ctor(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.#ctor(Microsoft.Data.Entity.Query.Sql.IQuerySqlGeneratorFactory,System.String)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Accept(System.Linq.Expressions.ExpressionVisitor)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddAliasToProjection(System.String,System.Linq.Expressions.Expression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddCrossJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddInnerJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddLateralJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddOuterJoin(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddTables(System.Collections.Generic.IEnumerable{Microsoft.Data.Entity.Query.Expressions.TableExpressionBase})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(Remotion.Linq.Clauses.Ordering)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToOrderBy(System.String,Microsoft.Data.Entity.Metadata.IProperty,Microsoft.Data.Entity.Query.Expressions.TableExpressionBase,Remotion.Linq.Clauses.OrderingDirection)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.AliasExpression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.Linq.Expressions.Expression,System.Boolean)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.AddToProjection(System.String,Microsoft.Data.Entity.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearOrderBy",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearProjection",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ClearTables",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Clone(System.String)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateDefaultQuerySqlGenerator",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.CreateFromSqlQuerySqlGenerator(System.String,System.String)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ExplodeStarProjection",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionIndex(Microsoft.Data.Entity.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetProjectionTypes",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.GetTableForQuerySource(Remotion.Linq.Clauses.IQuerySource)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.HandlesQuerySource(Remotion.Linq.Clauses.IQuerySource)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsCorrelated",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsDistinct",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.IsProjectStar",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Limit",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Offset",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.OrderBy",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Predicate",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PrependToOrderBy(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Projection",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.PushDownSubquery",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveFromProjection(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveRangeFromProjection(System.Int32)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionConditionalExpression(System.Linq.Expressions.ConditionalExpression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionExpression(System.Linq.Expressions.Expression)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Tables",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ToString",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.Type",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.UpdateColumnExpression(System.Linq.Expressions.Expression,Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
                    "Microsoft.Data.Entity.Query.Expressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)"
                  ],
                  "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
                  "name": "SelectExpression",
                  "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                  "type": "class",
                  "source": {
                    "remote": {
                      "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                      "branch": "dev",
                      "repo": "https://github.com/chenkennt/EntityFramework.git"
                    },
                    "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                    "startLine": 16,
                    "endLine": 0,
                    "isExternal": false
                  },
                  "assemblies": [
                    "EntityFramework.Relational"
                  ],
                  "namespace": "Microsoft.Data.Entity.Query.Expressions",
                  "syntax": {
                    "content": "public class SelectExpression : TableExpressionBase",
                    "content.vb": "Public Class SelectExpression Inherits TableExpressionBase"
                  },
                  "inheritance": [
                    "System.Object",
                    "System.Linq.Expressions.Expression",
                    "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase"
                  ],
                  "inheritedMembers": [
                    "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.NodeType",
                    "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.QuerySource",
                    "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.Alias",
                    "System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
                    "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Constant(System.Object)",
                    "System.Linq.Expressions.Expression.Constant(System.Object,System.Type)",
                    "System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)",
                    "System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)",
                    "System.Linq.Expressions.Expression.Empty",
                    "System.Linq.Expressions.Expression.Default(System.Type)",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Reduce",
                    "System.Linq.Expressions.Expression.ReduceAndCheck",
                    "System.Linq.Expressions.Expression.ReduceExtensions",
                    "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)",
                    "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)",
                    "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)",
                    "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)",
                    "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Label",
                    "System.Linq.Expressions.Expression.Label(System.String)",
                    "System.Linq.Expressions.Expression.Label(System.Type)",
                    "System.Linq.Expressions.Expression.Label(System.Type,System.String)",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.GetFuncType(System.Type[])",
                    "System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)",
                    "System.Linq.Expressions.Expression.GetActionType(System.Type[])",
                    "System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)",
                    "System.Linq.Expressions.Expression.GetDelegateType(System.Type[])",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])",
                    "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
                    "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)",
                    "System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)",
                    "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)",
                    "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)",
                    "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)",
                    "System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)",
                    "System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])",
                    "System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
                    "System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])",
                    "System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
                    "System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])",
                    "System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
                    "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])",
                    "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
                    "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])",
                    "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})",
                    "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])",
                    "System.Linq.Expressions.Expression.New(System.Type)",
                    "System.Linq.Expressions.Expression.Parameter(System.Type)",
                    "System.Linq.Expressions.Expression.Variable(System.Type)",
                    "System.Linq.Expressions.Expression.Parameter(System.Type,System.String)",
                    "System.Linq.Expressions.Expression.Variable(System.Type,System.String)",
                    "System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])",
                    "System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
                    "System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
                    "System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
                    "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])",
                    "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])",
                    "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])",
                    "System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])",
                    "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})",
                    "System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})",
                    "System.Linq.Expressions.Expression.SymbolDocument(System.String)",
                    "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)",
                    "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)",
                    "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)",
                    "System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])",
                    "System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])",
                    "System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})",
                    "System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Rethrow",
                    "System.Linq.Expressions.Expression.Rethrow(System.Type)",
                    "System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)",
                    "System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)",
                    "System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
                    "System.Linq.Expressions.Expression.CanReduce",
                    "System.Object.Equals(System.Object)",
                    "System.Object.Equals(System.Object,System.Object)",
                    "System.Object.ReferenceEquals(System.Object,System.Object)",
                    "System.Object.GetHashCode",
                    "System.Object.GetType",
                    "System.Object.MemberwiseClone"
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\"/>",
                  "level": 3
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.PushDownSubquery\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.PushDownSubquery()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L226"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveFromProjection(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})",
            "id": "RemoveFromProjection_IEnumerable_Ordering__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "RemoveFromProjection(IEnumerable<Ordering>)",
            "name.vb": "RemoveFromProjection(IEnumerable(Of Ordering))",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveFromProjection(System.Collections.Generic.IEnumerable<Remotion.Linq.Clauses.Ordering>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveFromProjection(System.Collections.Generic.IEnumerable(Of Remotion.Linq.Clauses.Ordering))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 482,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void RemoveFromProjection(IEnumerable<Ordering> orderBy)",
              "content.vb": "Public Overridable Sub RemoveFromProjection(orderBy As IEnumerable(Of Ordering))",
              "parameters": [
                {
                  "id": "orderBy",
                  "type": {
                    "uid": "System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEnumerable`1",
                    "name": "IEnumerable<Ordering>",
                    "name.vb": "IEnumerable(Of Ordering)",
                    "fullName": "System.Collections.Generic.IEnumerable<Remotion.Linq.Clauses.Ordering>",
                    "fullName.vb": "System.Collections.Generic.IEnumerable(Of Remotion.Linq.Clauses.Ordering)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEnumerable`1",
                        "name": "IEnumerable",
                        "fullName": "System.Collections.Generic.IEnumerable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEnumerable`1\" name=\"System.Collections.Generic.IEnumerable\"/>&lt;<xref href=\"Remotion.Linq.Clauses.Ordering\" name=\"Remotion.Linq.Clauses.Ordering\"/>&gt;",
                    "id": "IEnumerable_Ordering_",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveFromProjection(System.Collections.Generic.IEnumerable{Remotion.Linq.Clauses.Ordering})\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveFromProjection(System.Collections.Generic.IEnumerable&lt;Remotion.Linq.Clauses.Ordering&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L483"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveRangeFromProjection(System.Int32)",
            "id": "RemoveRangeFromProjection_Int32_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "RemoveRangeFromProjection(Int32)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveRangeFromProjection(System.Int32)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 474,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void RemoveRangeFromProjection(int index)",
              "content.vb": "Public Overridable Sub RemoveRangeFromProjection(index As Integer)",
              "parameters": [
                {
                  "id": "index",
                  "type": {
                    "uid": "System.Int32",
                    "parent": "System",
                    "isExternal": true,
                    "name": "Int32",
                    "fullName": "System.Int32",
                    "specName": "<xref href=\"System.Int32\" name=\"System.Int32\"/>",
                    "id": "Int32",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveRangeFromProjection(System.Int32)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveRangeFromProjection(System.Int32)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L475"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "id": "RemoveTable_TableExpressionBase_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "RemoveTable(TableExpressionBase)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 705,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void RemoveTable(TableExpressionBase tableExpression)",
              "content.vb": "Public Overridable Sub RemoveTable(tableExpression As TableExpressionBase)",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.RemoveTable(Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L706"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionConditionalExpression(System.Linq.Expressions.ConditionalExpression)",
            "id": "SetProjectionConditionalExpression_ConditionalExpression_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "SetProjectionConditionalExpression(ConditionalExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionConditionalExpression(System.Linq.Expressions.ConditionalExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 449,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void SetProjectionConditionalExpression(ConditionalExpression conditionalExpression)",
              "content.vb": "Public Overridable Sub SetProjectionConditionalExpression(conditionalExpression As ConditionalExpression)",
              "parameters": [
                {
                  "id": "conditionalExpression",
                  "type": {
                    "uid": "System.Linq.Expressions.ConditionalExpression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ConditionalExpression",
                    "fullName": "System.Linq.Expressions.ConditionalExpression",
                    "specName": "<xref href=\"System.Linq.Expressions.ConditionalExpression\" name=\"System.Linq.Expressions.ConditionalExpression\"/>",
                    "id": "ConditionalExpression",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionConditionalExpression(System.Linq.Expressions.ConditionalExpression)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionConditionalExpression(System.Linq.Expressions.ConditionalExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L450"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionExpression(System.Linq.Expressions.Expression)",
            "id": "SetProjectionExpression_Expression_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "SetProjectionExpression(Expression)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionExpression(System.Linq.Expressions.Expression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 457,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual void SetProjectionExpression(Expression expression)",
              "content.vb": "Public Overridable Sub SetProjectionExpression(expression As Expression)",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "Expression",
                    "fullName": "System.Linq.Expressions.Expression",
                    "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                    "id": "Expression",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionExpression(System.Linq.Expressions.Expression)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.SetProjectionExpression(System.Linq.Expressions.Expression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L458"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ToString",
            "id": "ToString__",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "ToString()",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.ToString()",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 757,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public override string ToString()",
              "content.vb": "Public Overrides Function ToString As String",
              "return": {
                "type": {
                  "uid": "System.String",
                  "parent": "System",
                  "isExternal": true,
                  "name": "String",
                  "fullName": "System.String",
                  "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                  "id": "String",
                  "level": 0
                }
              }
            },
            "overridden": "System.Linq.Expressions.Expression.ToString",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ToString\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.ToString()\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L758"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.UpdateColumnExpression(System.Linq.Expressions.Expression,Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "id": "UpdateColumnExpression_Expression__TableExpressionBase_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "UpdateColumnExpression(Expression, TableExpressionBase)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.UpdateColumnExpression(System.Linq.Expressions.Expression, Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 763,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "public virtual Expression UpdateColumnExpression(Expression expression, TableExpressionBase tableExpression)",
              "content.vb": "Public Overridable Function UpdateColumnExpression(expression As Expression, tableExpression As TableExpressionBase) As Expression",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "Expression",
                    "fullName": "System.Linq.Expressions.Expression",
                    "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                    "id": "Expression",
                    "level": 0
                  }
                },
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
                    "name": "TableExpressionBase",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
                    "id": "TableExpressionBase",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.UpdateColumnExpression(System.Linq.Expressions.Expression,Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.UpdateColumnExpression(System.Linq.Expressions.Expression, Microsoft.Data.Entity.Query.Expressions.TableExpressionBase)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L764"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)",
            "id": "VisitChildren_ExpressionVisitor_",
            "parent": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
            "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
            "name": "VisitChildren(ExpressionVisitor)",
            "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
              "startLine": 723,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Expressions",
            "syntax": {
              "content": "protected override Expression VisitChildren(ExpressionVisitor visitor)",
              "content.vb": "Protected Overrides Function VisitChildren(visitor As ExpressionVisitor) As Expression",
              "parameters": [
                {
                  "id": "visitor",
                  "type": {
                    "uid": "System.Linq.Expressions.ExpressionVisitor",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ExpressionVisitor",
                    "fullName": "System.Linq.Expressions.ExpressionVisitor",
                    "specName": "<xref href=\"System.Linq.Expressions.ExpressionVisitor\" name=\"System.Linq.Expressions.ExpressionVisitor\"/>",
                    "id": "ExpressionVisitor",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "overridden": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.VisitChildren(System.Linq.Expressions.ExpressionVisitor)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L724"
          }
        ]
      }
    ],
    "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
    "name": "SelectExpression",
    "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
    "type": "Class",
    "source": {
      "remote": {
        "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
        "branch": "dev",
        "repo": "https://github.com/chenkennt/EntityFramework.git"
      },
      "path": "src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs",
      "startLine": 16,
      "endLine": 0,
      "isExternal": false
    },
    "assemblies": [
      "EntityFramework.Relational"
    ],
    "namespace": "Microsoft.Data.Entity.Query.Expressions",
    "syntax": {
      "content": "public class SelectExpression : TableExpressionBase",
      "content.vb": "Public Class SelectExpression Inherits TableExpressionBase"
    },
    "inheritance": [
      {
        "uid": "System.Object",
        "parent": "System",
        "isExternal": true,
        "name": "Object",
        "fullName": "System.Object",
        "specName": "<xref href=\"System.Object\" name=\"System.Object\"/>",
        "id": "Object",
        "level": 0,
        "index": 0
      },
      {
        "uid": "System.Linq.Expressions.Expression",
        "parent": "System.Linq.Expressions",
        "isExternal": true,
        "name": "Expression",
        "fullName": "System.Linq.Expressions.Expression",
        "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
        "id": "Expression",
        "level": 0,
        "index": 1
      },
      {
        "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
        "parent": "Microsoft.Data.Entity.Query.Expressions",
        "isExternal": false,
        "href": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.yml",
        "name": "TableExpressionBase",
        "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase",
        "type": "class",
        "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpressionBase\"/>",
        "id": "TableExpressionBase",
        "level": 0,
        "index": 2
      }
    ],
    "inheritedMembers": [
      "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.NodeType",
      "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.QuerySource",
      "Microsoft.Data.Entity.Query.Expressions.TableExpressionBase.Alias",
      "System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)",
      "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Constant(System.Object)",
      "System.Linq.Expressions.Expression.Constant(System.Object,System.Type)",
      "System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)",
      "System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)",
      "System.Linq.Expressions.Expression.Empty",
      "System.Linq.Expressions.Expression.Default(System.Type)",
      "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Reduce",
      "System.Linq.Expressions.Expression.ReduceAndCheck",
      "System.Linq.Expressions.Expression.ReduceExtensions",
      "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)",
      "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)",
      "System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)",
      "System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)",
      "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)",
      "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)",
      "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)",
      "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)",
      "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)",
      "System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Label",
      "System.Linq.Expressions.Expression.Label(System.String)",
      "System.Linq.Expressions.Expression.Label(System.Type)",
      "System.Linq.Expressions.Expression.Label(System.Type,System.String)",
      "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
      "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
      "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
      "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
      "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])",
      "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])",
      "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.GetFuncType(System.Type[])",
      "System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)",
      "System.Linq.Expressions.Expression.GetActionType(System.Type[])",
      "System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)",
      "System.Linq.Expressions.Expression.GetDelegateType(System.Type[])",
      "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])",
      "System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
      "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)",
      "System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)",
      "System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)",
      "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)",
      "System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)",
      "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)",
      "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)",
      "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)",
      "System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)",
      "System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)",
      "System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])",
      "System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
      "System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])",
      "System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
      "System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])",
      "System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})",
      "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])",
      "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
      "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])",
      "System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})",
      "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)",
      "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})",
      "System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])",
      "System.Linq.Expressions.Expression.New(System.Type)",
      "System.Linq.Expressions.Expression.Parameter(System.Type)",
      "System.Linq.Expressions.Expression.Variable(System.Type)",
      "System.Linq.Expressions.Expression.Parameter(System.Type,System.String)",
      "System.Linq.Expressions.Expression.Variable(System.Type,System.String)",
      "System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])",
      "System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})",
      "System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])",
      "System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])",
      "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])",
      "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])",
      "System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])",
      "System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})",
      "System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})",
      "System.Linq.Expressions.Expression.SymbolDocument(System.String)",
      "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)",
      "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)",
      "System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)",
      "System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])",
      "System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])",
      "System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})",
      "System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Rethrow",
      "System.Linq.Expressions.Expression.Rethrow(System.Type)",
      "System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)",
      "System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)",
      "System.Linq.Expressions.Expression.CanReduce",
      "System.Object.Equals(System.Object)",
      "System.Object.Equals(System.Object,System.Object)",
      "System.Object.ReferenceEquals(System.Object,System.Object)",
      "System.Object.GetHashCode",
      "System.Object.GetType",
      "System.Object.MemberwiseClone"
    ],
    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\"/>",
    "level": 3,
    "docurl": "",
    "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Expressions/SelectExpression.cs/#L17"
  },
  "isClass": true,
  "_allowToc": true
}
