
{
  "_lang": "csharp",
  "_tocPath": "reference/toc.html",
  "_navPath": "toc.html",
  "_rel": "../",
  "_navRel": "../toc.html",
  "_tocRel": "toc.html",
  "_appTitle": "Entity Framework",
  "item": {
    "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
    "id": "DefaultQuerySqlGenerator",
    "parent": "Microsoft.Data.Entity.Query.Sql",
    "children": [
      {
        "title": "Constructors",
        "id": "constructors",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.#ctor(Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory,Microsoft.Data.Entity.Storage.ISqlGenerator,Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory,Microsoft.Data.Entity.Query.Expressions.SelectExpression)",
            "id": "DefaultQuerySqlGenerator_IRelationalCommandBuilderFactory__ISqlGenerator__IParameterNameGeneratorFactory__SelectExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "DefaultQuerySqlGenerator(IRelationalCommandBuilderFactory, ISqlGenerator, IParameterNameGeneratorFactory, SelectExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.DefaultQuerySqlGenerator(Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory, Microsoft.Data.Entity.Storage.ISqlGenerator, Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory, Microsoft.Data.Entity.Query.Expressions.SelectExpression)",
            "type": "constructor",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 45,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public DefaultQuerySqlGenerator(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerator sqlGenerator, IParameterNameGeneratorFactory parameterNameGeneratorFactory, SelectExpression selectExpression)",
              "content.vb": "Public Sub New(relationalCommandBuilderFactory As IRelationalCommandBuilderFactory, sqlGenerator As ISqlGenerator, parameterNameGeneratorFactory As IParameterNameGeneratorFactory, selectExpression As SelectExpression)",
              "parameters": [
                {
                  "id": "relationalCommandBuilderFactory",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory.yml",
                    "name": "IRelationalCommandBuilderFactory",
                    "fullName": "Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory",
                    "type": "interface",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory\" name=\"Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory\"/>",
                    "id": "IRelationalCommandBuilderFactory",
                    "level": 0
                  }
                },
                {
                  "id": "sqlGenerator",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Storage.ISqlGenerator",
                    "parent": "Microsoft.Data.Entity.Storage",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Storage.ISqlGenerator.yml",
                    "name": "ISqlGenerator",
                    "fullName": "Microsoft.Data.Entity.Storage.ISqlGenerator",
                    "type": "interface",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Storage.ISqlGenerator\" name=\"Microsoft.Data.Entity.Storage.ISqlGenerator\"/>",
                    "id": "ISqlGenerator",
                    "level": 0
                  }
                },
                {
                  "id": "parameterNameGeneratorFactory",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory",
                    "parent": "Microsoft.Data.Entity.Storage",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory.yml",
                    "name": "IParameterNameGeneratorFactory",
                    "fullName": "Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory",
                    "type": "interface",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory\" name=\"Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory\"/>",
                    "id": "IParameterNameGeneratorFactory",
                    "level": 0
                  }
                },
                {
                  "id": "selectExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
                    "name": "SelectExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\"/>",
                    "id": "SelectExpression",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.#ctor(Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory,Microsoft.Data.Entity.Storage.ISqlGenerator,Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory,Microsoft.Data.Entity.Query.Expressions.SelectExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.DefaultQuerySqlGenerator(Microsoft.Data.Entity.Storage.IRelationalCommandBuilderFactory, Microsoft.Data.Entity.Storage.ISqlGenerator, Microsoft.Data.Entity.Storage.IParameterNameGeneratorFactory, Microsoft.Data.Entity.Query.Expressions.SelectExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L46"
          }
        ]
      },
      {
        "title": "Properties",
        "id": "properties",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator",
            "id": "ConcatOperator",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "ConcatOperator",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 94,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual string ConcatOperator { get; }",
                "content.vb": "Protected Overridable ReadOnly Property ConcatOperator As String",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L95"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.FalseLiteral",
            "id": "FalseLiteral",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "FalseLiteral",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.FalseLiteral",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 96,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual string FalseLiteral { get; }",
                "content.vb": "Protected Overridable ReadOnly Property FalseLiteral As String",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.FalseLiteral\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.FalseLiteral\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L97"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ParameterValues",
            "id": "ParameterValues",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "ParameterValues",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ParameterValues",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 67,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual IReadOnlyDictionary<string, object> ParameterValues { get; }",
                "content.vb": "Protected Overridable ReadOnly Property ParameterValues As IReadOnlyDictionary(Of String, Object)",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyDictionary`2",
                    "name": "IReadOnlyDictionary<String, Object>",
                    "name.vb": "IReadOnlyDictionary(Of String, Object)",
                    "fullName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyDictionary`2",
                        "name": "IReadOnlyDictionary",
                        "fullName": "System.Collections.Generic.IReadOnlyDictionary",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.String",
                        "name": "String",
                        "fullName": "System.String",
                        "isExternal": true
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Object",
                        "name": "Object",
                        "fullName": "System.Object",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyDictionary`2",
                        "name": "IReadOnlyDictionary",
                        "fullName": "System.Collections.Generic.IReadOnlyDictionary",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.String",
                        "name": "String",
                        "fullName": "System.String",
                        "isExternal": true
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Object",
                        "name": "Object",
                        "fullName": "System.Object",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyDictionary`2\" name=\"System.Collections.Generic.IReadOnlyDictionary\"/>&lt;<xref href=\"System.String\" name=\"System.String\"/>, <xref href=\"System.Object\" name=\"System.Object\"/>&gt;",
                    "id": "IReadOnlyDictionary_String__Object_",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ParameterValues\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ParameterValues\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L68"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.SelectExpression",
            "id": "SelectExpression",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "SelectExpression",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.SelectExpression",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 63,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual SelectExpression SelectExpression { get; }",
                "content.vb": "Protected Overridable ReadOnly Property SelectExpression As SelectExpression",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
                    "name": "SelectExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\"/>",
                    "id": "SelectExpression",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.SelectExpression\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L64"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.Sql",
            "id": "Sql",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "Sql",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.Sql",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 92,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual IRelationalCommandBuilder Sql { get; }",
                "content.vb": "Protected Overridable ReadOnly Property Sql As IRelationalCommandBuilder",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "Microsoft.Data.Entity.Storage.IRelationalCommandBuilder",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Storage.IRelationalCommandBuilder.yml",
                    "name": "IRelationalCommandBuilder",
                    "fullName": "Microsoft.Data.Entity.Storage.IRelationalCommandBuilder",
                    "type": "interface",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IRelationalCommandBuilder\" name=\"Microsoft.Data.Entity.Storage.IRelationalCommandBuilder\"/>",
                    "id": "IRelationalCommandBuilder",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.Sql\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.Sql\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L93"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator",
            "id": "SqlGenerator",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "SqlGenerator",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 65,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual ISqlGenerator SqlGenerator { get; }",
                "content.vb": "Protected Overridable ReadOnly Property SqlGenerator As ISqlGenerator",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "Microsoft.Data.Entity.Storage.ISqlGenerator",
                    "parent": "Microsoft.Data.Entity.Storage",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Storage.ISqlGenerator.yml",
                    "name": "ISqlGenerator",
                    "fullName": "Microsoft.Data.Entity.Storage.ISqlGenerator",
                    "type": "interface",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Storage.ISqlGenerator\" name=\"Microsoft.Data.Entity.Storage.ISqlGenerator\"/>",
                    "id": "ISqlGenerator",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L66"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TrueLiteral",
            "id": "TrueLiteral",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "TrueLiteral",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TrueLiteral",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 95,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual string TrueLiteral { get; }",
                "content.vb": "Protected Overridable ReadOnly Property TrueLiteral As String",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TrueLiteral\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TrueLiteral\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L96"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral",
            "id": "TypedFalseLiteral",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "TypedFalseLiteral",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 98,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual string TypedFalseLiteral { get; }",
                "content.vb": "Protected Overridable ReadOnly Property TypedFalseLiteral As String",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L99"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral",
            "id": "TypedTrueLiteral",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "TypedTrueLiteral",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral",
            "type": "property",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 97,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
                "content": "protected virtual string TypedTrueLiteral { get; }",
                "content.vb": "Protected Overridable ReadOnly Property TypedTrueLiteral As String",
                "parameters": [],
                "return": {
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L98"
          }
        ]
      },
      {
        "title": "Methods",
        "id": "methods",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException``1(``0,System.String)",
            "id": "CreateUnhandledItemException_T__T__String_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "CreateUnhandledItemException<T>(T, String)",
            "name.vb": "CreateUnhandledItemException(Of T)(T, String)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException<T>(T, System.String)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException(Of T)(T, System.String)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 982,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected override Exception CreateUnhandledItemException<T>(T unhandledItem, string visitMethod)",
              "content.vb": "Protected Overrides Function CreateUnhandledItemException(Of T)(unhandledItem As T, visitMethod As String) As Exception",
              "parameters": [
                {
                  "id": "unhandledItem",
                  "type": {
                    "uid": "{T}",
                    "isExternal": false,
                    "name": "T",
                    "fullName": "T",
                    "specName": "<xref href=\"{T}\" name=\"T\"/>",
                    "id": "T",
                    "level": 0
                  }
                },
                {
                  "id": "visitMethod",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
              ],
              "typeParameters": [
                {
                  "id": "T"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Exception",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Exception",
                  "fullName": "System.Exception",
                  "specName": "<xref href=\"System.Exception\" name=\"System.Exception\"/>",
                  "id": "Exception",
                  "level": 0
                }
              }
            },
            "overridden": "Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1({T},System.String)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException``1(``0,System.String)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException&lt;T&gt;(T, System.String)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L983"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)",
            "id": "CreateValueBufferFactory_IRelationalValueBufferFactoryFactory__DbDataReader_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "CreateValueBufferFactory(IRelationalValueBufferFactoryFactory, DbDataReader)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory, System.Data.Common.DbDataReader)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 83,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual IRelationalValueBufferFactory CreateValueBufferFactory(IRelationalValueBufferFactoryFactory relationalValueBufferFactoryFactory, DbDataReader dataReader)",
              "content.vb": "Public Overridable Function CreateValueBufferFactory(relationalValueBufferFactoryFactory As IRelationalValueBufferFactoryFactory, dataReader As DbDataReader) As IRelationalValueBufferFactory",
              "parameters": [
                {
                  "id": "relationalValueBufferFactoryFactory",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory",
                    "parent": "Microsoft.Data.Entity.Storage",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory.yml",
                    "name": "IRelationalValueBufferFactoryFactory",
                    "fullName": "Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory",
                    "type": "interface",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory\" name=\"Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory\"/>",
                    "id": "IRelationalValueBufferFactoryFactory",
                    "level": 0
                  }
                },
                {
                  "id": "dataReader",
                  "type": {
                    "uid": "System.Data.Common.DbDataReader",
                    "parent": "System.Data.Common",
                    "isExternal": true,
                    "name": "DbDataReader",
                    "fullName": "System.Data.Common.DbDataReader",
                    "specName": "<xref href=\"System.Data.Common.DbDataReader\" name=\"System.Data.Common.DbDataReader\"/>",
                    "id": "DbDataReader",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Storage.IRelationalValueBufferFactory",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Storage.IRelationalValueBufferFactory.yml",
                  "name": "IRelationalValueBufferFactory",
                  "fullName": "Microsoft.Data.Entity.Storage.IRelationalValueBufferFactory",
                  "type": "interface",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IRelationalValueBufferFactory\" name=\"Microsoft.Data.Entity.Storage.IRelationalValueBufferFactory\"/>",
                  "id": "IRelationalValueBufferFactory",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.Data.Entity.Storage.IRelationalValueBufferFactoryFactory, System.Data.Common.DbDataReader)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L84"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})",
            "id": "ExtractNonNullExpressionValues_IReadOnlyList_Expression__",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "ExtractNonNullExpressionValues(IReadOnlyList<Expression>)",
            "name.vb": "ExtractNonNullExpressionValues(IReadOnlyList(Of Expression))",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 571,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual IReadOnlyList<Expression> ExtractNonNullExpressionValues(IReadOnlyList<Expression> inExpressionValues)",
              "content.vb": "Protected Overridable Function ExtractNonNullExpressionValues(inExpressionValues As IReadOnlyList(Of Expression)) As IReadOnlyList(Of Expression)",
              "parameters": [
                {
                  "id": "inExpressionValues",
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyList`1",
                    "name": "IReadOnlyList<Expression>",
                    "name.vb": "IReadOnlyList(Of Expression)",
                    "fullName": "System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyList`1\" name=\"System.Collections.Generic.IReadOnlyList\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                    "id": "IReadOnlyList_Expression_",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}",
                  "parent": "System.Collections.Generic",
                  "definition": "System.Collections.Generic.IReadOnlyList`1",
                  "name": "IReadOnlyList<Expression>",
                  "name.vb": "IReadOnlyList(Of Expression)",
                  "fullName": "System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>",
                  "fullName.vb": "System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression)",
                  "spec.csharp": [
                    {
                      "uid": "System.Collections.Generic.IReadOnlyList`1",
                      "name": "IReadOnlyList",
                      "fullName": "System.Collections.Generic.IReadOnlyList",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Linq.Expressions.Expression",
                      "name": "Expression",
                      "fullName": "System.Linq.Expressions.Expression",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Collections.Generic.IReadOnlyList`1",
                      "name": "IReadOnlyList",
                      "fullName": "System.Collections.Generic.IReadOnlyList",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Linq.Expressions.Expression",
                      "name": "Expression",
                      "fullName": "System.Linq.Expressions.Expression",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Collections.Generic.IReadOnlyList`1\" name=\"System.Collections.Generic.IReadOnlyList\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                  "id": "IReadOnlyList_Expression_",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L572"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)",
            "id": "GenerateBinaryOperator_ExpressionType_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "GenerateBinaryOperator(ExpressionType)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 980,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual string GenerateBinaryOperator(ExpressionType op)",
              "content.vb": "Protected Overridable Function GenerateBinaryOperator(op As ExpressionType) As String",
              "parameters": [
                {
                  "id": "op",
                  "type": {
                    "uid": "System.Linq.Expressions.ExpressionType",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ExpressionType",
                    "fullName": "System.Linq.Expressions.ExpressionType",
                    "specName": "<xref href=\"System.Linq.Expressions.ExpressionType\" name=\"System.Linq.Expressions.ExpressionType\"/>",
                    "id": "ExpressionType",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.String",
                  "parent": "System",
                  "isExternal": true,
                  "name": "String",
                  "fullName": "System.String",
                  "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                  "id": "String",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L981"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})",
            "id": "GenerateFromSql_String__String__IReadOnlyDictionary_String__Object__",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "GenerateFromSql(String, String, IReadOnlyDictionary<String, Object>)",
            "name.vb": "GenerateFromSql(String, String, IReadOnlyDictionary(Of String, Object))",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String, System.String, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String, System.String, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 295,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual void GenerateFromSql(string sql, string argumentsParameterName, IReadOnlyDictionary<string, object> parameters)",
              "content.vb": "Protected Overridable Sub GenerateFromSql(sql As String, argumentsParameterName As String, parameters As IReadOnlyDictionary(Of String, Object))",
              "parameters": [
                {
                  "id": "sql",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                },
                {
                  "id": "argumentsParameterName",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                },
                {
                  "id": "parameters",
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyDictionary`2",
                    "name": "IReadOnlyDictionary<String, Object>",
                    "name.vb": "IReadOnlyDictionary(Of String, Object)",
                    "fullName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyDictionary`2",
                        "name": "IReadOnlyDictionary",
                        "fullName": "System.Collections.Generic.IReadOnlyDictionary",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.String",
                        "name": "String",
                        "fullName": "System.String",
                        "isExternal": true
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Object",
                        "name": "Object",
                        "fullName": "System.Object",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyDictionary`2",
                        "name": "IReadOnlyDictionary",
                        "fullName": "System.Collections.Generic.IReadOnlyDictionary",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.String",
                        "name": "String",
                        "fullName": "System.String",
                        "isExternal": true
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Object",
                        "name": "Object",
                        "fullName": "System.Object",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyDictionary`2\" name=\"System.Collections.Generic.IReadOnlyDictionary\"/>&lt;<xref href=\"System.String\" name=\"System.String\"/>, <xref href=\"System.Object\" name=\"System.Object\"/>&gt;",
                    "id": "IReadOnlyDictionary_String__Object_",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String, System.String, System.Collections.Generic.IReadOnlyDictionary&lt;System.String, System.Object&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L296"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.Data.Entity.Query.Expressions.SelectExpression)",
            "id": "GenerateLimitOffset_SelectExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "GenerateLimitOffset(SelectExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.Data.Entity.Query.Expressions.SelectExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 649,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual void GenerateLimitOffset(SelectExpression selectExpression)",
              "content.vb": "Protected Overridable Sub GenerateLimitOffset(selectExpression As SelectExpression)",
              "parameters": [
                {
                  "id": "selectExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
                    "name": "SelectExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\"/>",
                    "id": "SelectExpression",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.Data.Entity.Query.Expressions.SelectExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.Data.Entity.Query.Expressions.SelectExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L650"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering})",
            "id": "GenerateOrderBy_IReadOnlyList_Ordering__",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "GenerateOrderBy(IReadOnlyList<Ordering>)",
            "name.vb": "GenerateOrderBy(IReadOnlyList(Of Ordering))",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList<Remotion.Linq.Clauses.Ordering>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList(Of Remotion.Linq.Clauses.Ordering))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 219,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual void GenerateOrderBy(IReadOnlyList<Ordering> orderings)",
              "content.vb": "Protected Overridable Sub GenerateOrderBy(orderings As IReadOnlyList(Of Ordering))",
              "parameters": [
                {
                  "id": "orderings",
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyList`1",
                    "name": "IReadOnlyList<Ordering>",
                    "name.vb": "IReadOnlyList(Of Ordering)",
                    "fullName": "System.Collections.Generic.IReadOnlyList<Remotion.Linq.Clauses.Ordering>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyList(Of Remotion.Linq.Clauses.Ordering)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "Remotion.Linq.Clauses.Ordering",
                        "name": "Ordering",
                        "fullName": "Remotion.Linq.Clauses.Ordering",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyList`1\" name=\"System.Collections.Generic.IReadOnlyList\"/>&lt;<xref href=\"Remotion.Linq.Clauses.Ordering\" name=\"Remotion.Linq.Clauses.Ordering\"/>&gt;",
                    "id": "IReadOnlyList_Ordering_",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering})\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList&lt;Remotion.Linq.Clauses.Ordering&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L220"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})",
            "id": "GenerateSql_IReadOnlyDictionary_String__Object__",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "GenerateSql(IReadOnlyDictionary<String, Object>)",
            "name.vb": "GenerateSql(IReadOnlyDictionary(Of String, Object))",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 69,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual IRelationalCommand GenerateSql(IReadOnlyDictionary<string, object> parameterValues)",
              "content.vb": "Public Overridable Function GenerateSql(parameterValues As IReadOnlyDictionary(Of String, Object)) As IRelationalCommand",
              "parameters": [
                {
                  "id": "parameterValues",
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyDictionary`2",
                    "name": "IReadOnlyDictionary<String, Object>",
                    "name.vb": "IReadOnlyDictionary(Of String, Object)",
                    "fullName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyDictionary`2",
                        "name": "IReadOnlyDictionary",
                        "fullName": "System.Collections.Generic.IReadOnlyDictionary",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.String",
                        "name": "String",
                        "fullName": "System.String",
                        "isExternal": true
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Object",
                        "name": "Object",
                        "fullName": "System.Object",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyDictionary`2",
                        "name": "IReadOnlyDictionary",
                        "fullName": "System.Collections.Generic.IReadOnlyDictionary",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.String",
                        "name": "String",
                        "fullName": "System.String",
                        "isExternal": true
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Object",
                        "name": "Object",
                        "fullName": "System.Object",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyDictionary`2\" name=\"System.Collections.Generic.IReadOnlyDictionary\"/>&lt;<xref href=\"System.String\" name=\"System.String\"/>, <xref href=\"System.Object\" name=\"System.Object\"/>&gt;",
                    "id": "IReadOnlyDictionary_String__Object_",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Storage.IRelationalCommand",
                  "isExternal": false,
                  "href": "Microsoft.Data.Entity.Storage.IRelationalCommand.yml",
                  "name": "IRelationalCommand",
                  "fullName": "Microsoft.Data.Entity.Storage.IRelationalCommand",
                  "type": "interface",
                  "specName": "<xref href=\"Microsoft.Data.Entity.Storage.IRelationalCommand\" name=\"Microsoft.Data.Entity.Storage.IRelationalCommand\"/>",
                  "id": "IRelationalCommand",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary&lt;System.String, System.Object&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L70"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.Data.Entity.Query.Expressions.SelectExpression)",
            "id": "GenerateTop_SelectExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "GenerateTop(SelectExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.Data.Entity.Query.Expressions.SelectExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 636,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual void GenerateTop(SelectExpression selectExpression)",
              "content.vb": "Protected Overridable Sub GenerateTop(selectExpression As SelectExpression)",
              "parameters": [
                {
                  "id": "selectExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
                    "name": "SelectExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\"/>",
                    "id": "SelectExpression",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.Data.Entity.Query.Expressions.SelectExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.Data.Entity.Query.Expressions.SelectExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L637"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})",
            "id": "ProcessInExpressionValues_IReadOnlyList_Expression__",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "ProcessInExpressionValues(IReadOnlyList<Expression>)",
            "name.vb": "ProcessInExpressionValues(IReadOnlyList(Of Expression))",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 530,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual IReadOnlyList<Expression> ProcessInExpressionValues(IReadOnlyList<Expression> inExpressionValues)",
              "content.vb": "Protected Overridable Function ProcessInExpressionValues(inExpressionValues As IReadOnlyList(Of Expression)) As IReadOnlyList(Of Expression)",
              "parameters": [
                {
                  "id": "inExpressionValues",
                  "type": {
                    "uid": "System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IReadOnlyList`1",
                    "name": "IReadOnlyList<Expression>",
                    "name.vb": "IReadOnlyList(Of Expression)",
                    "fullName": "System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>",
                    "fullName.vb": "System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IReadOnlyList`1",
                        "name": "IReadOnlyList",
                        "fullName": "System.Collections.Generic.IReadOnlyList",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Linq.Expressions.Expression",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IReadOnlyList`1\" name=\"System.Collections.Generic.IReadOnlyList\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                    "id": "IReadOnlyList_Expression_",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}",
                  "parent": "System.Collections.Generic",
                  "definition": "System.Collections.Generic.IReadOnlyList`1",
                  "name": "IReadOnlyList<Expression>",
                  "name.vb": "IReadOnlyList(Of Expression)",
                  "fullName": "System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>",
                  "fullName.vb": "System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression)",
                  "spec.csharp": [
                    {
                      "uid": "System.Collections.Generic.IReadOnlyList`1",
                      "name": "IReadOnlyList",
                      "fullName": "System.Collections.Generic.IReadOnlyList",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Linq.Expressions.Expression",
                      "name": "Expression",
                      "fullName": "System.Linq.Expressions.Expression",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Collections.Generic.IReadOnlyList`1",
                      "name": "IReadOnlyList",
                      "fullName": "System.Collections.Generic.IReadOnlyList",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Linq.Expressions.Expression",
                      "name": "Expression",
                      "fullName": "System.Linq.Expressions.Expression",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Collections.Generic.IReadOnlyList`1\" name=\"System.Collections.Generic.IReadOnlyList\"/>&lt;<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>&gt;",
                  "id": "IReadOnlyList_Expression_",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IReadOnlyList&lt;System.Linq.Expressions.Expression&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L531"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType,System.String@)",
            "id": "TryGenerateBinaryOperator_ExpressionType__out_String_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "TryGenerateBinaryOperator(ExpressionType, out String)",
            "name.vb": "TryGenerateBinaryOperator(ExpressionType, ByRef String)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType, out System.String)",
            "fullName.vb": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType, ByRef System.String)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 977,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual bool TryGenerateBinaryOperator(ExpressionType op, out string result)",
              "content.vb": "Protected Overridable Function TryGenerateBinaryOperator(op As ExpressionType, ByRef result As String) As Boolean",
              "parameters": [
                {
                  "id": "op",
                  "type": {
                    "uid": "System.Linq.Expressions.ExpressionType",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ExpressionType",
                    "fullName": "System.Linq.Expressions.ExpressionType",
                    "specName": "<xref href=\"System.Linq.Expressions.ExpressionType\" name=\"System.Linq.Expressions.ExpressionType\"/>",
                    "id": "ExpressionType",
                    "level": 0
                  }
                },
                {
                  "id": "result",
                  "type": {
                    "uid": "System.String",
                    "parent": "System",
                    "isExternal": true,
                    "name": "String",
                    "fullName": "System.String",
                    "specName": "<xref href=\"System.String\" name=\"System.String\"/>",
                    "id": "String",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Boolean",
                  "parent": "System",
                  "isExternal": true,
                  "name": "Boolean",
                  "fullName": "System.Boolean",
                  "specName": "<xref href=\"System.Boolean\" name=\"System.Boolean\"/>",
                  "id": "Boolean",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType,System.String@)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType, out System.String)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L978"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.Data.Entity.Query.Expressions.AliasExpression)",
            "id": "VisitAlias_AliasExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitAlias(AliasExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.Data.Entity.Query.Expressions.AliasExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 822,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitAlias(AliasExpression aliasExpression)",
              "content.vb": "Public Overridable Function VisitAlias(aliasExpression As AliasExpression) As Expression",
              "parameters": [
                {
                  "id": "aliasExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.AliasExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.AliasExpression.yml",
                    "name": "AliasExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.AliasExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.AliasExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.AliasExpression\"/>",
                    "id": "AliasExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.Data.Entity.Query.Expressions.AliasExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.Data.Entity.Query.Expressions.AliasExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L823"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)",
            "id": "VisitBinary_BinaryExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitBinary(BinaryExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 734,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected override Expression VisitBinary(BinaryExpression expression)",
              "content.vb": "Protected Overrides Function VisitBinary(expression As BinaryExpression) As Expression",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.BinaryExpression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "BinaryExpression",
                    "fullName": "System.Linq.Expressions.BinaryExpression",
                    "specName": "<xref href=\"System.Linq.Expressions.BinaryExpression\" name=\"System.Linq.Expressions.BinaryExpression\"/>",
                    "id": "BinaryExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "overridden": "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L735"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)",
            "id": "VisitColumn_ColumnExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitColumn(ColumnExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 811,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitColumn(ColumnExpression columnExpression)",
              "content.vb": "Public Overridable Function VisitColumn(columnExpression As ColumnExpression) As Expression",
              "parameters": [
                {
                  "id": "columnExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.ColumnExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.ColumnExpression.yml",
                    "name": "ColumnExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.ColumnExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.ColumnExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.ColumnExpression\"/>",
                    "id": "ColumnExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.Data.Entity.Query.Expressions.ColumnExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L812"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)",
            "id": "VisitConditional_ConditionalExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitConditional(ConditionalExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 669,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected override Expression VisitConditional(ConditionalExpression expression)",
              "content.vb": "Protected Overrides Function VisitConditional(expression As ConditionalExpression) As Expression",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.ConditionalExpression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ConditionalExpression",
                    "fullName": "System.Linq.Expressions.ConditionalExpression",
                    "specName": "<xref href=\"System.Linq.Expressions.ConditionalExpression\" name=\"System.Linq.Expressions.ConditionalExpression\"/>",
                    "id": "ConditionalExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "overridden": "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L670"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)",
            "id": "VisitConstant_ConstantExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitConstant(ConstantExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 949,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected override Expression VisitConstant(ConstantExpression expression)",
              "content.vb": "Protected Overrides Function VisitConstant(expression As ConstantExpression) As Expression",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.ConstantExpression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ConstantExpression",
                    "fullName": "System.Linq.Expressions.ConstantExpression",
                    "specName": "<xref href=\"System.Linq.Expressions.ConstantExpression\" name=\"System.Linq.Expressions.ConstantExpression\"/>",
                    "id": "ConstantExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "overridden": "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L950"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.Data.Entity.Query.Expressions.CountExpression)",
            "id": "VisitCount_CountExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitCount(CountExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.Data.Entity.Query.Expressions.CountExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 384,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitCount(CountExpression countExpression)",
              "content.vb": "Public Overridable Function VisitCount(countExpression As CountExpression) As Expression",
              "parameters": [
                {
                  "id": "countExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.CountExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.CountExpression.yml",
                    "name": "CountExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.CountExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.CountExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.CountExpression\"/>",
                    "id": "CountExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.Data.Entity.Query.Expressions.CountExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.Data.Entity.Query.Expressions.CountExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L385"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression)",
            "id": "VisitCrossJoin_CrossJoinExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitCrossJoin(CrossJoinExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 362,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression)",
              "content.vb": "Public Overridable Function VisitCrossJoin(crossJoinExpression As CrossJoinExpression) As Expression",
              "parameters": [
                {
                  "id": "crossJoinExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression.yml",
                    "name": "CrossJoinExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression\"/>",
                    "id": "CrossJoinExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.Data.Entity.Query.Expressions.CrossJoinExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L363"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.Data.Entity.Query.Expressions.ExistsExpression)",
            "id": "VisitExists_ExistsExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitExists(ExistsExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.Data.Entity.Query.Expressions.ExistsExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 718,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitExists(ExistsExpression existsExpression)",
              "content.vb": "Public Overridable Function VisitExists(existsExpression As ExistsExpression) As Expression",
              "parameters": [
                {
                  "id": "existsExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.ExistsExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.ExistsExpression.yml",
                    "name": "ExistsExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.ExistsExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.ExistsExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.ExistsExpression\"/>",
                    "id": "ExistsExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.Data.Entity.Query.Expressions.ExistsExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.Data.Entity.Query.Expressions.ExistsExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L719"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.Data.Entity.Query.Expressions.FromSqlExpression)",
            "id": "VisitFromSql_FromSqlExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitFromSql(FromSqlExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.Data.Entity.Query.Expressions.FromSqlExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 278,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression)",
              "content.vb": "Public Overridable Function VisitFromSql(fromSqlExpression As FromSqlExpression) As Expression",
              "parameters": [
                {
                  "id": "fromSqlExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.FromSqlExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.FromSqlExpression.yml",
                    "name": "FromSqlExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.FromSqlExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.FromSqlExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.FromSqlExpression\"/>",
                    "id": "FromSqlExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.Data.Entity.Query.Expressions.FromSqlExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.Data.Entity.Query.Expressions.FromSqlExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L279"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.Data.Entity.Query.Expressions.InExpression)",
            "id": "VisitIn_InExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitIn(InExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.Data.Entity.Query.Expressions.InExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 443,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitIn(InExpression inExpression)",
              "content.vb": "Public Overridable Function VisitIn(inExpression As InExpression) As Expression",
              "parameters": [
                {
                  "id": "inExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.InExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.InExpression.yml",
                    "name": "InExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.InExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.InExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.InExpression\"/>",
                    "id": "InExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.Data.Entity.Query.Expressions.InExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.Data.Entity.Query.Expressions.InExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L444"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression)",
            "id": "VisitInnerJoin_InnerJoinExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitInnerJoin(InnerJoinExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 606,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression)",
              "content.vb": "Public Overridable Function VisitInnerJoin(innerJoinExpression As InnerJoinExpression) As Expression",
              "parameters": [
                {
                  "id": "innerJoinExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression.yml",
                    "name": "InnerJoinExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression\"/>",
                    "id": "InnerJoinExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.Data.Entity.Query.Expressions.InnerJoinExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L607"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.Data.Entity.Query.Expressions.IsNullExpression)",
            "id": "VisitIsNotNull_IsNullExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitIsNotNull(IsNullExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.Data.Entity.Query.Expressions.IsNullExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 855,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitIsNotNull(IsNullExpression isNotNullExpression)",
              "content.vb": "Public Overridable Function VisitIsNotNull(isNotNullExpression As IsNullExpression) As Expression",
              "parameters": [
                {
                  "id": "isNotNullExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.IsNullExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.IsNullExpression.yml",
                    "name": "IsNullExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.IsNullExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.IsNullExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.IsNullExpression\"/>",
                    "id": "IsNullExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.Data.Entity.Query.Expressions.IsNullExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.Data.Entity.Query.Expressions.IsNullExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L856"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.Data.Entity.Query.Expressions.IsNullExpression)",
            "id": "VisitIsNull_IsNullExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitIsNull(IsNullExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.Data.Entity.Query.Expressions.IsNullExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 844,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitIsNull(IsNullExpression isNullExpression)",
              "content.vb": "Public Overridable Function VisitIsNull(isNullExpression As IsNullExpression) As Expression",
              "parameters": [
                {
                  "id": "isNullExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.IsNullExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.IsNullExpression.yml",
                    "name": "IsNullExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.IsNullExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.IsNullExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.IsNullExpression\"/>",
                    "id": "IsNullExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.Data.Entity.Query.Expressions.IsNullExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.Data.Entity.Query.Expressions.IsNullExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L845"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression)",
            "id": "VisitLateralJoin_LateralJoinExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitLateralJoin(LateralJoinExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 373,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitLateralJoin(LateralJoinExpression lateralJoinExpression)",
              "content.vb": "Public Overridable Function VisitLateralJoin(lateralJoinExpression As LateralJoinExpression) As Expression",
              "parameters": [
                {
                  "id": "lateralJoinExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression.yml",
                    "name": "LateralJoinExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression\"/>",
                    "id": "LateralJoinExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.Data.Entity.Query.Expressions.LateralJoinExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L374"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.Data.Entity.Query.Expressions.LikeExpression)",
            "id": "VisitLike_LikeExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitLike(LikeExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.Data.Entity.Query.Expressions.LikeExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 866,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitLike(LikeExpression likeExpression)",
              "content.vb": "Public Overridable Function VisitLike(likeExpression As LikeExpression) As Expression",
              "parameters": [
                {
                  "id": "likeExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.LikeExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.LikeExpression.yml",
                    "name": "LikeExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.LikeExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.LikeExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.LikeExpression\"/>",
                    "id": "LikeExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.Data.Entity.Query.Expressions.LikeExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.Data.Entity.Query.Expressions.LikeExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L867"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLiteral(Microsoft.Data.Entity.Query.Expressions.LiteralExpression)",
            "id": "VisitLiteral_LiteralExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitLiteral(LiteralExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLiteral(Microsoft.Data.Entity.Query.Expressions.LiteralExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 879,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitLiteral(LiteralExpression literalExpression)",
              "content.vb": "Public Overridable Function VisitLiteral(literalExpression As LiteralExpression) As Expression",
              "parameters": [
                {
                  "id": "literalExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.LiteralExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.LiteralExpression.yml",
                    "name": "LiteralExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.LiteralExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.LiteralExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.LiteralExpression\"/>",
                    "id": "LiteralExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLiteral(Microsoft.Data.Entity.Query.Expressions.LiteralExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitLiteral(Microsoft.Data.Entity.Query.Expressions.LiteralExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L880"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.Data.Entity.Query.Expressions.MaxExpression)",
            "id": "VisitMax_MaxExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitMax(MaxExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.Data.Entity.Query.Expressions.MaxExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 419,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitMax(MaxExpression maxExpression)",
              "content.vb": "Public Overridable Function VisitMax(maxExpression As MaxExpression) As Expression",
              "parameters": [
                {
                  "id": "maxExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.MaxExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.MaxExpression.yml",
                    "name": "MaxExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.MaxExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.MaxExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.MaxExpression\"/>",
                    "id": "MaxExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.Data.Entity.Query.Expressions.MaxExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.Data.Entity.Query.Expressions.MaxExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L420"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.Data.Entity.Query.Expressions.MinExpression)",
            "id": "VisitMin_MinExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitMin(MinExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.Data.Entity.Query.Expressions.MinExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 406,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitMin(MinExpression minExpression)",
              "content.vb": "Public Overridable Function VisitMin(minExpression As MinExpression) As Expression",
              "parameters": [
                {
                  "id": "minExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.MinExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.MinExpression.yml",
                    "name": "MinExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.MinExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.MinExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.MinExpression\"/>",
                    "id": "MinExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.Data.Entity.Query.Expressions.MinExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.Data.Entity.Query.Expressions.MinExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L407"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.Data.Entity.Query.Expressions.InExpression)",
            "id": "VisitNotIn_InExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitNotIn(InExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.Data.Entity.Query.Expressions.InExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 487,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected virtual Expression VisitNotIn(InExpression inExpression)",
              "content.vb": "Protected Overridable Function VisitNotIn(inExpression As InExpression) As Expression",
              "parameters": [
                {
                  "id": "inExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.InExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.InExpression.yml",
                    "name": "InExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.InExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.InExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.InExpression\"/>",
                    "id": "InExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.Data.Entity.Query.Expressions.InExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.Data.Entity.Query.Expressions.InExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L488"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitOuterJoin(Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression)",
            "id": "VisitOuterJoin_LeftOuterJoinExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitOuterJoin(LeftOuterJoinExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitOuterJoin(Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 621,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitOuterJoin(LeftOuterJoinExpression leftOuterJoinExpression)",
              "content.vb": "Public Overridable Function VisitOuterJoin(leftOuterJoinExpression As LeftOuterJoinExpression) As Expression",
              "parameters": [
                {
                  "id": "leftOuterJoinExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression.yml",
                    "name": "LeftOuterJoinExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression\"/>",
                    "id": "LeftOuterJoinExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitOuterJoin(Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitOuterJoin(Microsoft.Data.Entity.Query.Expressions.LeftOuterJoinExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L622"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)",
            "id": "VisitParameter_ParameterExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitParameter(ParameterExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 960,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected override Expression VisitParameter(ParameterExpression expression)",
              "content.vb": "Protected Overrides Function VisitParameter(expression As ParameterExpression) As Expression",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.ParameterExpression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ParameterExpression",
                    "fullName": "System.Linq.Expressions.ParameterExpression",
                    "specName": "<xref href=\"System.Linq.Expressions.ParameterExpression\" name=\"System.Linq.Expressions.ParameterExpression\"/>",
                    "id": "ParameterExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "overridden": "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L961"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.Data.Entity.Query.Expressions.SelectExpression)",
            "id": "VisitSelect_SelectExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitSelect(SelectExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.Data.Entity.Query.Expressions.SelectExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 100,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitSelect(SelectExpression selectExpression)",
              "content.vb": "Public Overridable Function VisitSelect(selectExpression As SelectExpression) As Expression",
              "parameters": [
                {
                  "id": "selectExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "parent": "Microsoft.Data.Entity.Query.Expressions",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.SelectExpression.yml",
                    "name": "SelectExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.SelectExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SelectExpression\"/>",
                    "id": "SelectExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.Data.Entity.Query.Expressions.SelectExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.Data.Entity.Query.Expressions.SelectExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L101"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression)",
            "id": "VisitSqlFunction_SqlFunctionExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitSqlFunction(SqlFunctionExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 888,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression)",
              "content.vb": "Public Overridable Function VisitSqlFunction(sqlFunctionExpression As SqlFunctionExpression) As Expression",
              "parameters": [
                {
                  "id": "sqlFunctionExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression.yml",
                    "name": "SqlFunctionExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression\"/>",
                    "id": "SqlFunctionExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.Data.Entity.Query.Expressions.SqlFunctionExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L889"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.Data.Entity.Query.Expressions.StringCompareExpression)",
            "id": "VisitStringCompare_StringCompareExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitStringCompare(StringCompareExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.Data.Entity.Query.Expressions.StringCompareExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 432,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitStringCompare(StringCompareExpression stringCompareExpression)",
              "content.vb": "Public Overridable Function VisitStringCompare(stringCompareExpression As StringCompareExpression) As Expression",
              "parameters": [
                {
                  "id": "stringCompareExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.StringCompareExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.StringCompareExpression.yml",
                    "name": "StringCompareExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.StringCompareExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.StringCompareExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.StringCompareExpression\"/>",
                    "id": "StringCompareExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.Data.Entity.Query.Expressions.StringCompareExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.Data.Entity.Query.Expressions.StringCompareExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L433"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.Data.Entity.Query.Expressions.SumExpression)",
            "id": "VisitSum_SumExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitSum(SumExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.Data.Entity.Query.Expressions.SumExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 393,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitSum(SumExpression sumExpression)",
              "content.vb": "Public Overridable Function VisitSum(sumExpression As SumExpression) As Expression",
              "parameters": [
                {
                  "id": "sumExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.SumExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.SumExpression.yml",
                    "name": "SumExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.SumExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.SumExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.SumExpression\"/>",
                    "id": "SumExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.Data.Entity.Query.Expressions.SumExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.Data.Entity.Query.Expressions.SumExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L394"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.Data.Entity.Query.Expressions.TableExpression)",
            "id": "VisitTable_TableExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitTable(TableExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.Data.Entity.Query.Expressions.TableExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 345,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "public virtual Expression VisitTable(TableExpression tableExpression)",
              "content.vb": "Public Overridable Function VisitTable(tableExpression As TableExpression) As Expression",
              "parameters": [
                {
                  "id": "tableExpression",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.Expressions.TableExpression",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.Expressions.TableExpression.yml",
                    "name": "TableExpression",
                    "fullName": "Microsoft.Data.Entity.Query.Expressions.TableExpression",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Expressions.TableExpression\" name=\"Microsoft.Data.Entity.Query.Expressions.TableExpression\"/>",
                    "id": "TableExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.Data.Entity.Query.Expressions.TableExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.Data.Entity.Query.Expressions.TableExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L346"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)",
            "id": "VisitUnary_UnaryExpression_",
            "parent": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
            "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
            "name": "VisitUnary(UnaryExpression)",
            "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
              "startLine": 900,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Relational"
            ],
            "namespace": "Microsoft.Data.Entity.Query.Sql",
            "syntax": {
              "content": "protected override Expression VisitUnary(UnaryExpression expression)",
              "content.vb": "Protected Overrides Function VisitUnary(expression As UnaryExpression) As Expression",
              "parameters": [
                {
                  "id": "expression",
                  "type": {
                    "uid": "System.Linq.Expressions.UnaryExpression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "UnaryExpression",
                    "fullName": "System.Linq.Expressions.UnaryExpression",
                    "specName": "<xref href=\"System.Linq.Expressions.UnaryExpression\" name=\"System.Linq.Expressions.UnaryExpression\"/>",
                    "id": "UnaryExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "overridden": "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L901"
          }
        ]
      }
    ],
    "href": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator.yml",
    "name": "DefaultQuerySqlGenerator",
    "fullName": "Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator",
    "type": "Class",
    "source": {
      "remote": {
        "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
        "branch": "dev",
        "repo": "https://github.com/chenkennt/EntityFramework.git"
      },
      "path": "src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs",
      "startLine": 19,
      "endLine": 0,
      "isExternal": false
    },
    "assemblies": [
      "EntityFramework.Relational"
    ],
    "namespace": "Microsoft.Data.Entity.Query.Sql",
    "syntax": {
      "content": "public class DefaultQuerySqlGenerator : ThrowingExpressionVisitor, ISqlExpressionVisitor, IQuerySqlGenerator",
      "content.vb": "Public Class DefaultQuerySqlGenerator Inherits ThrowingExpressionVisitor Implements ISqlExpressionVisitor, IQuerySqlGenerator"
    },
    "inheritance": [
      {
        "uid": "System.Object",
        "parent": "System",
        "isExternal": true,
        "name": "Object",
        "fullName": "System.Object",
        "specName": "<xref href=\"System.Object\" name=\"System.Object\"/>",
        "id": "Object",
        "level": 0,
        "index": 0
      },
      {
        "uid": "System.Linq.Expressions.ExpressionVisitor",
        "parent": "System.Linq.Expressions",
        "isExternal": true,
        "name": "ExpressionVisitor",
        "fullName": "System.Linq.Expressions.ExpressionVisitor",
        "specName": "<xref href=\"System.Linq.Expressions.ExpressionVisitor\" name=\"System.Linq.Expressions.ExpressionVisitor\"/>",
        "id": "ExpressionVisitor",
        "level": 0,
        "index": 1
      },
      {
        "uid": "Remotion.Linq.Parsing.RelinqExpressionVisitor",
        "parent": "Remotion.Linq.Parsing",
        "isExternal": true,
        "name": "RelinqExpressionVisitor",
        "fullName": "Remotion.Linq.Parsing.RelinqExpressionVisitor",
        "specName": "<xref href=\"Remotion.Linq.Parsing.RelinqExpressionVisitor\" name=\"Remotion.Linq.Parsing.RelinqExpressionVisitor\"/>",
        "id": "RelinqExpressionVisitor",
        "level": 0,
        "index": 2
      },
      {
        "uid": "Remotion.Linq.Parsing.ThrowingExpressionVisitor",
        "parent": "Remotion.Linq.Parsing",
        "isExternal": true,
        "name": "ThrowingExpressionVisitor",
        "fullName": "Remotion.Linq.Parsing.ThrowingExpressionVisitor",
        "specName": "<xref href=\"Remotion.Linq.Parsing.ThrowingExpressionVisitor\" name=\"Remotion.Linq.Parsing.ThrowingExpressionVisitor\"/>",
        "id": "ThrowingExpressionVisitor",
        "level": 0,
        "index": 3
      }
    ],
    "implements": [
      "Microsoft.Data.Entity.Query.Sql.ISqlExpressionVisitor",
      "Microsoft.Data.Entity.Query.Sql.IQuerySqlGenerator"
    ],
    "inheritedMembers": [
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2({TItem},System.String,System.Func{{TItem},{TResult}})",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{{T}})",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)",
      "Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)",
      "Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})",
      "System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})",
      "System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)",
      "System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)",
      "System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)",
      "System.Object.ToString",
      "System.Object.Equals(System.Object)",
      "System.Object.Equals(System.Object,System.Object)",
      "System.Object.ReferenceEquals(System.Object,System.Object)",
      "System.Object.GetHashCode",
      "System.Object.GetType",
      "System.Object.MemberwiseClone"
    ],
    "specName": "<xref href=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator\" name=\"Microsoft.Data.Entity.Query.Sql.DefaultQuerySqlGenerator\"/>",
    "level": 4,
    "docurl": "",
    "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Relational/Query/Sql/DefaultQuerySqlGenerator.cs/#L20"
  },
  "isClass": true,
  "_allowToc": true
}
