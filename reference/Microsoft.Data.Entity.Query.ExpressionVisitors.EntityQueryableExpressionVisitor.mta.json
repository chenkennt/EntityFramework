
{
  "_lang": "csharp",
  "_tocPath": "reference/toc.html",
  "_navPath": "toc.html",
  "_rel": "../",
  "_navRel": "../toc.html",
  "_tocRel": "toc.html",
  "_appTitle": "Entity Framework",
  "item": {
    "uid": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor",
    "id": "EntityQueryableExpressionVisitor",
    "parent": "Microsoft.Data.Entity.Query.ExpressionVisitors",
    "children": [
      {
        "title": "Constructors",
        "id": "constructors",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.#ctor(Microsoft.Data.Entity.Query.EntityQueryModelVisitor)",
            "id": "EntityQueryableExpressionVisitor_EntityQueryModelVisitor_",
            "parent": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor",
            "href": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.yml",
            "name": "EntityQueryableExpressionVisitor(EntityQueryModelVisitor)",
            "fullName": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.EntityQueryableExpressionVisitor(Microsoft.Data.Entity.Query.EntityQueryModelVisitor)",
            "type": "constructor",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs",
              "startLine": 16,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Query.ExpressionVisitors",
            "syntax": {
              "content": "protected EntityQueryableExpressionVisitor(EntityQueryModelVisitor entityQueryModelVisitor)",
              "content.vb": "Protected Sub New(entityQueryModelVisitor As EntityQueryModelVisitor)",
              "parameters": [
                {
                  "id": "entityQueryModelVisitor",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.EntityQueryModelVisitor",
                    "parent": "Microsoft.Data.Entity.Query",
                    "isExternal": false,
                    "href": "Microsoft.Data.Entity.Query.EntityQueryModelVisitor.yml",
                    "name": "EntityQueryModelVisitor",
                    "fullName": "Microsoft.Data.Entity.Query.EntityQueryModelVisitor",
                    "type": "class",
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.EntityQueryModelVisitor\" name=\"Microsoft.Data.Entity.Query.EntityQueryModelVisitor\"/>",
                    "id": "EntityQueryModelVisitor",
                    "level": 0
                  }
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.#ctor(Microsoft.Data.Entity.Query.EntityQueryModelVisitor)\" name=\"Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.EntityQueryableExpressionVisitor(Microsoft.Data.Entity.Query.EntityQueryModelVisitor)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs/#L17"
          }
        ]
      },
      {
        "title": "Methods",
        "id": "methods",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)",
            "id": "VisitConstant_ConstantExpression_",
            "parent": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor",
            "href": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.yml",
            "name": "VisitConstant(ConstantExpression)",
            "fullName": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs",
              "startLine": 21,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Query.ExpressionVisitors",
            "syntax": {
              "content": "protected override Expression VisitConstant(ConstantExpression node)",
              "content.vb": "Protected Overrides Function VisitConstant(node As ConstantExpression) As Expression",
              "parameters": [
                {
                  "id": "node",
                  "type": {
                    "uid": "System.Linq.Expressions.ConstantExpression",
                    "parent": "System.Linq.Expressions",
                    "isExternal": true,
                    "name": "ConstantExpression",
                    "fullName": "System.Linq.Expressions.ConstantExpression",
                    "specName": "<xref href=\"System.Linq.Expressions.ConstantExpression\" name=\"System.Linq.Expressions.ConstantExpression\"/>",
                    "id": "ConstantExpression",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "overridden": "System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)",
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)\" name=\"Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs/#L22"
          },
          {
            "uid": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitEntityQueryable(System.Type)",
            "id": "VisitEntityQueryable_Type_",
            "parent": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor",
            "href": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.yml",
            "name": "VisitEntityQueryable(Type)",
            "fullName": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitEntityQueryable(System.Type)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs",
              "startLine": 27,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity.Query.ExpressionVisitors",
            "syntax": {
              "content": "protected abstract Expression VisitEntityQueryable(Type elementType)",
              "content.vb": "Protected MustOverride Function VisitEntityQueryable(elementType As Type) As Expression",
              "parameters": [
                {
                  "id": "elementType",
                  "type": {
                    "uid": "System.Type",
                    "parent": "System",
                    "isExternal": true,
                    "name": "Type",
                    "fullName": "System.Type",
                    "specName": "<xref href=\"System.Type\" name=\"System.Type\"/>",
                    "id": "Type",
                    "level": 0
                  }
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.Expressions.Expression",
                  "parent": "System.Linq.Expressions",
                  "isExternal": true,
                  "name": "Expression",
                  "fullName": "System.Linq.Expressions.Expression",
                  "specName": "<xref href=\"System.Linq.Expressions.Expression\" name=\"System.Linq.Expressions.Expression\"/>",
                  "id": "Expression",
                  "level": 0
                }
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitEntityQueryable(System.Type)\" name=\"Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.VisitEntityQueryable(System.Type)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs/#L28"
          }
        ]
      }
    ],
    "href": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor.yml",
    "name": "EntityQueryableExpressionVisitor",
    "fullName": "Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor",
    "type": "Class",
    "source": {
      "remote": {
        "path": "src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs",
        "branch": "dev",
        "repo": "https://github.com/chenkennt/EntityFramework.git"
      },
      "path": "src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs",
      "startLine": 14,
      "endLine": 0,
      "isExternal": false
    },
    "assemblies": [
      "EntityFramework.Core"
    ],
    "namespace": "Microsoft.Data.Entity.Query.ExpressionVisitors",
    "syntax": {
      "content": "public abstract class EntityQueryableExpressionVisitor : DefaultQueryExpressionVisitor",
      "content.vb": "Public MustInherit Class EntityQueryableExpressionVisitor Inherits DefaultQueryExpressionVisitor"
    },
    "inheritance": [
      {
        "uid": "System.Object",
        "parent": "System",
        "isExternal": true,
        "name": "Object",
        "fullName": "System.Object",
        "specName": "<xref href=\"System.Object\" name=\"System.Object\"/>",
        "id": "Object",
        "level": 0,
        "index": 0
      },
      {
        "uid": "System.Linq.Expressions.ExpressionVisitor",
        "parent": "System.Linq.Expressions",
        "isExternal": true,
        "name": "ExpressionVisitor",
        "fullName": "System.Linq.Expressions.ExpressionVisitor",
        "specName": "<xref href=\"System.Linq.Expressions.ExpressionVisitor\" name=\"System.Linq.Expressions.ExpressionVisitor\"/>",
        "id": "ExpressionVisitor",
        "level": 0,
        "index": 1
      },
      {
        "uid": "Remotion.Linq.Parsing.RelinqExpressionVisitor",
        "parent": "Remotion.Linq.Parsing",
        "isExternal": true,
        "name": "RelinqExpressionVisitor",
        "fullName": "Remotion.Linq.Parsing.RelinqExpressionVisitor",
        "specName": "<xref href=\"Remotion.Linq.Parsing.RelinqExpressionVisitor\" name=\"Remotion.Linq.Parsing.RelinqExpressionVisitor\"/>",
        "id": "RelinqExpressionVisitor",
        "level": 0,
        "index": 2
      },
      {
        "uid": "Microsoft.Data.Entity.Query.ExpressionVisitors.ExpressionVisitorBase",
        "isExternal": false,
        "href": "Microsoft.Data.Entity.Query.ExpressionVisitors.ExpressionVisitorBase.yml",
        "name": "ExpressionVisitorBase",
        "fullName": "Microsoft.Data.Entity.Query.ExpressionVisitors.ExpressionVisitorBase",
        "type": "class",
        "specName": "<xref href=\"Microsoft.Data.Entity.Query.ExpressionVisitors.ExpressionVisitorBase\" name=\"Microsoft.Data.Entity.Query.ExpressionVisitors.ExpressionVisitorBase\"/>",
        "id": "ExpressionVisitorBase",
        "level": 0,
        "index": 3
      },
      {
        "uid": "Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor",
        "parent": "Microsoft.Data.Entity.Query.ExpressionVisitors.Internal",
        "isExternal": false,
        "href": "Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.yml",
        "name": "DefaultQueryExpressionVisitor",
        "fullName": "Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor",
        "type": "class",
        "specName": "<xref href=\"Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor\" name=\"Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor\"/>",
        "id": "DefaultQueryExpressionVisitor",
        "level": 0,
        "index": 4
      }
    ],
    "inheritedMembers": [
      "Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.QueryModelVisitor",
      "Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)",
      "Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.CreateQueryModelVisitor",
      "Microsoft.Data.Entity.Query.ExpressionVisitors.Internal.DefaultQueryExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)",
      "Microsoft.Data.Entity.Query.ExpressionVisitors.ExpressionVisitorBase.Visit(System.Linq.Expressions.Expression)",
      "Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})",
      "Remotion.Linq.Parsing.RelinqExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)",
      "Remotion.Linq.Parsing.RelinqExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)",
      "System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})",
      "System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})",
      "System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)",
      "System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)",
      "System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)",
      "System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})",
      "System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)",
      "System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)",
      "System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)",
      "System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)",
      "System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)",
      "System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)",
      "System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)",
      "System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)",
      "System.Object.ToString",
      "System.Object.Equals(System.Object)",
      "System.Object.Equals(System.Object,System.Object)",
      "System.Object.ReferenceEquals(System.Object,System.Object)",
      "System.Object.GetHashCode",
      "System.Object.GetType",
      "System.Object.MemberwiseClone"
    ],
    "specName": "<xref href=\"Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor\" name=\"Microsoft.Data.Entity.Query.ExpressionVisitors.EntityQueryableExpressionVisitor\"/>",
    "level": 5,
    "docurl": "",
    "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/Query/ExpressionVisitors/EntityQueryableExpressionVisitor.cs/#L15"
  },
  "isClass": true,
  "_allowToc": true
}
