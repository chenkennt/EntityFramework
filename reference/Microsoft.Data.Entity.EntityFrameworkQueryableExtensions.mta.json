
{
  "_lang": "csharp",
  "_tocPath": "reference/toc.html",
  "_navPath": "toc.html",
  "_rel": "../",
  "_navRel": "../toc.html",
  "_tocRel": "toc.html",
  "_appTitle": "Entity Framework",
  "item": {
    "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
    "id": "EntityFrameworkQueryableExtensions",
    "parent": "Microsoft.Data.Entity",
    "children": [
      {
        "title": "Methods",
        "id": "methods",
        "children": [
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "AllAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "AllAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AllAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AllAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 116,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously determines whether all the elements of a sequence satisfy a condition.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<bool> AllAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AllAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to test for a condition.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test each element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Boolean}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Boolean>",
                  "name.vb": "Task(Of Boolean)",
                  "fullName": "System.Threading.Tasks.Task<System.Boolean>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Boolean)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;",
                  "id": "Task_Boolean_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains <c>true</c> if every element of the source sequence passes the test in the specified\npredicate; otherwise, <c>false</c>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AllAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L117"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "AnyAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "AnyAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 81,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously determines whether any element of a sequence satisfies a condition.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<bool> AnyAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AnyAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to test for a condition.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test each element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Boolean}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Boolean>",
                  "name.vb": "Task(Of Boolean)",
                  "fullName": "System.Threading.Tasks.Task<System.Boolean>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Boolean)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;",
                  "id": "Task_Boolean_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains <c>true</c> if any elements in the source sequence pass the test in the specified\npredicate; otherwise, <c>false</c>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L82"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "AnyAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AnyAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "AnyAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 48,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously determines whether a sequence contains any elements.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<bool> AnyAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AnyAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to check for being empty.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Boolean}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Boolean>",
                  "name.vb": "Task(Of Boolean)",
                  "fullName": "System.Threading.Tasks.Task<System.Boolean>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Boolean)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;",
                  "id": "Task_Boolean_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains <c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AnyAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L49"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})",
            "id": "AsAsyncEnumerable_TSource__IQueryable_TSource__",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AsAsyncEnumerable<TSource>(IQueryable<TSource>)",
            "name.vb": "AsAsyncEnumerable(Of TSource)(IQueryable(Of TSource))",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsAsyncEnumerable<TSource>(System.Linq.IQueryable<TSource>)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsAsyncEnumerable(Of TSource)(System.Linq.IQueryable(Of TSource))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2372,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Provides an <xref href=\"System.Collections.Generic.IAsyncEnumerable`1\"></xref> that allows asynchronous enumeration\nof the query. This method is typically not used in application code. <xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)\"></xref>\nprovides a simple way to asynchronously enumerate the results of a query.</p>\n",
            "syntax": {
              "content": "public static IAsyncEnumerable<TSource> AsAsyncEnumerable<TSource>(IQueryable<TSource> source)",
              "content.vb": "Public Shared Function AsAsyncEnumerable(Of TSource)(source As IQueryable(Of TSource)) As IAsyncEnumerable(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to create the <xref href=\"System.Collections.Generic.IAsyncEnumerable`1\"></xref> from.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Collections.Generic.IAsyncEnumerable{{TSource}}",
                  "parent": "System.Collections.Generic",
                  "definition": "System.Collections.Generic.IAsyncEnumerable`1",
                  "name": "IAsyncEnumerable<TSource>",
                  "name.vb": "IAsyncEnumerable(Of TSource)",
                  "fullName": "System.Collections.Generic.IAsyncEnumerable<TSource>",
                  "fullName.vb": "System.Collections.Generic.IAsyncEnumerable(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Collections.Generic.IAsyncEnumerable`1",
                      "name": "IAsyncEnumerable",
                      "fullName": "System.Collections.Generic.IAsyncEnumerable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Collections.Generic.IAsyncEnumerable`1",
                      "name": "IAsyncEnumerable",
                      "fullName": "System.Collections.Generic.IAsyncEnumerable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Collections.Generic.IAsyncEnumerable`1\" name=\"System.Collections.Generic.IAsyncEnumerable\"/>&lt;TSource&gt;",
                  "id": "IAsyncEnumerable_TSource_",
                  "level": 0
                },
                "description": "<p>An object to asynchronously enumerate the results.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsAsyncEnumerable&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2373"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})",
            "id": "AsNoTracking_TEntity__IQueryable_TEntity__",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AsNoTracking<TEntity>(IQueryable<TEntity>)",
            "name.vb": "AsNoTracking(Of TEntity)(IQueryable(Of TEntity))",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsNoTracking<TEntity>(System.Linq.IQueryable<TEntity>)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsNoTracking(Of TEntity)(System.Linq.IQueryable(Of TEntity))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2426,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<para>\nReturns a new query where the change tracker will not track any of the entities that are returned.\nIf the entity instances are modified, this will not be detected by the change tracker and\n<xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref> will not persist those changes to the database.\n</para>\n<para>\nDisabling change tracking is useful for read-only scenarios because it avoids the overhead of setting\nup change tracking for each entity instance. You should not disable change tracking if you want to\nmanipulate entity instances and persist those changes to the database using\n<xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref>.\n</para>\n<para>\nIdentity resolution will still be performed to ensure that all occurrences of an entity with a given key\nin the result set are represented by the same entity instance.\n</para>\n<para>\nThe default tracking behavior for queries can be controlled by <xref href=\"Microsoft.Data.Entity.ChangeTracking.ChangeTracker.QueryTrackingBehavior\"></xref>.\n</para>",
            "syntax": {
              "content": "public static IQueryable<TEntity> AsNoTracking<TEntity>(IQueryable<TEntity> source)where TEntity : class",
              "content.vb": "Public Shared Function AsNoTracking(Of TEntity As Class)(source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TEntity}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TEntity>",
                    "name.vb": "IQueryable(Of TEntity)",
                    "fullName": "System.Linq.IQueryable<TEntity>",
                    "fullName.vb": "System.Linq.IQueryable(Of TEntity)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TEntity&gt;",
                    "id": "IQueryable_TEntity_",
                    "level": 0
                  },
                  "description": "<p>The source query.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TEntity",
                  "description": "The type of entity being queried."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.IQueryable{{TEntity}}",
                  "parent": "System.Linq",
                  "definition": "System.Linq.IQueryable`1",
                  "name": "IQueryable<TEntity>",
                  "name.vb": "IQueryable(Of TEntity)",
                  "fullName": "System.Linq.IQueryable<TEntity>",
                  "fullName.vb": "System.Linq.IQueryable(Of TEntity)",
                  "spec.csharp": [
                    {
                      "uid": "System.Linq.IQueryable`1",
                      "name": "IQueryable",
                      "fullName": "System.Linq.IQueryable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Linq.IQueryable`1",
                      "name": "IQueryable",
                      "fullName": "System.Linq.IQueryable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TEntity&gt;",
                  "id": "IQueryable_TEntity_",
                  "level": 0
                },
                "description": "<p>A new query where the result set will not be tracked by the context.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsNoTracking&lt;TEntity&gt;(System.Linq.IQueryable&lt;TEntity&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2427"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})",
            "id": "AsTracking_TEntity__IQueryable_TEntity__",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AsTracking<TEntity>(IQueryable<TEntity>)",
            "name.vb": "AsTracking(Of TEntity)(IQueryable(Of TEntity))",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsTracking<TEntity>(System.Linq.IQueryable<TEntity>)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsTracking(Of TEntity)(System.Linq.IQueryable(Of TEntity))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2454,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<para>\nReturns a new query where the change tracker will keep track of changes for all entities that are returned.\nAny modification to the entity instances will be detected and persisted to the database during\n<xref href=\"Microsoft.Data.Entity.DbContext.SaveChanges\"></xref>.\n</para>\n<para>\nThe default tracking behavior for queries can be controlled by <xref href=\"Microsoft.Data.Entity.ChangeTracking.ChangeTracker.QueryTrackingBehavior\"></xref>.\n</para>",
            "syntax": {
              "content": "public static IQueryable<TEntity> AsTracking<TEntity>(IQueryable<TEntity> source)where TEntity : class",
              "content.vb": "Public Shared Function AsTracking(Of TEntity As Class)(source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TEntity}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TEntity>",
                    "name.vb": "IQueryable(Of TEntity)",
                    "fullName": "System.Linq.IQueryable<TEntity>",
                    "fullName.vb": "System.Linq.IQueryable(Of TEntity)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TEntity&gt;",
                    "id": "IQueryable_TEntity_",
                    "level": 0
                  },
                  "description": "<p>The source query.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TEntity",
                  "description": "The type of entity being queried."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Linq.IQueryable{{TEntity}}",
                  "parent": "System.Linq",
                  "definition": "System.Linq.IQueryable`1",
                  "name": "IQueryable<TEntity>",
                  "name.vb": "IQueryable(Of TEntity)",
                  "fullName": "System.Linq.IQueryable<TEntity>",
                  "fullName.vb": "System.Linq.IQueryable(Of TEntity)",
                  "spec.csharp": [
                    {
                      "uid": "System.Linq.IQueryable`1",
                      "name": "IQueryable",
                      "fullName": "System.Linq.IQueryable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Linq.IQueryable`1",
                      "name": "IQueryable",
                      "fullName": "System.Linq.IQueryable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TEntity&gt;",
                  "id": "IQueryable_TEntity_",
                  "level": 0
                },
                "description": "<p>A new query where the result set will not be tracked by the context.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AsTracking&lt;TEntity&gt;(System.Linq.IQueryable&lt;TEntity&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2455"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Decimal___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Decimal>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Decimal), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Decimal>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Decimal), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1469,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<decimal> AverageAsync(IQueryable<decimal> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Decimal), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Decimal}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Decimal>",
                    "name.vb": "IQueryable(Of Decimal)",
                    "fullName": "System.Linq.IQueryable<System.Decimal>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Decimal)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;",
                    "id": "IQueryable_Decimal_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Decimal}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Decimal>",
                  "name.vb": "Task(Of Decimal)",
                  "fullName": "System.Threading.Tasks.Task<System.Decimal>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Decimal)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;",
                  "id": "Task_Decimal_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Decimal&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1470"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Double___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Double>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Double), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Double>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Double), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1835,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double> AverageAsync(IQueryable<double> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Double), cancellationToken As CancellationToken = Nothing) As Task(Of Double)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Double}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Double>",
                    "name.vb": "IQueryable(Of Double)",
                    "fullName": "System.Linq.IQueryable<System.Double>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Double)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                    "id": "IQueryable_Double_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Double}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Double>",
                  "name.vb": "Task(Of Double)",
                  "fullName": "System.Threading.Tasks.Task<System.Double>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Double)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                  "id": "Task_Double_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Double&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1836"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Int32___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Int32>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Int32), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Int32>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Int32), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1591,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double> AverageAsync(IQueryable<int> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Integer), cancellationToken As CancellationToken = Nothing) As Task(Of Double)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Int32}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Int32>",
                    "name.vb": "IQueryable(Of Int32)",
                    "fullName": "System.Linq.IQueryable<System.Int32>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Int32)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;",
                    "id": "IQueryable_Int32_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Double}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Double>",
                  "name.vb": "Task(Of Double)",
                  "fullName": "System.Threading.Tasks.Task<System.Double>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Double)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                  "id": "Task_Double_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Int32&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1592"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Int64___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Int64>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Int64), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Int64>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Int64), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1713,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double> AverageAsync(IQueryable<long> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Long), cancellationToken As CancellationToken = Nothing) As Task(Of Double)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Int64}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Int64>",
                    "name.vb": "IQueryable(Of Int64)",
                    "fullName": "System.Linq.IQueryable<System.Int64>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Int64)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;",
                    "id": "IQueryable_Int64_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Double}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Double>",
                  "name.vb": "Task(Of Double)",
                  "fullName": "System.Threading.Tasks.Task<System.Double>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Double)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                  "id": "Task_Double_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Int64&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1714"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Nullable_Decimal____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Nullable(Of Decimal)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Decimal>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1497,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<decimal ? > AverageAsync(IQueryable<decimal ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Decimal?), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Decimal}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Decimal>>",
                    "name.vb": "IQueryable(Of Nullable(Of Decimal))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Decimal>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Decimal))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Decimal__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Decimal}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Decimal>>",
                  "name.vb": "Task(Of Nullable(Of Decimal))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Decimal>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Decimal))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;",
                  "id": "Task_Nullable_Decimal__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1498"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Nullable_Double____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Nullable<Double>>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Nullable(Of Double)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Double>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Double)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1863,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double ? > AverageAsync(IQueryable<double ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Double?), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Double}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Double>>",
                    "name.vb": "IQueryable(Of Nullable(Of Double))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Double>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Double))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Double__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Double}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Double>>",
                  "name.vb": "Task(Of Nullable(Of Double))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Double>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                  "id": "Task_Nullable_Double__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1864"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Nullable_Int32____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Nullable(Of Int32)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Int32>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1619,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double ? > AverageAsync(IQueryable<int ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Integer?), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Int32}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Int32>>",
                    "name.vb": "IQueryable(Of Nullable(Of Int32))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Int32>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Int32))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Int32__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Double}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Double>>",
                  "name.vb": "Task(Of Nullable(Of Double))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Double>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                  "id": "Task_Nullable_Double__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1620"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Nullable_Int64____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Nullable(Of Int64)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Int64>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1741,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double ? > AverageAsync(IQueryable<long ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Long?), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Int64}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Int64>>",
                    "name.vb": "IQueryable(Of Nullable(Of Int64))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Int64>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Int64))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Int64__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Double}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Double>>",
                  "name.vb": "Task(Of Nullable(Of Double))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Double>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                  "id": "Task_Nullable_Double__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1742"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Nullable_Single____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Nullable<Single>>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Nullable(Of Single)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Single>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Single)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1985,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<float ? > AverageAsync(IQueryable<float ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Single?), cancellationToken As CancellationToken = Nothing) As Task(Of Single?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Single}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Single>>",
                    "name.vb": "IQueryable(Of Nullable(Of Single))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Single>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Single))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Single__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Single}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Single>>",
                  "name.vb": "Task(Of Nullable(Of Single))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Single>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Single))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;",
                  "id": "Task_Nullable_Single__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1986"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)",
            "id": "AverageAsync_IQueryable_Single___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync(IQueryable<Single>, CancellationToken)",
            "name.vb": "AverageAsync(IQueryable(Of Single), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Single>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Single), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1957,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<float> AverageAsync(IQueryable<float> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(source As IQueryable(Of Single), cancellationToken As CancellationToken = Nothing) As Task(Of Single)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Single}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Single>",
                    "name.vb": "IQueryable(Of Single)",
                    "fullName": "System.Linq.IQueryable<System.Single>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Single)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;",
                    "id": "IQueryable_Single_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the average of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Single}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Single>",
                  "name.vb": "Task(Of Single)",
                  "fullName": "System.Threading.Tasks.Task<System.Single>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Single)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;",
                  "id": "Task_Single_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable&lt;System.Single&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1958"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Decimal____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Decimal)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1528,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<decimal> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal)), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Decimal>>",
                    "name.vb": "Expression(Of Func(Of TSource, Decimal))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Decimal__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Decimal}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Decimal>",
                  "name.vb": "Task(Of Decimal)",
                  "fullName": "System.Threading.Tasks.Task<System.Decimal>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Decimal)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;",
                  "id": "Task_Decimal_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Decimal&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1529"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Double____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Double)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1894,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double)), cancellationToken As CancellationToken = Nothing) As Task(Of Double)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Double>>",
                    "name.vb": "Expression(Of Func(Of TSource, Double))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Double__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Double}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Double>",
                  "name.vb": "Task(Of Double)",
                  "fullName": "System.Threading.Tasks.Task<System.Double>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Double)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                  "id": "Task_Double_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Double&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1895"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Int32____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1650,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer)), cancellationToken As CancellationToken = Nothing) As Task(Of Double)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Int32>>",
                    "name.vb": "Expression(Of Func(Of TSource, Int32))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Int32__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Double}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Double>",
                  "name.vb": "Task(Of Double)",
                  "fullName": "System.Threading.Tasks.Task<System.Double>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Double)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                  "id": "Task_Double_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Int32&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1651"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Int64____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int64)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1772,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long)), cancellationToken As CancellationToken = Nothing) As Task(Of Double)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Int64>>",
                    "name.vb": "Expression(Of Func(Of TSource, Int64))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Int64__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Double}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Double>",
                  "name.vb": "Task(Of Double)",
                  "fullName": "System.Threading.Tasks.Task<System.Double>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Double)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                  "id": "Task_Double_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Int64&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1773"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Decimal_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1561,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<decimal ? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal?)), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Decimal>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Decimal)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Decimal___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Decimal}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Decimal>>",
                  "name.vb": "Task(Of Nullable(Of Decimal))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Decimal>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Decimal))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;",
                  "id": "Task_Nullable_Decimal__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Decimal&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1562"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Double_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1927,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double ? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double?)), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Double>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Double)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Double___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Double}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Double>>",
                  "name.vb": "Task(Of Nullable(Of Double))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Double>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                  "id": "Task_Nullable_Double__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Double&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1928"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Int32_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1683,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double ? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer?)), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Int32>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Int32)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Int32___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Double}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Double>>",
                  "name.vb": "Task(Of Nullable(Of Double))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Double>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                  "id": "Task_Nullable_Double__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Int32&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1684"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Int64_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1805,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double ? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long?)), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Int64>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Int64)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Int64___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Double}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Double>>",
                  "name.vb": "Task(Of Nullable(Of Double))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Double>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                  "id": "Task_Nullable_Double__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Int64&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1806"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Single_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2049,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<float ? > AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single?)), cancellationToken As CancellationToken = Nothing) As Task(Of Single?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Single>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Single)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Single___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Single}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Single>>",
                  "name.vb": "Task(Of Nullable(Of Single))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Single>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Single))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;",
                  "id": "Task_Nullable_Single__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Single&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2050"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)",
            "id": "AverageAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Single____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken)",
            "name.vb": "AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Single)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2016,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<float> AverageAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single)), cancellationToken As CancellationToken = Nothing) As Task(Of Single)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Single>>",
                    "name.vb": "Expression(Of Func(Of TSource, Single))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Single__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Single}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Single>",
                  "name.vb": "Task(Of Single)",
                  "fullName": "System.Threading.Tasks.Task<System.Single>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Single)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;",
                  "id": "Task_Single_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the average of the projected values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.AverageAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Single&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2017"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)",
            "id": "ContainsAsync_TSource__IQueryable_TSource___TSource__CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken)",
            "name.vb": "ContainsAsync(Of TSource)(IQueryable(Of TSource), TSource, CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ContainsAsync<TSource>(System.Linq.IQueryable<TSource>, TSource, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ContainsAsync(Of TSource)(System.Linq.IQueryable(Of TSource), TSource, System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2087,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously determines whether a sequence contains a specified element by using the default equality comparer.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<bool> ContainsAsync<TSource>(IQueryable<TSource> source, TSource item, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function ContainsAsync(Of TSource)(source As IQueryable(Of TSource), item As TSource, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.</p>\n"
                },
                {
                  "id": "item",
                  "type": {
                    "uid": "{TSource}",
                    "isExternal": false,
                    "name": "TSource",
                    "fullName": "TSource",
                    "specName": "<xref href=\"{TSource}\" name=\"TSource\"/>",
                    "id": "TSource",
                    "level": 0
                  },
                  "description": "<p>The object to locate in the sequence.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Boolean}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Boolean>",
                  "name.vb": "Task(Of Boolean)",
                  "fullName": "System.Threading.Tasks.Task<System.Boolean>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Boolean)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Boolean",
                      "name": "Boolean",
                      "fullName": "System.Boolean",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;",
                  "id": "Task_Boolean_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains <c>true</c> if the input sequence contains the specified value; otherwise, <c>false</c>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ContainsAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, TSource, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2088"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "CountAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "CountAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 186,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the number of elements in a sequence that satisfy a condition.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<int> CountAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function CountAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test each element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Int32}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Int32>",
                  "name.vb": "Task(Of Int32)",
                  "fullName": "System.Threading.Tasks.Task<System.Int32>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Int32)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;",
                  "id": "Task_Int32_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the number of elements in the sequence that satisfy the condition in the predicate\nfunction.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L187"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "CountAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "CountAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "CountAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 153,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the number of elements in a sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<int> CountAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function CountAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Int32}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Int32>",
                  "name.vb": "Task(Of Int32)",
                  "fullName": "System.Threading.Tasks.Task<System.Int32>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Int32)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;",
                  "id": "Task_Int32_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the number of elements in the input sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.CountAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L154"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "FirstAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "FirstAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 323,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the first element of a sequence that satisfies a specified condition.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> FirstAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function FirstAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test each element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the first element in <paramref name=\"source\"></paramref> that passes the test in</p>\n<p><paramref name=\"predicate\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L324"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "FirstAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "FirstAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "FirstAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 290,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the first element of a sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> FirstAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function FirstAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the first element in <paramref name=\"source\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L291"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "FirstOrDefaultAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "FirstOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 392,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the first element of a sequence that satisfies a specified condition\nor a default value if no such element is found.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> FirstOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function FirstOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test each element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains <c>default</c> ( <typeparamref name=\"TSource\"></typeparamref> ) if <paramref name=\"source\"></paramref>\nis empty or if no element passes the test specified by <paramref name=\"predicate\"></paramref> ; otherwise, the first\nelement in <paramref name=\"source\"></paramref> that passes the test specified by <paramref name=\"predicate\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L393"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "FirstOrDefaultAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "FirstOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 357,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> FirstOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function FirstOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains <c>default</c> ( <typeparamref name=\"TSource\"></typeparamref> ) if</p>\n<p><paramref name=\"source\"></paramref> is empty; otherwise, the first element in <paramref name=\"source\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L358"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)",
            "id": "ForEachAsync_T__IQueryable_T___Action_T___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ForEachAsync<T>(IQueryable<T>, Action<T>, CancellationToken)",
            "name.vb": "ForEachAsync(Of T)(IQueryable(Of T), Action(Of T), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ForEachAsync<T>(System.Linq.IQueryable<T>, System.Action<T>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ForEachAsync(Of T)(System.Linq.IQueryable(Of T), System.Action(Of T), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2708,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously enumerates the query results and performs the specified action on each element.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task ForEachAsync<T>(IQueryable<T> source, Action<T> action, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function ForEachAsync(Of T)(source As IQueryable(Of T), action As Action(Of T), cancellationToken As CancellationToken = Nothing) As Task",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{T}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<T>",
                    "name.vb": "IQueryable(Of T)",
                    "fullName": "System.Linq.IQueryable<T>",
                    "fullName.vb": "System.Linq.IQueryable(Of T)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "T",
                        "fullName": "T",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "T",
                        "fullName": "T",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;T&gt;",
                    "id": "IQueryable_T_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to enumerate.</p>\n"
                },
                {
                  "id": "action",
                  "type": {
                    "uid": "System.Action{{T}}",
                    "parent": "System",
                    "definition": "System.Action`1",
                    "name": "Action<T>",
                    "name.vb": "Action(Of T)",
                    "fullName": "System.Action<T>",
                    "fullName.vb": "System.Action(Of T)",
                    "spec.csharp": [
                      {
                        "uid": "System.Action`1",
                        "name": "Action",
                        "fullName": "System.Action",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "T",
                        "fullName": "T",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Action`1",
                        "name": "Action",
                        "fullName": "System.Action",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "T",
                        "fullName": "T",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Action`1\" name=\"System.Action\"/>&lt;T&gt;",
                    "id": "Action_T_",
                    "level": 0
                  },
                  "description": "<p>The action to perform on each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "T",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task",
                  "parent": "System.Threading.Tasks",
                  "isExternal": true,
                  "name": "Task",
                  "fullName": "System.Threading.Tasks.Task",
                  "specName": "<xref href=\"System.Threading.Tasks.Task\" name=\"System.Threading.Tasks.Task\"/>",
                  "id": "Task",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ForEachAsync&lt;T&gt;(System.Linq.IQueryable&lt;T&gt;, System.Action&lt;T&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2709"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})",
            "id": "Include_TEntity__TProperty__IQueryable_TEntity___Expression_Func_TEntity__TProperty___",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "Include<TEntity, TProperty>(IQueryable<TEntity>, Expression<Func<TEntity, TProperty>>)",
            "name.vb": "Include(Of TEntity, TProperty)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, TProperty)))",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Include<TEntity, TProperty>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Include(Of TEntity, TProperty)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2213,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Specifies related entities to include in the query results. The navigation property to be included is specified starting with the\ntype of entity being queried (<typeparamref name=\"TEntity\"></typeparamref>). If you wish to include additional types based on the navigation\nproperties of the type being included, then chain a call to\n<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.Data.Entity.Query.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\"></xref>\nafter this call.</p>\n",
            "example": "<para>\nThe following query shows including a single level of related entities.\n<code>\ncontext.Blogs.Include(blog =&gt; blog.Posts);\n</code></para>\n<para>\nThe following query shows including two levels of entities on the same branch.\n<code>\ncontext.Blogs\n.Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags);\n</code></para>\n<para>\nThe following query shows including multiple levels and branches of related data.\n<code>\ncontext.Blogs\n.Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags).ThenInclude(tag =&gt; tag.TagInfo)\n.Include(blog =&gt; blog.Contributors);\n</code></para>",
            "syntax": {
              "content": "public static IIncludableQueryable<TEntity, TProperty> Include<TEntity, TProperty>(IQueryable<TEntity> source, Expression<Func<TEntity, TProperty>> navigationPropertyPath)where TEntity : class",
              "content.vb": "Public Shared Function Include(Of TEntity As Class, TProperty)(source As IQueryable(Of TEntity), navigationPropertyPath As Expression(Of Func(Of TEntity, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TEntity}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TEntity>",
                    "name.vb": "IQueryable(Of TEntity)",
                    "fullName": "System.Linq.IQueryable<TEntity>",
                    "fullName.vb": "System.Linq.IQueryable(Of TEntity)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TEntity&gt;",
                    "id": "IQueryable_TEntity_",
                    "level": 0
                  },
                  "description": "<p>The source query.</p>\n"
                },
                {
                  "id": "navigationPropertyPath",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TEntity},{TProperty}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TEntity, TProperty>>",
                    "name.vb": "Expression(Of Func(Of TEntity, TProperty))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TProperty",
                        "fullName": "TProperty",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TProperty",
                        "fullName": "TProperty",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TEntity, TProperty&gt;&gt;",
                    "id": "Expression_Func_TEntity__TProperty__",
                    "level": 0
                  },
                  "description": "<p>A lambda expression representing the navigation property to be included (<c>t =&gt; t.Property1</c>).</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TEntity",
                  "description": "The type of entity being queried."
                },
                {
                  "id": "TProperty",
                  "description": "The type of the related entity to be included."
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable{{TEntity},{TProperty}}",
                  "parent": "Microsoft.Data.Entity.Query",
                  "definition": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                  "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml",
                  "name": "IIncludableQueryable<TEntity, TProperty>",
                  "name.vb": "IIncludableQueryable(Of TEntity, TProperty)",
                  "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable<TEntity, TProperty>",
                  "fullName.vb": "Microsoft.Data.Entity.Query.IIncludableQueryable(Of TEntity, TProperty)",
                  "spec.csharp": [
                    {
                      "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                      "name": "IIncludableQueryable",
                      "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TProperty",
                      "fullName": "TProperty",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                      "name": "IIncludableQueryable",
                      "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TProperty",
                      "fullName": "TProperty",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.IIncludableQueryable`2\" name=\"Microsoft.Data.Entity.Query.IIncludableQueryable\"/>&lt;TEntity, TProperty&gt;",
                  "id": "IIncludableQueryable_TEntity__TProperty_",
                  "level": 0
                },
                "description": "<p>A new query with the related data included.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Include&lt;TEntity, TProperty&gt;(System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity, TProperty&gt;&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2214"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "LastAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "LastAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "LastAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 462,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the last element of a sequence that satisfies a specified condition.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> LastAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function LastAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test each element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the last element in <paramref name=\"source\"></paramref> that passes the test in</p>\n<p><paramref name=\"predicate\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L463"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "LastAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "LastAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "LastAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 429,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the last element of a sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> LastAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function LastAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the last element in <paramref name=\"source\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L430"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "LastOrDefaultAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "LastOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "LastOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 531,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the last element of a sequence that satisfies a specified condition\nor a default value if no such element is found.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> LastOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function LastOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test each element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains <c>default</c> ( <typeparamref name=\"TSource\"></typeparamref> ) if <paramref name=\"source\"></paramref>\nis empty or if no element passes the test specified by <paramref name=\"predicate\"></paramref> ; otherwise, the last\nelement in <paramref name=\"source\"></paramref> that passes the test specified by <paramref name=\"predicate\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L532"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "LastOrDefaultAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "LastOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "LastOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 496,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the last element of a sequence, or a default value if the sequence contains no elements.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> LastOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function LastOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains <c>default</c> ( <typeparamref name=\"TSource\"></typeparamref> ) if</p>\n<p><paramref name=\"source\"></paramref> is empty; otherwise, the last element in <paramref name=\"source\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LastOrDefaultAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L497"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})",
            "id": "Load_TSource__IQueryable_TSource__",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "Load<TSource>(IQueryable<TSource>)",
            "name.vb": "Load(Of TSource)(IQueryable(Of TSource))",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Load<TSource>(System.Linq.IQueryable<TSource>)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Load(Of TSource)(System.Linq.IQueryable(Of TSource))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2473,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Enumerates the query. When using Entity Framework, this causes the results of the query to\nbe loaded into the associated context. This is equivalent to calling ToList\nand then throwing away the list (without the overhead of actually creating the list).</p>\n",
            "syntax": {
              "content": "public static void Load<TSource>(IQueryable<TSource> source)",
              "content.vb": "Public Shared Sub Load(Of TSource)(source As IQueryable(Of TSource))",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>The source query.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ]
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.Load&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2474"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "LoadAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "LoadAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "LoadAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LoadAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LoadAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2495,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously enumerates the query. When using Entity Framework, this causes the results of the query to\nbe loaded into the associated context. This is equivalent to calling ToList\nand then throwing away the list (without the overhead of actually creating the list).</p>\n",
            "syntax": {
              "content": "public static Task LoadAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function LoadAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>The source query.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task",
                  "parent": "System.Threading.Tasks",
                  "isExternal": true,
                  "name": "Task",
                  "fullName": "System.Threading.Tasks.Task",
                  "specName": "<xref href=\"System.Threading.Tasks.Task\" name=\"System.Threading.Tasks.Task\"/>",
                  "id": "Task",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LoadAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2496"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "LongCountAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "LongCountAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 253,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns an <xref href=\"System.Int64\"></xref> that represents the number of elements in a sequence\nthat satisfy a condition.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<long> LongCountAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function LongCountAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Long)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test each element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Int64}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Int64>",
                  "name.vb": "Task(Of Int64)",
                  "fullName": "System.Threading.Tasks.Task<System.Int64>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Int64)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;",
                  "id": "Task_Int64_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the number of elements in the sequence that satisfy the condition in the predicate\nfunction.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L254"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "LongCountAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "LongCountAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 219,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns an <xref href=\"System.Int64\"></xref> that represents the total number of elements in a sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<long> LongCountAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function LongCountAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of Long)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Int64}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Int64>",
                  "name.vb": "Task(Of Int64)",
                  "fullName": "System.Threading.Tasks.Task<System.Int64>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Int64)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;",
                  "id": "Task_Int64_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the number of elements in the input sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.LongCountAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L220"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "MaxAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "MaxAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "MaxAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 783,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the maximum value of a sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> MaxAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function MaxAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to determine the maximum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the maximum value in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L784"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)",
            "id": "MaxAsync_TSource__TResult__IQueryable_TSource___Expression_Func_TSource__TResult____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)",
            "name.vb": "MaxAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 818,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TResult> MaxAsync<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function MaxAsync(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), cancellationToken As CancellationToken = Nothing) As Task(Of TResult)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to determine the maximum of.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, TResult>>",
                    "name.vb": "Expression(Of Func(Of TSource, TResult))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, TResult>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TResult",
                        "fullName": "TResult",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TResult",
                        "fullName": "TResult",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, TResult&gt;&gt;",
                    "id": "Expression_Func_TSource__TResult__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                },
                {
                  "id": "TResult",
                  "description": "The type of the value returned by the function represented by <paramref name=\"selector\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TResult}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TResult>",
                  "name.vb": "Task(Of TResult)",
                  "fullName": "System.Threading.Tasks.Task<TResult>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TResult)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TResult",
                      "fullName": "TResult",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TResult",
                      "fullName": "TResult",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TResult&gt;",
                  "id": "Task_TResult_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the maximum value in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MaxAsync&lt;TSource, TResult&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, TResult&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L819"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "MinAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "MinAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "MinAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 711,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the minimum value of a sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> MinAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function MinAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to determine the minimum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the minimum value in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L712"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)",
            "id": "MinAsync_TSource__TResult__IQueryable_TSource___Expression_Func_TSource__TResult____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)",
            "name.vb": "MinAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 746,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TResult> MinAsync<TSource, TResult>(IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function MinAsync(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), cancellationToken As CancellationToken = Nothing) As Task(Of TResult)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to determine the minimum of.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, TResult>>",
                    "name.vb": "Expression(Of Func(Of TSource, TResult))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, TResult>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TResult",
                        "fullName": "TResult",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TResult",
                        "fullName": "TResult",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, TResult&gt;&gt;",
                    "id": "Expression_Func_TSource__TResult__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                },
                {
                  "id": "TResult",
                  "description": "The type of the value returned by the function represented by <paramref name=\"selector\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TResult}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TResult>",
                  "name.vb": "Task(Of TResult)",
                  "fullName": "System.Threading.Tasks.Task<TResult>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TResult)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TResult",
                      "fullName": "TResult",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TResult",
                      "fullName": "TResult",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TResult&gt;",
                  "id": "Task_TResult_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the minimum value in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.MinAsync&lt;TSource, TResult&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, TResult&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L747"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "SingleAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "SingleAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 603,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the only element of a sequence that satisfies a specified condition,\nand throws an exception if more than one such element exists.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> SingleAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SingleAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test an element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the single element of the input sequence that satisfies the condition in</p>\n<p><paramref name=\"predicate\"></paramref>.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L604"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "SingleAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SingleAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "SingleAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 569,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the only element of a sequence, and throws an exception\nif there is not exactly one element in the sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> SingleAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SingleAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the single element of the input sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L570"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)",
            "id": "SingleOrDefaultAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Boolean____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)",
            "name.vb": "SingleOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 674,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the only element of a sequence that satisfies a specified condition or\na default value if no such element exists; this method throws an exception if more than one element\nsatisfies the condition.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SingleOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.</p>\n"
                },
                {
                  "id": "predicate",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Boolean>>",
                    "name.vb": "Expression(Of Func(Of TSource, Boolean))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Boolean",
                        "name": "Boolean",
                        "fullName": "System.Boolean",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Boolean\" name=\"System.Boolean\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Boolean__",
                    "level": 0
                  },
                  "description": "<p>A function to test an element for a condition.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the single element of the input sequence that satisfies the condition in</p>\n<p><paramref name=\"predicate\"></paramref>, or <c>default</c> ( <typeparamref name=\"TSource\"></typeparamref> ) if no such element is found.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Boolean&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L675"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "SingleOrDefaultAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "SingleOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 639,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously returns the only element of a sequence, or a default value if the sequence is empty;\nthis method throws an exception if there is more than one element in the sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource> SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SingleOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource>",
                  "name.vb": "Task(Of TSource)",
                  "fullName": "System.Threading.Tasks.Task<TSource>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource&gt;",
                  "id": "Task_TSource_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the single element of the input sequence, or <c>default</c> (</p>\n<p><typeparamref name=\"TSource\"></typeparamref>)\nif the sequence contains no elements.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L640"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Decimal___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Decimal>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Decimal), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Decimal>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Decimal), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 852,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<decimal> SumAsync(IQueryable<decimal> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Decimal), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Decimal}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Decimal>",
                    "name.vb": "IQueryable(Of Decimal)",
                    "fullName": "System.Linq.IQueryable<System.Decimal>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Decimal)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;",
                    "id": "IQueryable_Decimal_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Decimal}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Decimal>",
                  "name.vb": "Task(Of Decimal)",
                  "fullName": "System.Threading.Tasks.Task<System.Decimal>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Decimal)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;",
                  "id": "Task_Decimal_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Decimal&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L853"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Double___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Double>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Double), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Double>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Double), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1212,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double> SumAsync(IQueryable<double> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Double), cancellationToken As CancellationToken = Nothing) As Task(Of Double)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Double}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Double>",
                    "name.vb": "IQueryable(Of Double)",
                    "fullName": "System.Linq.IQueryable<System.Double>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Double)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                    "id": "IQueryable_Double_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Double}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Double>",
                  "name.vb": "Task(Of Double)",
                  "fullName": "System.Threading.Tasks.Task<System.Double>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Double)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                  "id": "Task_Double_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Double&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1213"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Int32___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Int32>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Int32), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Int32>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Int32), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 972,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<int> SumAsync(IQueryable<int> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Integer), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Int32}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Int32>",
                    "name.vb": "IQueryable(Of Int32)",
                    "fullName": "System.Linq.IQueryable<System.Int32>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Int32)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;",
                    "id": "IQueryable_Int32_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Int32}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Int32>",
                  "name.vb": "Task(Of Int32)",
                  "fullName": "System.Threading.Tasks.Task<System.Int32>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Int32)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;",
                  "id": "Task_Int32_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Int32&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L973"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Int64___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Int64>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Int64), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Int64>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Int64), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1092,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<long> SumAsync(IQueryable<long> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Long), cancellationToken As CancellationToken = Nothing) As Task(Of Long)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Int64}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Int64>",
                    "name.vb": "IQueryable(Of Int64)",
                    "fullName": "System.Linq.IQueryable<System.Int64>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Int64)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;",
                    "id": "IQueryable_Int64_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Int64}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Int64>",
                  "name.vb": "Task(Of Int64)",
                  "fullName": "System.Threading.Tasks.Task<System.Int64>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Int64)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;",
                  "id": "Task_Int64_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Int64&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1093"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Nullable_Decimal____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Nullable(Of Decimal)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Decimal>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 880,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<decimal ? > SumAsync(IQueryable<decimal ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Decimal?), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Decimal}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Decimal>>",
                    "name.vb": "IQueryable(Of Nullable(Of Decimal))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Decimal>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Decimal))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Decimal__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Decimal}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Decimal>>",
                  "name.vb": "Task(Of Nullable(Of Decimal))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Decimal>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Decimal))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;",
                  "id": "Task_Nullable_Decimal__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L881"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Nullable_Double____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Nullable<Double>>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Nullable(Of Double)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Double>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Double)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1240,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double ? > SumAsync(IQueryable<double ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Double?), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Double}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Double>>",
                    "name.vb": "IQueryable(Of Nullable(Of Double))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Double>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Double))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Double__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Double}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Double>>",
                  "name.vb": "Task(Of Nullable(Of Double))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Double>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                  "id": "Task_Nullable_Double__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1241"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Nullable_Int32____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Nullable<Int32>>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Nullable(Of Int32)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Int32>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1000,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<int ? > SumAsync(IQueryable<int ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Integer?), cancellationToken As CancellationToken = Nothing) As Task(Of Integer?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Int32}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Int32>>",
                    "name.vb": "IQueryable(Of Nullable(Of Int32))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Int32>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Int32))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Int32__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Int32}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Int32>>",
                  "name.vb": "Task(Of Nullable(Of Int32))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Int32>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Int32))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;&gt;",
                  "id": "Task_Nullable_Int32__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1001"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Nullable_Int64____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Nullable<Int64>>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Nullable(Of Int64)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Int64>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1120,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<long ? > SumAsync(IQueryable<long ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Long?), cancellationToken As CancellationToken = Nothing) As Task(Of Long?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Int64}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Int64>>",
                    "name.vb": "IQueryable(Of Nullable(Of Int64))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Int64>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Int64))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Int64__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Int64}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Int64>>",
                  "name.vb": "Task(Of Nullable(Of Int64))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Int64>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Int64))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;&gt;",
                  "id": "Task_Nullable_Int64__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1121"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Nullable_Single____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Nullable<Single>>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Nullable(Of Single)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Single>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Single)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1360,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<float ? > SumAsync(IQueryable<float ? > source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Single?), cancellationToken As CancellationToken = Nothing) As Task(Of Single?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Nullable{System.Single}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Nullable<Single>>",
                    "name.vb": "IQueryable(Of Nullable(Of Single))",
                    "fullName": "System.Linq.IQueryable<System.Nullable<System.Single>>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Nullable(Of System.Single))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;",
                    "id": "IQueryable_Nullable_Single__",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Single}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Single>>",
                  "name.vb": "Task(Of Nullable(Of Single))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Single>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Single))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;",
                  "id": "Task_Nullable_Single__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1361"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)",
            "id": "SumAsync_IQueryable_Single___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync(IQueryable<Single>, CancellationToken)",
            "name.vb": "SumAsync(IQueryable(Of Single), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Single>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Single), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1332,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of a sequence of values.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<float> SumAsync(IQueryable<float> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(source As IQueryable(Of Single), cancellationToken As CancellationToken = Nothing) As Task(Of Single)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{System.Single}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<Single>",
                    "name.vb": "IQueryable(Of Single)",
                    "fullName": "System.Linq.IQueryable<System.Single>",
                    "fullName.vb": "System.Linq.IQueryable(Of System.Single)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;",
                    "id": "IQueryable_Single_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values to calculate the sum of.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Single}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Single>",
                  "name.vb": "Task(Of Single)",
                  "fullName": "System.Threading.Tasks.Task<System.Single>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Single)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;",
                  "id": "Task_Single_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable&lt;System.Single&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1333"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Decimal____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Decimal)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 910,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<decimal> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal)), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Decimal>>",
                    "name.vb": "Expression(Of Func(Of TSource, Decimal))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Decimal__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Decimal}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Decimal>",
                  "name.vb": "Task(Of Decimal)",
                  "fullName": "System.Threading.Tasks.Task<System.Decimal>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Decimal)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;",
                  "id": "Task_Decimal_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Decimal&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L911"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Double____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Double)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1270,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double)), cancellationToken As CancellationToken = Nothing) As Task(Of Double)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Double>>",
                    "name.vb": "Expression(Of Func(Of TSource, Double))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Double__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Double}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Double>",
                  "name.vb": "Task(Of Double)",
                  "fullName": "System.Threading.Tasks.Task<System.Double>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Double)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;",
                  "id": "Task_Double_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Double&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1271"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Int32____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1030,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<int> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer)), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Int32>>",
                    "name.vb": "Expression(Of Func(Of TSource, Int32))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Int32__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Int32}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Int32>",
                  "name.vb": "Task(Of Int32)",
                  "fullName": "System.Threading.Tasks.Task<System.Int32>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Int32)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;",
                  "id": "Task_Int32_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Int32&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1031"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Int64____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int64)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1150,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<long> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long)), cancellationToken As CancellationToken = Nothing) As Task(Of Long)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Int64>>",
                    "name.vb": "Expression(Of Func(Of TSource, Int64))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Int64__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Int64}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Int64>",
                  "name.vb": "Task(Of Int64)",
                  "fullName": "System.Threading.Tasks.Task<System.Int64>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Int64)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;",
                  "id": "Task_Int64_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Int64&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1151"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Decimal_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 942,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<decimal ? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal?)), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Decimal>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Decimal)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Decimal",
                        "name": "Decimal",
                        "fullName": "System.Decimal",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Decimal___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Decimal}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Decimal>>",
                  "name.vb": "Task(Of Nullable(Of Decimal))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Decimal>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Decimal))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Decimal",
                      "name": "Decimal",
                      "fullName": "System.Decimal",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Decimal\" name=\"System.Decimal\"/>&gt;&gt;",
                  "id": "Task_Nullable_Decimal__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Decimal&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L943"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Double_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1302,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<double ? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double?)), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Double>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Double)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Double",
                        "name": "Double",
                        "fullName": "System.Double",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Double___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Double}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Double>>",
                  "name.vb": "Task(Of Nullable(Of Double))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Double>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Double",
                      "name": "Double",
                      "fullName": "System.Double",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Double\" name=\"System.Double\"/>&gt;&gt;",
                  "id": "Task_Nullable_Double__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Double&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1303"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Int32_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1062,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<int ? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer?)), cancellationToken As CancellationToken = Nothing) As Task(Of Integer?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Int32>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Int32)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int32",
                        "name": "Int32",
                        "fullName": "System.Int32",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Int32___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Int32}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Int32>>",
                  "name.vb": "Task(Of Nullable(Of Int32))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Int32>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Int32))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int32",
                      "name": "Int32",
                      "fullName": "System.Int32",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int32\" name=\"System.Int32\"/>&gt;&gt;",
                  "id": "Task_Nullable_Int32__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Int32&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1063"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Int64_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1182,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<long ? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long?)), cancellationToken As CancellationToken = Nothing) As Task(Of Long?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Int64>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Int64)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Int64",
                        "name": "Int64",
                        "fullName": "System.Int64",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Int64___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Int64}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Int64>>",
                  "name.vb": "Task(Of Nullable(Of Int64))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Int64>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Int64))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Int64",
                      "name": "Int64",
                      "fullName": "System.Int64",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Int64\" name=\"System.Int64\"/>&gt;&gt;",
                  "id": "Task_Nullable_Int64__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Int64&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1183"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Nullable_Single_____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1422,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<float ? > SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single?)), cancellationToken As CancellationToken = Nothing) As Task(Of Single?)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Nullable<Single>>>",
                    "name.vb": "Expression(Of Func(Of TSource, Nullable(Of Single)))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single)))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Nullable`1",
                        "name": "Nullable",
                        "fullName": "System.Nullable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;&gt;",
                    "id": "Expression_Func_TSource__Nullable_Single___",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Nullable{System.Single}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Nullable<Single>>",
                  "name.vb": "Task(Of Nullable(Of Single))",
                  "fullName": "System.Threading.Tasks.Task<System.Nullable<System.Single>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Nullable(Of System.Single))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Nullable`1",
                      "name": "Nullable",
                      "fullName": "System.Nullable",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Nullable`1\" name=\"System.Nullable\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;",
                  "id": "Task_Nullable_Single__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Nullable&lt;System.Single&gt;&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1423"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)",
            "id": "SumAsync_TSource__IQueryable_TSource___Expression_Func_TSource__Single____CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken)",
            "name.vb": "SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Single)), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 1390,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<float> SumAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single)), cancellationToken As CancellationToken = Nothing) As Task(Of Single)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>A sequence of values of type <typeparamref name=\"TSource\"></typeparamref>.</p>\n"
                },
                {
                  "id": "selector",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TSource, Single>>",
                    "name.vb": "Expression(Of Func(Of TSource, Single))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Single",
                        "name": "Single",
                        "fullName": "System.Single",
                        "isExternal": true
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, <xref href=\"System.Single\" name=\"System.Single\"/>&gt;&gt;",
                    "id": "Expression_Func_TSource__Single__",
                    "level": 0
                  },
                  "description": "<p>A projection function to apply to each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource"
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Single}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Single>",
                  "name.vb": "Task(Of Single)",
                  "fullName": "System.Threading.Tasks.Task<System.Single>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Single)",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Single",
                      "name": "Single",
                      "fullName": "System.Single",
                      "isExternal": true
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Single\" name=\"System.Single\"/>&gt;",
                  "id": "Task_Single_",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.SumAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TSource, System.Single&gt;&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L1391"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.Data.Entity.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})",
            "id": "ThenInclude_TEntity__TPreviousProperty__TProperty__IIncludableQueryable_TEntity__TPreviousProperty___Expression_Func_TPreviousProperty__TProperty___",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ThenInclude<TEntity, TPreviousProperty, TProperty>(IIncludableQueryable<TEntity, TPreviousProperty>, Expression<Func<TPreviousProperty, TProperty>>)",
            "name.vb": "ThenInclude(Of TEntity, TPreviousProperty, TProperty)(IIncludableQueryable(Of TEntity, TPreviousProperty), Expression(Of Func(Of TPreviousProperty, TProperty)))",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude<TEntity, TPreviousProperty, TProperty>(Microsoft.Data.Entity.Query.IIncludableQueryable<TEntity, TPreviousProperty>, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty>>)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude(Of TEntity, TPreviousProperty, TProperty)(Microsoft.Data.Entity.Query.IIncludableQueryable(Of TEntity, TPreviousProperty), System.Linq.Expressions.Expression(Of System.Func(Of TPreviousProperty, TProperty)))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2322,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Specifies additional related data to be further included based on a related type that was just included.</p>\n",
            "example": "<para>\nThe following query shows including a single level of related entities.\n<code>\ncontext.Blogs.Include(blog =&gt; blog.Posts);\n</code></para>\n<para>\nThe following query shows including two levels of entities on the same branch.\n<code>\ncontext.Blogs\n.Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags);\n</code></para>\n<para>\nThe following query shows including multiple levels and branches of related data.\n<code>\ncontext.Blogs\n.Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags).ThenInclude(tag =&gt; tag.TagInfo)\n.Include(blog =&gt; blog.Contributors);\n</code></para>",
            "syntax": {
              "content": "public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(IIncludableQueryable<TEntity, TPreviousProperty> source, Expression<Func<TPreviousProperty, TProperty>> navigationPropertyPath)where TEntity : class",
              "content.vb": "Public Shared Function ThenInclude(Of TEntity As Class, TPreviousProperty, TProperty)(source As IIncludableQueryable(Of TEntity, TPreviousProperty), navigationPropertyPath As Expression(Of Func(Of TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable{{TEntity},{TPreviousProperty}}",
                    "parent": "Microsoft.Data.Entity.Query",
                    "definition": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                    "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml",
                    "name": "IIncludableQueryable<TEntity, TPreviousProperty>",
                    "name.vb": "IIncludableQueryable(Of TEntity, TPreviousProperty)",
                    "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable<TEntity, TPreviousProperty>",
                    "fullName.vb": "Microsoft.Data.Entity.Query.IIncludableQueryable(Of TEntity, TPreviousProperty)",
                    "spec.csharp": [
                      {
                        "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                        "name": "IIncludableQueryable",
                        "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                        "isExternal": false,
                        "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TPreviousProperty",
                        "fullName": "TPreviousProperty",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                        "name": "IIncludableQueryable",
                        "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                        "isExternal": false,
                        "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TPreviousProperty",
                        "fullName": "TPreviousProperty",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.IIncludableQueryable`2\" name=\"Microsoft.Data.Entity.Query.IIncludableQueryable\"/>&lt;TEntity, TPreviousProperty&gt;",
                    "id": "IIncludableQueryable_TEntity__TPreviousProperty_",
                    "level": 0
                  },
                  "description": "<p>The source query.</p>\n"
                },
                {
                  "id": "navigationPropertyPath",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TPreviousProperty},{TProperty}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TPreviousProperty, TProperty>>",
                    "name.vb": "Expression(Of Func(Of TPreviousProperty, TProperty))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TPreviousProperty, TProperty))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TPreviousProperty",
                        "fullName": "TPreviousProperty",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TProperty",
                        "fullName": "TProperty",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TPreviousProperty",
                        "fullName": "TPreviousProperty",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TProperty",
                        "fullName": "TProperty",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TPreviousProperty, TProperty&gt;&gt;",
                    "id": "Expression_Func_TPreviousProperty__TProperty__",
                    "level": 0
                  },
                  "description": "<p>A lambda expression representing the navigation property to be included (<c>t =&gt; t.Property1</c>).</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TEntity",
                  "description": "The type of entity being queried."
                },
                {
                  "id": "TPreviousProperty",
                  "description": "The type of the entity that was just included."
                },
                {
                  "id": "TProperty",
                  "description": "The type of the related entity to be included."
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable{{TEntity},{TProperty}}",
                  "parent": "Microsoft.Data.Entity.Query",
                  "definition": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                  "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml",
                  "name": "IIncludableQueryable<TEntity, TProperty>",
                  "name.vb": "IIncludableQueryable(Of TEntity, TProperty)",
                  "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable<TEntity, TProperty>",
                  "fullName.vb": "Microsoft.Data.Entity.Query.IIncludableQueryable(Of TEntity, TProperty)",
                  "spec.csharp": [
                    {
                      "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                      "name": "IIncludableQueryable",
                      "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TProperty",
                      "fullName": "TProperty",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                      "name": "IIncludableQueryable",
                      "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TProperty",
                      "fullName": "TProperty",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.IIncludableQueryable`2\" name=\"Microsoft.Data.Entity.Query.IIncludableQueryable\"/>&lt;TEntity, TProperty&gt;",
                  "id": "IIncludableQueryable_TEntity__TProperty_",
                  "level": 0
                },
                "description": "<p>A new query with the related data included.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.Data.Entity.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude&lt;TEntity, TPreviousProperty, TProperty&gt;(Microsoft.Data.Entity.Query.IIncludableQueryable&lt;TEntity, TPreviousProperty&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TPreviousProperty, TProperty&gt;&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2323"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.Data.Entity.Query.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})",
            "id": "ThenInclude_TEntity__TPreviousProperty__TProperty__IIncludableQueryable_TEntity__ICollection_TPreviousProperty____Expression_Func_TPreviousProperty__TProperty___",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ThenInclude<TEntity, TPreviousProperty, TProperty>(IIncludableQueryable<TEntity, ICollection<TPreviousProperty>>, Expression<Func<TPreviousProperty, TProperty>>)",
            "name.vb": "ThenInclude(Of TEntity, TPreviousProperty, TProperty)(IIncludableQueryable(Of TEntity, ICollection(Of TPreviousProperty)), Expression(Of Func(Of TPreviousProperty, TProperty)))",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude<TEntity, TPreviousProperty, TProperty>(Microsoft.Data.Entity.Query.IIncludableQueryable<TEntity, System.Collections.Generic.ICollection<TPreviousProperty>>, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty>>)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude(Of TEntity, TPreviousProperty, TProperty)(Microsoft.Data.Entity.Query.IIncludableQueryable(Of TEntity, System.Collections.Generic.ICollection(Of TPreviousProperty)), System.Linq.Expressions.Expression(Of System.Func(Of TPreviousProperty, TProperty)))",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2275,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Specifies additional related data to be further included based on a related type that was just included.</p>\n",
            "example": "<para>\nThe following query shows including a single level of related entities.\n<code>\ncontext.Blogs.Include(blog =&gt; blog.Posts);\n</code></para>\n<para>\nThe following query shows including two levels of entities on the same branch.\n<code>\ncontext.Blogs\n.Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags);\n</code></para>\n<para>\nThe following query shows including multiple levels and branches of related data.\n<code>\ncontext.Blogs\n.Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags).ThenInclude(tag =&gt; tag.TagInfo)\n.Include(blog =&gt; blog.Contributors);\n</code></para>",
            "syntax": {
              "content": "public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(IIncludableQueryable<TEntity, ICollection<TPreviousProperty>> source, Expression<Func<TPreviousProperty, TProperty>> navigationPropertyPath)where TEntity : class",
              "content.vb": "Public Shared Function ThenInclude(Of TEntity As Class, TPreviousProperty, TProperty)(source As IIncludableQueryable(Of TEntity, ICollection(Of TPreviousProperty)), navigationPropertyPath As Expression(Of Func(Of TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable{{TEntity},System.Collections.Generic.ICollection{{TPreviousProperty}}}",
                    "parent": "Microsoft.Data.Entity.Query",
                    "definition": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                    "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml",
                    "name": "IIncludableQueryable<TEntity, ICollection<TPreviousProperty>>",
                    "name.vb": "IIncludableQueryable(Of TEntity, ICollection(Of TPreviousProperty))",
                    "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable<TEntity, System.Collections.Generic.ICollection<TPreviousProperty>>",
                    "fullName.vb": "Microsoft.Data.Entity.Query.IIncludableQueryable(Of TEntity, System.Collections.Generic.ICollection(Of TPreviousProperty))",
                    "spec.csharp": [
                      {
                        "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                        "name": "IIncludableQueryable",
                        "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                        "isExternal": false,
                        "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Collections.Generic.ICollection`1",
                        "name": "ICollection",
                        "fullName": "System.Collections.Generic.ICollection",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TPreviousProperty",
                        "fullName": "TPreviousProperty",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                        "name": "IIncludableQueryable",
                        "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                        "isExternal": false,
                        "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TEntity",
                        "fullName": "TEntity",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Collections.Generic.ICollection`1",
                        "name": "ICollection",
                        "fullName": "System.Collections.Generic.ICollection",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TPreviousProperty",
                        "fullName": "TPreviousProperty",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"Microsoft.Data.Entity.Query.IIncludableQueryable`2\" name=\"Microsoft.Data.Entity.Query.IIncludableQueryable\"/>&lt;TEntity, <xref href=\"System.Collections.Generic.ICollection`1\" name=\"System.Collections.Generic.ICollection\"/>&lt;TPreviousProperty&gt;&gt;",
                    "id": "IIncludableQueryable_TEntity__ICollection_TPreviousProperty__",
                    "level": 0
                  },
                  "description": "<p>The source query.</p>\n"
                },
                {
                  "id": "navigationPropertyPath",
                  "type": {
                    "uid": "System.Linq.Expressions.Expression{System.Func{{TPreviousProperty},{TProperty}}}",
                    "parent": "System.Linq.Expressions",
                    "definition": "System.Linq.Expressions.Expression`1",
                    "name": "Expression<Func<TPreviousProperty, TProperty>>",
                    "name.vb": "Expression(Of Func(Of TPreviousProperty, TProperty))",
                    "fullName": "System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty>>",
                    "fullName.vb": "System.Linq.Expressions.Expression(Of System.Func(Of TPreviousProperty, TProperty))",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TPreviousProperty",
                        "fullName": "TPreviousProperty",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TProperty",
                        "fullName": "TProperty",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.Expressions.Expression`1",
                        "name": "Expression",
                        "fullName": "System.Linq.Expressions.Expression",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TPreviousProperty",
                        "fullName": "TPreviousProperty",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TProperty",
                        "fullName": "TProperty",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.Expressions.Expression`1\" name=\"System.Linq.Expressions.Expression\"/>&lt;<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TPreviousProperty, TProperty&gt;&gt;",
                    "id": "Expression_Func_TPreviousProperty__TProperty__",
                    "level": 0
                  },
                  "description": "<p>A lambda expression representing the navigation property to be included (<c>t =&gt; t.Property1</c>).</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TEntity",
                  "description": "The type of entity being queried."
                },
                {
                  "id": "TPreviousProperty",
                  "description": "The type of the entity that was just included."
                },
                {
                  "id": "TProperty",
                  "description": "The type of the related entity to be included."
                }
              ],
              "return": {
                "type": {
                  "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable{{TEntity},{TProperty}}",
                  "parent": "Microsoft.Data.Entity.Query",
                  "definition": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                  "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml",
                  "name": "IIncludableQueryable<TEntity, TProperty>",
                  "name.vb": "IIncludableQueryable(Of TEntity, TProperty)",
                  "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable<TEntity, TProperty>",
                  "fullName.vb": "Microsoft.Data.Entity.Query.IIncludableQueryable(Of TEntity, TProperty)",
                  "spec.csharp": [
                    {
                      "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                      "name": "IIncludableQueryable",
                      "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TProperty",
                      "fullName": "TProperty",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "Microsoft.Data.Entity.Query.IIncludableQueryable`2",
                      "name": "IIncludableQueryable",
                      "fullName": "Microsoft.Data.Entity.Query.IIncludableQueryable",
                      "isExternal": false,
                      "href": "Microsoft.Data.Entity.Query.IIncludableQueryable`2.yml"
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TEntity",
                      "fullName": "TEntity",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TProperty",
                      "fullName": "TProperty",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"Microsoft.Data.Entity.Query.IIncludableQueryable`2\" name=\"Microsoft.Data.Entity.Query.IIncludableQueryable\"/>&lt;TEntity, TProperty&gt;",
                  "id": "IIncludableQueryable_TEntity__TProperty_",
                  "level": 0
                },
                "description": "<p>A new query with the related data included.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.Data.Entity.Query.IIncludableQueryable{``0,System.Collections.Generic.ICollection{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ThenInclude&lt;TEntity, TPreviousProperty, TProperty&gt;(Microsoft.Data.Entity.Query.IIncludableQueryable&lt;TEntity, System.Collections.Generic.ICollection&lt;TPreviousProperty&gt;&gt;, System.Linq.Expressions.Expression&lt;System.Func&lt;TPreviousProperty, TProperty&gt;&gt;)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2276"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "ToArrayAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "ToArrayAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToArrayAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToArrayAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2155,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously creates an array from an <xref href=\"System.Linq.IQueryable`1\"></xref> by enumerating it asynchronously.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<TSource[]> ToArrayAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function ToArrayAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource())",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to create an array from.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{{TSource}[]}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<TSource[]>",
                  "name.vb": "Task(Of TSource())",
                  "fullName": "System.Threading.Tasks.Task<TSource[]>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of TSource())",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": "[]",
                      "fullName": "[]",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": "()",
                      "fullName": "()",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;TSource[]&gt;",
                  "id": "Task_TSource___",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains an array that contains elements from the input sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToArrayAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2156"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)",
            "id": "ToDictionaryAsync_TSource__TKey__IQueryable_TSource___Func_TSource__TKey___IEqualityComparer_TKey___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken)",
            "name.vb": "ToDictionaryAsync(Of TSource, TKey)(IQueryable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2580,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Linq.IQueryable`1\"></xref> by enumerating it\nasynchronously\naccording to a specified key selector function and a comparer.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function ToDictionaryAsync(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TSource))",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.</p>\n"
                },
                {
                  "id": "keySelector",
                  "type": {
                    "uid": "System.Func{{TSource},{TKey}}",
                    "parent": "System",
                    "definition": "System.Func`2",
                    "name": "Func<TSource, TKey>",
                    "name.vb": "Func(Of TSource, TKey)",
                    "fullName": "System.Func<TSource, TKey>",
                    "fullName.vb": "System.Func(Of TSource, TKey)",
                    "spec.csharp": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, TKey&gt;",
                    "id": "Func_TSource__TKey_",
                    "level": 0
                  },
                  "description": "<p>A function to extract a key from each element.</p>\n"
                },
                {
                  "id": "comparer",
                  "type": {
                    "uid": "System.Collections.Generic.IEqualityComparer{{TKey}}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEqualityComparer`1",
                    "name": "IEqualityComparer<TKey>",
                    "name.vb": "IEqualityComparer(Of TKey)",
                    "fullName": "System.Collections.Generic.IEqualityComparer<TKey>",
                    "fullName.vb": "System.Collections.Generic.IEqualityComparer(Of TKey)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEqualityComparer`1",
                        "name": "IEqualityComparer",
                        "fullName": "System.Collections.Generic.IEqualityComparer",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEqualityComparer`1",
                        "name": "IEqualityComparer",
                        "fullName": "System.Collections.Generic.IEqualityComparer",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEqualityComparer`1\" name=\"System.Collections.Generic.IEqualityComparer\"/>&lt;TKey&gt;",
                    "id": "IEqualityComparer_TKey_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                },
                {
                  "id": "TKey",
                  "description": "The type of the key returned by <paramref name=\"keySelector\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TSource}}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Dictionary<TKey, TSource>>",
                  "name.vb": "Task(Of Dictionary(Of TKey, TSource))",
                  "fullName": "System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of TKey, TSource))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.Dictionary`2",
                      "name": "Dictionary",
                      "fullName": "System.Collections.Generic.Dictionary",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TKey",
                      "fullName": "TKey",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.Dictionary`2",
                      "name": "Dictionary",
                      "fullName": "System.Collections.Generic.Dictionary",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TKey",
                      "fullName": "TKey",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Collections.Generic.Dictionary`2\" name=\"System.Collections.Generic.Dictionary\"/>&lt;TKey, TSource&gt;&gt;",
                  "id": "Task_Dictionary_TKey__TSource__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains selected keys and values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync&lt;TSource, TKey&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Func&lt;TSource, TKey&gt;, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2581"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)",
            "id": "ToDictionaryAsync_TSource__TKey__IQueryable_TSource___Func_TSource__TKey___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken)",
            "name.vb": "ToDictionaryAsync(Of TSource, TKey)(IQueryable(Of TSource), Func(Of TSource, TKey), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Func<TSource, TKey>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, TKey), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2540,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Linq.IQueryable`1\"></xref> by enumerating it\nasynchronously\naccording to a specified key selector function.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function ToDictionaryAsync(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TSource))",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.</p>\n"
                },
                {
                  "id": "keySelector",
                  "type": {
                    "uid": "System.Func{{TSource},{TKey}}",
                    "parent": "System",
                    "definition": "System.Func`2",
                    "name": "Func<TSource, TKey>",
                    "name.vb": "Func(Of TSource, TKey)",
                    "fullName": "System.Func<TSource, TKey>",
                    "fullName.vb": "System.Func(Of TSource, TKey)",
                    "spec.csharp": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, TKey&gt;",
                    "id": "Func_TSource__TKey_",
                    "level": 0
                  },
                  "description": "<p>A function to extract a key from each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                },
                {
                  "id": "TKey",
                  "description": "The type of the key returned by <paramref name=\"keySelector\" /> ."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TSource}}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Dictionary<TKey, TSource>>",
                  "name.vb": "Task(Of Dictionary(Of TKey, TSource))",
                  "fullName": "System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of TKey, TSource))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.Dictionary`2",
                      "name": "Dictionary",
                      "fullName": "System.Collections.Generic.Dictionary",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TKey",
                      "fullName": "TKey",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.Dictionary`2",
                      "name": "Dictionary",
                      "fullName": "System.Collections.Generic.Dictionary",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TKey",
                      "fullName": "TKey",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Collections.Generic.Dictionary`2\" name=\"System.Collections.Generic.Dictionary\"/>&lt;TKey, TSource&gt;&gt;",
                  "id": "Task_Dictionary_TKey__TSource__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains selected keys and values.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync&lt;TSource, TKey&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Func&lt;TSource, TKey&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2541"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)",
            "id": "ToDictionaryAsync_TSource__TKey__TElement__IQueryable_TSource___Func_TSource__TKey___Func_TSource__TElement___IEqualityComparer_TKey___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken)",
            "name.vb": "ToDictionaryAsync(Of TSource, TKey, TElement)(IQueryable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2671,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Linq.IQueryable`1\"></xref> by enumerating it\nasynchronously\naccording to a specified key selector function, a comparer, and an element selector function.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function ToDictionaryAsync(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TElement))",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.</p>\n"
                },
                {
                  "id": "keySelector",
                  "type": {
                    "uid": "System.Func{{TSource},{TKey}}",
                    "parent": "System",
                    "definition": "System.Func`2",
                    "name": "Func<TSource, TKey>",
                    "name.vb": "Func(Of TSource, TKey)",
                    "fullName": "System.Func<TSource, TKey>",
                    "fullName.vb": "System.Func(Of TSource, TKey)",
                    "spec.csharp": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, TKey&gt;",
                    "id": "Func_TSource__TKey_",
                    "level": 0
                  },
                  "description": "<p>A function to extract a key from each element.</p>\n"
                },
                {
                  "id": "elementSelector",
                  "type": {
                    "uid": "System.Func{{TSource},{TElement}}",
                    "parent": "System",
                    "definition": "System.Func`2",
                    "name": "Func<TSource, TElement>",
                    "name.vb": "Func(Of TSource, TElement)",
                    "fullName": "System.Func<TSource, TElement>",
                    "fullName.vb": "System.Func(Of TSource, TElement)",
                    "spec.csharp": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TElement",
                        "fullName": "TElement",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TElement",
                        "fullName": "TElement",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, TElement&gt;",
                    "id": "Func_TSource__TElement_",
                    "level": 0
                  },
                  "description": "<p>A transform function to produce a result element value from each element.</p>\n"
                },
                {
                  "id": "comparer",
                  "type": {
                    "uid": "System.Collections.Generic.IEqualityComparer{{TKey}}",
                    "parent": "System.Collections.Generic",
                    "definition": "System.Collections.Generic.IEqualityComparer`1",
                    "name": "IEqualityComparer<TKey>",
                    "name.vb": "IEqualityComparer(Of TKey)",
                    "fullName": "System.Collections.Generic.IEqualityComparer<TKey>",
                    "fullName.vb": "System.Collections.Generic.IEqualityComparer(Of TKey)",
                    "spec.csharp": [
                      {
                        "uid": "System.Collections.Generic.IEqualityComparer`1",
                        "name": "IEqualityComparer",
                        "fullName": "System.Collections.Generic.IEqualityComparer",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Collections.Generic.IEqualityComparer`1",
                        "name": "IEqualityComparer",
                        "fullName": "System.Collections.Generic.IEqualityComparer",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Collections.Generic.IEqualityComparer`1\" name=\"System.Collections.Generic.IEqualityComparer\"/>&lt;TKey&gt;",
                    "id": "IEqualityComparer_TKey_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                },
                {
                  "id": "TKey",
                  "description": "The type of the key returned by <paramref name=\"keySelector\" /> ."
                },
                {
                  "id": "TElement",
                  "description": "The type of the value returned by <paramref name=\"elementSelector\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TElement}}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Dictionary<TKey, TElement>>",
                  "name.vb": "Task(Of Dictionary(Of TKey, TElement))",
                  "fullName": "System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of TKey, TElement))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.Dictionary`2",
                      "name": "Dictionary",
                      "fullName": "System.Collections.Generic.Dictionary",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TKey",
                      "fullName": "TKey",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TElement",
                      "fullName": "TElement",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.Dictionary`2",
                      "name": "Dictionary",
                      "fullName": "System.Collections.Generic.Dictionary",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TKey",
                      "fullName": "TKey",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TElement",
                      "fullName": "TElement",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Collections.Generic.Dictionary`2\" name=\"System.Collections.Generic.Dictionary\"/>&lt;TKey, TElement&gt;&gt;",
                  "id": "Task_Dictionary_TKey__TElement__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains values of type</p>\n<p><typeparamref name=\"TElement\"></typeparamref> selected from the input sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Func&lt;TSource, TKey&gt;, System.Func&lt;TSource, TElement&gt;, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2672"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)",
            "id": "ToDictionaryAsync_TSource__TKey__TElement__IQueryable_TSource___Func_TSource__TKey___Func_TSource__TElement___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken)",
            "name.vb": "ToDictionaryAsync(Of TSource, TKey, TElement)(IQueryable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2624,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from an <xref href=\"System.Linq.IQueryable`1\"></xref> by enumerating it\nasynchronously\naccording to a specified key selector and an element selector function.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function ToDictionaryAsync(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TElement))",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> from.</p>\n"
                },
                {
                  "id": "keySelector",
                  "type": {
                    "uid": "System.Func{{TSource},{TKey}}",
                    "parent": "System",
                    "definition": "System.Func`2",
                    "name": "Func<TSource, TKey>",
                    "name.vb": "Func(Of TSource, TKey)",
                    "fullName": "System.Func<TSource, TKey>",
                    "fullName.vb": "System.Func(Of TSource, TKey)",
                    "spec.csharp": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TKey",
                        "fullName": "TKey",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, TKey&gt;",
                    "id": "Func_TSource__TKey_",
                    "level": 0
                  },
                  "description": "<p>A function to extract a key from each element.</p>\n"
                },
                {
                  "id": "elementSelector",
                  "type": {
                    "uid": "System.Func{{TSource},{TElement}}",
                    "parent": "System",
                    "definition": "System.Func`2",
                    "name": "Func<TSource, TElement>",
                    "name.vb": "Func(Of TSource, TElement)",
                    "fullName": "System.Func<TSource, TElement>",
                    "fullName.vb": "System.Func(Of TSource, TElement)",
                    "spec.csharp": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TElement",
                        "fullName": "TElement",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Func`2",
                        "name": "Func",
                        "fullName": "System.Func",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ", ",
                        "fullName": ", ",
                        "isExternal": false
                      },
                      {
                        "name": "TElement",
                        "fullName": "TElement",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Func`2\" name=\"System.Func\"/>&lt;TSource, TElement&gt;",
                    "id": "Func_TSource__TElement_",
                    "level": 0
                  },
                  "description": "<p>A transform function to produce a result element value from each element.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                },
                {
                  "id": "TKey",
                  "description": "The type of the key returned by <paramref name=\"keySelector\" /> ."
                },
                {
                  "id": "TElement",
                  "description": "The type of the value returned by <paramref name=\"elementSelector\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TElement}}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<Dictionary<TKey, TElement>>",
                  "name.vb": "Task(Of Dictionary(Of TKey, TElement))",
                  "fullName": "System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of TKey, TElement))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.Dictionary`2",
                      "name": "Dictionary",
                      "fullName": "System.Collections.Generic.Dictionary",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TKey",
                      "fullName": "TKey",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TElement",
                      "fullName": "TElement",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.Dictionary`2",
                      "name": "Dictionary",
                      "fullName": "System.Collections.Generic.Dictionary",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TKey",
                      "fullName": "TKey",
                      "isExternal": false
                    },
                    {
                      "name": ", ",
                      "fullName": ", ",
                      "isExternal": false
                    },
                    {
                      "name": "TElement",
                      "fullName": "TElement",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Collections.Generic.Dictionary`2\" name=\"System.Collections.Generic.Dictionary\"/>&lt;TKey, TElement&gt;&gt;",
                  "id": "Task_Dictionary_TKey__TElement__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.Dictionary`2\"></xref> that contains values of type</p>\n<p><typeparamref name=\"TElement\"></typeparamref> selected from the input sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Func&lt;TSource, TKey&gt;, System.Func&lt;TSource, TElement&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2625"
          },
          {
            "uid": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)",
            "id": "ToListAsync_TSource__IQueryable_TSource___CancellationToken_",
            "parent": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
            "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
            "name": "ToListAsync<TSource>(IQueryable<TSource>, CancellationToken)",
            "name.vb": "ToListAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)",
            "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToListAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)",
            "fullName.vb": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToListAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)",
            "type": "method",
            "source": {
              "remote": {
                "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
                "branch": "dev",
                "repo": "https://github.com/chenkennt/EntityFramework.git"
              },
              "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
              "startLine": 2126,
              "endLine": 0,
              "isExternal": false
            },
            "assemblies": [
              "EntityFramework.Core"
            ],
            "namespace": "Microsoft.Data.Entity",
            "summary": "<p>Asynchronously creates a <xref href=\"System.Collections.Generic.List`1\"></xref> from an <xref href=\"System.Linq.IQueryable`1\"></xref> by enumerating it\nasynchronously.</p>\n",
            "remarks": "<p>Multiple active operations on the same context instance are not supported.  Use &#39;await&#39; to ensure\nthat any asynchronous operations have completed before calling another method on this context.</p>\n",
            "syntax": {
              "content": "public static Task<List<TSource>> ToListAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken = null)",
              "content.vb": "Public Shared Function ToListAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of List(Of TSource))",
              "parameters": [
                {
                  "id": "source",
                  "type": {
                    "uid": "System.Linq.IQueryable{{TSource}}",
                    "parent": "System.Linq",
                    "definition": "System.Linq.IQueryable`1",
                    "name": "IQueryable<TSource>",
                    "name.vb": "IQueryable(Of TSource)",
                    "fullName": "System.Linq.IQueryable<TSource>",
                    "fullName.vb": "System.Linq.IQueryable(Of TSource)",
                    "spec.csharp": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "<",
                        "fullName": "<",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ">",
                        "fullName": ">",
                        "isExternal": false
                      }
                    ],
                    "spec.vb": [
                      {
                        "uid": "System.Linq.IQueryable`1",
                        "name": "IQueryable",
                        "fullName": "System.Linq.IQueryable",
                        "isExternal": true
                      },
                      {
                        "name": "(Of ",
                        "fullName": "(Of ",
                        "isExternal": false
                      },
                      {
                        "name": "TSource",
                        "fullName": "TSource",
                        "isExternal": false
                      },
                      {
                        "name": ")",
                        "fullName": ")",
                        "isExternal": false
                      }
                    ],
                    "specName": "<xref href=\"System.Linq.IQueryable`1\" name=\"System.Linq.IQueryable\"/>&lt;TSource&gt;",
                    "id": "IQueryable_TSource_",
                    "level": 0
                  },
                  "description": "<p>An <xref href=\"System.Linq.IQueryable`1\"></xref> to create a list from.</p>\n"
                },
                {
                  "id": "cancellationToken",
                  "type": {
                    "uid": "System.Threading.CancellationToken",
                    "parent": "System.Threading",
                    "isExternal": true,
                    "name": "CancellationToken",
                    "fullName": "System.Threading.CancellationToken",
                    "specName": "<xref href=\"System.Threading.CancellationToken\" name=\"System.Threading.CancellationToken\"/>",
                    "id": "CancellationToken",
                    "level": 0
                  },
                  "description": "<p>A <xref href=\"System.Threading.CancellationToken\"></xref> to observe while waiting for the task to complete.</p>\n"
                }
              ],
              "typeParameters": [
                {
                  "id": "TSource",
                  "description": "The type of the elements of <paramref name=\"source\" />."
                }
              ],
              "return": {
                "type": {
                  "uid": "System.Threading.Tasks.Task{System.Collections.Generic.List{{TSource}}}",
                  "parent": "System.Threading.Tasks",
                  "definition": "System.Threading.Tasks.Task`1",
                  "name": "Task<List<TSource>>",
                  "name.vb": "Task(Of List(Of TSource))",
                  "fullName": "System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>>",
                  "fullName.vb": "System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TSource))",
                  "spec.csharp": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.List`1",
                      "name": "List",
                      "fullName": "System.Collections.Generic.List",
                      "isExternal": true
                    },
                    {
                      "name": "<",
                      "fullName": "<",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    },
                    {
                      "name": ">",
                      "fullName": ">",
                      "isExternal": false
                    }
                  ],
                  "spec.vb": [
                    {
                      "uid": "System.Threading.Tasks.Task`1",
                      "name": "Task",
                      "fullName": "System.Threading.Tasks.Task",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "uid": "System.Collections.Generic.List`1",
                      "name": "List",
                      "fullName": "System.Collections.Generic.List",
                      "isExternal": true
                    },
                    {
                      "name": "(Of ",
                      "fullName": "(Of ",
                      "isExternal": false
                    },
                    {
                      "name": "TSource",
                      "fullName": "TSource",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    },
                    {
                      "name": ")",
                      "fullName": ")",
                      "isExternal": false
                    }
                  ],
                  "specName": "<xref href=\"System.Threading.Tasks.Task`1\" name=\"System.Threading.Tasks.Task\"/>&lt;<xref href=\"System.Collections.Generic.List`1\" name=\"System.Collections.Generic.List\"/>&lt;TSource&gt;&gt;",
                  "id": "Task_List_TSource__",
                  "level": 0
                },
                "description": "<p>A task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.List`1\"></xref> that contains elements from the input sequence.</p>\n"
              }
            },
            "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.ToListAsync&lt;TSource&gt;(System.Linq.IQueryable&lt;TSource&gt;, System.Threading.CancellationToken)\"/>",
            "level": 0,
            "docurl": "",
            "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L2127"
          }
        ]
      }
    ],
    "href": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions.yml",
    "name": "EntityFrameworkQueryableExtensions",
    "fullName": "Microsoft.Data.Entity.EntityFrameworkQueryableExtensions",
    "type": "Class",
    "source": {
      "remote": {
        "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
        "branch": "dev",
        "repo": "https://github.com/chenkennt/EntityFramework.git"
      },
      "path": "src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs",
      "startLine": 22,
      "endLine": 0,
      "isExternal": false
    },
    "assemblies": [
      "EntityFramework.Core"
    ],
    "namespace": "Microsoft.Data.Entity",
    "syntax": {
      "content": "public class EntityFrameworkQueryableExtensions",
      "content.vb": "Public Class EntityFrameworkQueryableExtensions"
    },
    "inheritance": [
      {
        "uid": "System.Object",
        "parent": "System",
        "isExternal": true,
        "name": "Object",
        "fullName": "System.Object",
        "specName": "<xref href=\"System.Object\" name=\"System.Object\"/>",
        "id": "Object",
        "level": 0,
        "index": 0
      }
    ],
    "inheritedMembers": [
      "System.Object.ToString",
      "System.Object.Equals(System.Object)",
      "System.Object.Equals(System.Object,System.Object)",
      "System.Object.ReferenceEquals(System.Object,System.Object)",
      "System.Object.GetHashCode",
      "System.Object.GetType",
      "System.Object.MemberwiseClone"
    ],
    "specName": "<xref href=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions\" name=\"Microsoft.Data.Entity.EntityFrameworkQueryableExtensions\"/>",
    "level": 1,
    "docurl": "",
    "sourceurl": "https://github.com/chenkennt/EntityFramework/blob/dev/src/EntityFramework.Core/EntityFrameworkQueryableExtensions.cs/#L23"
  },
  "isClass": true,
  "_allowToc": true
}
